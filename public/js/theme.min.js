/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/theme.min.js":
/*!***********************************!*\
  !*** ./resources/js/theme.min.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\n * Licensed under the LGPL or a commercial license.\n * For LGPL see License.txt in the project root for license information.\n * For commercial licenses see https://www.tiny.cloud/\n *\n * Version: 5.10.2 (2021-11-17)\n */\n!function () {\n  \"use strict\";\n\n  function t(o) {\n    return function (t) {\n      return e = _typeof(n = t), (null === n ? \"null\" : \"object\" == e && (Array.prototype.isPrototypeOf(n) || n.constructor && \"Array\" === n.constructor.name) ? \"array\" : \"object\" == e && (String.prototype.isPrototypeOf(n) || n.constructor && \"String\" === n.constructor.name) ? \"string\" : e) === o;\n      var n, e;\n    };\n  }\n\n  function n(n) {\n    return function (t) {\n      return _typeof(t) === n;\n    };\n  }\n\n  function e(n) {\n    return function (t) {\n      return n === t;\n    };\n  }\n\n  function g(t) {\n    return null == t;\n  }\n\n  function f(t, n) {\n    if (c(t)) {\n      for (var e = 0, o = t.length; e < o; ++e) {\n        if (!n(t[e])) return;\n      }\n\n      return 1;\n    }\n  }\n\n  function st() {}\n\n  function r(e, o) {\n    return function () {\n      for (var t = [], n = 0; n < arguments.length; n++) {\n        t[n] = arguments[n];\n      }\n\n      return e(o.apply(null, t));\n    };\n  }\n\n  function rt(t) {\n    return function () {\n      return t;\n    };\n  }\n\n  function h(t) {\n    return t;\n  }\n\n  function v(t, n) {\n    return t === n;\n  }\n\n  var y = t(\"string\"),\n      x = t(\"object\"),\n      c = t(\"array\"),\n      b = e(null),\n      w = n(\"boolean\"),\n      E = e(void 0),\n      k = function k(t) {\n    return !g(t);\n  },\n      S = n(\"function\"),\n      u = n(\"number\");\n\n  function C(o) {\n    for (var r = [], t = 1; t < arguments.length; t++) {\n      r[t - 1] = arguments[t];\n    }\n\n    return function () {\n      for (var t = [], n = 0; n < arguments.length; n++) {\n        t[n] = arguments[n];\n      }\n\n      var e = r.concat(t);\n      return o.apply(null, e);\n    };\n  }\n\n  function O(n) {\n    return function (t) {\n      return !n(t);\n    };\n  }\n\n  function _(t) {\n    return function () {\n      throw new Error(t);\n    };\n  }\n\n  var T = rt(!1),\n      D = rt(!0),\n      o = tinymce.util.Tools.resolve(\"tinymce.ThemeManager\"),\n      _lt = function lt() {\n    return (_lt = Object.assign || function (t) {\n      for (var n, e = 1, o = arguments.length; e < o; e++) {\n        for (var r in n = arguments[e]) {\n          Object.prototype.hasOwnProperty.call(n, r) && (t[r] = n[r]);\n        }\n      }\n\n      return t;\n    }).apply(this, arguments);\n  };\n\n  function B(t, n) {\n    var e = {};\n\n    for (r in t) {\n      Object.prototype.hasOwnProperty.call(t, r) && n.indexOf(r) < 0 && (e[r] = t[r]);\n    }\n\n    if (null != t && \"function\" == typeof Object.getOwnPropertySymbols) for (var o = 0, r = Object.getOwnPropertySymbols(t); o < r.length; o++) {\n      n.indexOf(r[o]) < 0 && Object.prototype.propertyIsEnumerable.call(t, r[o]) && (e[r[o]] = t[r[o]]);\n    }\n    return e;\n  }\n\n  function H(t, n, e) {\n    if (e || 2 === arguments.length) for (var o, r = 0, i = n.length; r < i; r++) {\n      !o && r in n || ((o = o || Array.prototype.slice.call(n, 0, r))[r] = n[r]);\n    }\n    return t.concat(o || Array.prototype.slice.call(n));\n  }\n\n  function i() {\n    return a;\n  }\n\n  var a = {\n    fold: function fold(t, n) {\n      return t();\n    },\n    isSome: T,\n    isNone: D,\n    getOr: h,\n    getOrThunk: s,\n    getOrDie: function getOrDie(t) {\n      throw new Error(t || \"error: getOrDie called on none.\");\n    },\n    getOrNull: rt(null),\n    getOrUndefined: rt(void 0),\n    or: h,\n    orThunk: s,\n    map: i,\n    each: st,\n    bind: i,\n    exists: T,\n    forall: D,\n    filter: function filter() {\n      return a;\n    },\n    toArray: function toArray() {\n      return [];\n    },\n    toString: rt(\"none()\")\n  };\n\n  function s(t) {\n    return t();\n  }\n\n  function l(t, n) {\n    return yt.call(t, n);\n  }\n\n  function d(t, n) {\n    for (var e = 0, o = t.length; e < o; e++) {\n      if (n(t[e], e)) return !0;\n    }\n\n    return !1;\n  }\n\n  function m(t, n) {\n    for (var e = [], o = 0; o < t; o++) {\n      e.push(n(o));\n    }\n\n    return e;\n  }\n\n  function p(t, n) {\n    for (var e = [], o = 0; o < t.length; o += n) {\n      var r = bt.call(t, o, o + n);\n      e.push(r);\n    }\n\n    return e;\n  }\n\n  function M(t, n) {\n    for (var e = t.length, o = new Array(e), r = 0; r < e; r++) {\n      var i = t[r];\n      o[r] = n(i, r);\n    }\n\n    return o;\n  }\n\n  function A(t, n) {\n    for (var e = [], o = [], r = 0, i = t.length; r < i; r++) {\n      var u = t[r];\n      (n(u, r) ? e : o).push(u);\n    }\n\n    return {\n      pass: e,\n      fail: o\n    };\n  }\n\n  function F(t, n) {\n    for (var e = [], o = 0, r = t.length; o < r; o++) {\n      var i = t[o];\n      n(i, o) && e.push(i);\n    }\n\n    return e;\n  }\n\n  function I(t, o, r) {\n    return function (t) {\n      for (var n, e = t.length - 1; 0 <= e; e--) {\n        n = t[e], r = o(r, n, e);\n      }\n    }(t), r;\n  }\n\n  function R(t, e, o) {\n    return St(t, function (t, n) {\n      o = e(o, t, n);\n    }), o;\n  }\n\n  function V(t, n) {\n    return function (t, n, e) {\n      for (var o = 0, r = t.length; o < r; o++) {\n        var i = t[o];\n        if (n(i, o)) return vt.some(i);\n        if (e(i, o)) break;\n      }\n\n      return vt.none();\n    }(t, n, T);\n  }\n\n  function P(t, n) {\n    for (var e = 0, o = t.length; e < o; e++) {\n      if (n(t[e], e)) return vt.some(e);\n    }\n\n    return vt.none();\n  }\n\n  function ft(t) {\n    for (var n = [], e = 0, o = t.length; e < o; ++e) {\n      if (!c(t[e])) throw new Error(\"Arr.flatten item \" + e + \" was not an array, input: \" + t);\n      xt.apply(n, t[e]);\n    }\n\n    return n;\n  }\n\n  function z(t, n) {\n    return ft(M(t, n));\n  }\n\n  function N(t, n) {\n    for (var e = 0, o = t.length; e < o; ++e) {\n      if (!0 !== n(t[e], e)) return !1;\n    }\n\n    return !0;\n  }\n\n  function L(t) {\n    var n = bt.call(t, 0);\n    return n.reverse(), n;\n  }\n\n  function W(t, n) {\n    return F(t, function (t) {\n      return !wt(n, t);\n    });\n  }\n\n  function U(t, n) {\n    for (var e = {}, o = 0, r = t.length; o < r; o++) {\n      var i = t[o];\n      e[String(i)] = n(i, o);\n    }\n\n    return e;\n  }\n\n  function j(t) {\n    return [t];\n  }\n\n  function G(t, n) {\n    var e = bt.call(t, 0);\n    return e.sort(n), e;\n  }\n\n  function X(t, n) {\n    return 0 <= n && n < t.length ? vt.some(t[n]) : vt.none();\n  }\n\n  function Y(t) {\n    return X(t, 0);\n  }\n\n  function q(t) {\n    return X(t, t.length - 1);\n  }\n\n  function K(t, n) {\n    for (var e = 0; e < t.length; e++) {\n      var o = n(t[e], e);\n      if (o.isSome()) return o;\n    }\n\n    return vt.none();\n  }\n\n  function J(t, n) {\n    for (var e = Ct(t), o = 0, r = e.length; o < r; o++) {\n      var i = e[o];\n      n(t[i], i);\n    }\n  }\n\n  function dt(t, e) {\n    return _t(t, function (t, n) {\n      return {\n        k: n,\n        v: e(t, n)\n      };\n    });\n  }\n\n  function $(t, e) {\n    var o = [];\n    return J(t, function (t, n) {\n      o.push(e(t, n));\n    }), o;\n  }\n\n  function Q(t, n) {\n    for (var e = Ct(t), o = 0, r = e.length; o < r; o++) {\n      var i = e[o],\n          u = t[i];\n      if (n(u, i, t)) return vt.some(u);\n    }\n\n    return vt.none();\n  }\n\n  function Z(t) {\n    return $(t, h);\n  }\n\n  function tt(t, n) {\n    return Tt(t, n) ? vt.from(t[n]) : vt.none();\n  }\n\n  function nt(t, n) {\n    return Tt(t, n) && void 0 !== t[n] && null !== t[n];\n  }\n\n  function mt(t, n, e) {\n    return void 0 === e && (e = v), t.exists(function (t) {\n      return e(t, n);\n    });\n  }\n\n  function et(t) {\n    for (var n = [], e = function e(t) {\n      n.push(t);\n    }, o = 0; o < t.length; o++) {\n      t[o].each(e);\n    }\n\n    return n;\n  }\n\n  function ot(t, n) {\n    return t ? vt.some(n) : vt.none();\n  }\n\n  function it(t, n, e) {\n    return \"\" === n || t.length >= n.length && t.substr(e, e + n.length) === n;\n  }\n\n  function ut(t, n) {\n    return -1 !== t.indexOf(n);\n  }\n\n  function at(t) {\n    return 0 < t.length;\n  }\n\n  function ct(t) {\n    return void 0 !== t.style && S(t.style.getPropertyValue);\n  }\n\n  function gt(t) {\n    if (null == t) throw new Error(\"Node cannot be null or undefined\");\n    return {\n      dom: t\n    };\n  }\n\n  var pt,\n      ht = function ht(e) {\n    function t() {\n      return r;\n    }\n\n    function n(t) {\n      return t(e);\n    }\n\n    var o = rt(e),\n        r = {\n      fold: function fold(t, n) {\n        return n(e);\n      },\n      isSome: D,\n      isNone: T,\n      getOr: o,\n      getOrThunk: o,\n      getOrDie: o,\n      getOrNull: o,\n      getOrUndefined: o,\n      or: t,\n      orThunk: t,\n      map: function map(t) {\n        return ht(t(e));\n      },\n      each: function each(t) {\n        t(e);\n      },\n      bind: n,\n      exists: n,\n      forall: n,\n      filter: function filter(t) {\n        return t(e) ? r : a;\n      },\n      toArray: function toArray() {\n        return [e];\n      },\n      toString: function toString() {\n        return \"some(\" + e + \")\";\n      }\n    };\n    return r;\n  },\n      vt = {\n    some: ht,\n    none: i,\n    from: function from(t) {\n      return null == t ? a : ht(t);\n    }\n  },\n      bt = Array.prototype.slice,\n      yt = Array.prototype.indexOf,\n      xt = Array.prototype.push,\n      wt = function wt(t, n) {\n    return -1 < l(t, n);\n  },\n      St = function St(t, n) {\n    for (var e = 0, o = t.length; e < o; e++) {\n      n(t[e], e);\n    }\n  },\n      kt = S(Array.from) ? Array.from : function (t) {\n    return bt.call(t);\n  },\n      Ct = Object.keys,\n      Ot = Object.hasOwnProperty,\n      _t = function _t(t, o) {\n    var r = {};\n    return J(t, function (t, n) {\n      var e = o(t, n);\n      r[e.k] = e.v;\n    }), r;\n  },\n      Tt = function Tt(t, n) {\n    return Ot.call(t, n);\n  },\n      Et = function Et(t, n, e) {\n    return t.isSome() && n.isSome() ? vt.some(e(t.getOrDie(), n.getOrDie())) : vt.none();\n  },\n      Dt = function Dt(t, n) {\n    return it(t, n, 0);\n  },\n      Bt = function Bt(t, n) {\n    return it(t, n, t.length - n.length);\n  },\n      Mt = (pt = /^\\s+|\\s+$/g, function (t) {\n    return t.replace(pt, \"\");\n  }),\n      At = {\n    fromHtml: function fromHtml(t, n) {\n      var e = (n || document).createElement(\"div\");\n      if (e.innerHTML = t, !e.hasChildNodes() || 1 < e.childNodes.length) throw console.error(\"HTML does not have a single root node\", t), new Error(\"HTML must have a single root node\");\n      return gt(e.childNodes[0]);\n    },\n    fromTag: function fromTag(t, n) {\n      var e = (n || document).createElement(t);\n      return gt(e);\n    },\n    fromText: function fromText(t, n) {\n      var e = (n || document).createTextNode(t);\n      return gt(e);\n    },\n    fromDom: gt,\n    fromPoint: function fromPoint(t, n, e) {\n      return vt.from(t.dom.elementFromPoint(n, e)).map(gt);\n    }\n  };\n\n  function Ft(t) {\n    return t.dom.nodeName.toLowerCase();\n  }\n\n  function It(n) {\n    return function (t) {\n      return t.dom.nodeType === n;\n    };\n  }\n\n  function Rt(e) {\n    var o,\n        r = !1;\n    return function () {\n      for (var t = [], n = 0; n < arguments.length; n++) {\n        t[n] = arguments[n];\n      }\n\n      return r || (r = !0, o = e.apply(null, t)), o;\n    };\n  }\n\n  function Vt(t, n) {\n    var e = String(n).toLowerCase();\n    return V(t, function (t) {\n      return t.search(e);\n    });\n  }\n\n  function Pt(n) {\n    return function (t) {\n      return ut(t, n);\n    };\n  }\n\n  function Ht(t) {\n    return window.matchMedia(t).matches;\n  }\n\n  function zt(t, n) {\n    var e = t.dom;\n    if (1 !== e.nodeType) return !1;\n    var o = e;\n    if (void 0 !== o.matches) return o.matches(n);\n    if (void 0 !== o.msMatchesSelector) return o.msMatchesSelector(n);\n    if (void 0 !== o.webkitMatchesSelector) return o.webkitMatchesSelector(n);\n    if (void 0 !== o.mozMatchesSelector) return o.mozMatchesSelector(n);\n    throw new Error(\"Browser lacks native selectors\");\n  }\n\n  function Nt(t) {\n    return 1 !== t.nodeType && 9 !== t.nodeType && 11 !== t.nodeType || 0 === t.childElementCount;\n  }\n\n  function Lt(t, n) {\n    return t.dom === n.dom;\n  }\n\n  function Wt(t, n) {\n    return le().browser.isIE() ? (e = t.dom, o = n.dom, r = Node.DOCUMENT_POSITION_CONTAINED_BY, 0 != (e.compareDocumentPosition(o) & r)) : (i = t.dom) !== (u = n.dom) && i.contains(u);\n    var e, o, r, i, u;\n  }\n\n  function Ut(t) {\n    return At.fromDom(t.dom.ownerDocument);\n  }\n\n  function jt(t) {\n    return qn(t) ? t : Ut(t);\n  }\n\n  function Gt(t) {\n    return At.fromDom(jt(t).dom.documentElement);\n  }\n\n  function Xt(t) {\n    return At.fromDom(jt(t).dom.defaultView);\n  }\n\n  function Yt(t) {\n    return vt.from(t.dom.parentNode).map(At.fromDom);\n  }\n\n  function qt(t) {\n    return vt.from(t.dom.offsetParent).map(At.fromDom);\n  }\n\n  function Kt(t) {\n    return M(t.dom.childNodes, At.fromDom);\n  }\n\n  function Jt(t, n) {\n    var e = t.dom.childNodes;\n    return vt.from(e[n]).map(At.fromDom);\n  }\n\n  function $t(t, n) {\n    return {\n      element: t,\n      offset: n\n    };\n  }\n\n  function Qt(t, n) {\n    var e = Kt(t);\n    return 0 < e.length && n < e.length ? $t(e[n], 0) : $t(t, n);\n  }\n\n  function Zt(t) {\n    return Kn(t) && k(t.dom.host);\n  }\n\n  function tn(t) {\n    return Zt(t) ? t : At.fromDom(jt(t).dom.body);\n  }\n\n  function nn(t) {\n    return At.fromDom(t.dom.host);\n  }\n\n  function en(t, n, e) {\n    if (!(y(e) || w(e) || u(e))) throw console.error(\"Invalid call to Attribute.set. Key \", n, \":: Value \", e, \":: Element \", t), new Error(\"Attribute value was not simple\");\n    t.setAttribute(n, e + \"\");\n  }\n\n  function on(t, n, e) {\n    en(t.dom, n, e);\n  }\n\n  function rn(t, n) {\n    var e = t.dom;\n    J(n, function (t, n) {\n      en(e, n, t);\n    });\n  }\n\n  function un(t, n) {\n    var e = t.dom.getAttribute(n);\n    return null === e ? void 0 : e;\n  }\n\n  function an(t, n) {\n    return vt.from(un(t, n));\n  }\n\n  function cn(t, n) {\n    var e = t.dom;\n    return !(!e || !e.hasAttribute) && e.hasAttribute(n);\n  }\n\n  function sn(t, n) {\n    t.dom.removeAttribute(n);\n  }\n\n  function ln(t, n, e) {\n    if (!y(e)) throw console.error(\"Invalid call to CSS.set. Property \", n, \":: Value \", e, \":: Element \", t), new Error(\"CSS value must be a string: \" + e);\n    ct(t) && t.style.setProperty(n, e);\n  }\n\n  function fn(t, n) {\n    ct(t) && t.style.removeProperty(n);\n  }\n\n  function dn(t, n, e) {\n    ln(t.dom, n, e);\n  }\n\n  function mn(t, n) {\n    var e = t.dom;\n    J(n, function (t, n) {\n      ln(e, n, t);\n    });\n  }\n\n  function gn(t, n) {\n    var e = t.dom;\n    J(n, function (t, n) {\n      t.fold(function () {\n        fn(e, n);\n      }, function (t) {\n        ln(e, n, t);\n      });\n    });\n  }\n\n  function pn(t, n) {\n    var e = t.dom,\n        o = window.getComputedStyle(e).getPropertyValue(n);\n    return \"\" !== o || ve(t) ? o : xe(e, n);\n  }\n\n  function hn(t, n) {\n    var e = t.dom,\n        o = xe(e, n);\n    return vt.from(o).filter(function (t) {\n      return 0 < t.length;\n    });\n  }\n\n  function vn(t, n, e) {\n    var o = At.fromTag(t);\n    return dn(o, n, e), hn(o, n).isSome();\n  }\n\n  function bn(t, n) {\n    fn(t.dom, n), mt(an(t, \"style\").map(Mt), \"\") && sn(t, \"style\");\n  }\n\n  function yn(t) {\n    return t.dom.offsetWidth;\n  }\n\n  function xn(o, r) {\n    function t(t) {\n      var n = r(t);\n\n      if (n <= 0 || null === n) {\n        var e = pn(t, o);\n        return parseFloat(e) || 0;\n      }\n\n      return n;\n    }\n\n    function i(r, t) {\n      return R(t, function (t, n) {\n        var e = pn(r, n),\n            o = void 0 === e ? 0 : parseInt(e, 10);\n        return isNaN(o) ? t : t + o;\n      }, 0);\n    }\n\n    return {\n      set: function set(t, n) {\n        if (!u(n) && !n.match(/^[0-9]+$/)) throw new Error(o + \".set accepts only positive integer values. Value was \" + n);\n        var e = t.dom;\n        ct(e) && (e.style[o] = n + \"px\");\n      },\n      get: t,\n      getOuter: t,\n      aggregate: i,\n      max: function max(t, n, e) {\n        var o = i(t, e);\n        return o < n ? n - o : 0;\n      }\n    };\n  }\n\n  function wn(t) {\n    return we.get(t);\n  }\n\n  function Sn(t) {\n    return we.getOuter(t);\n  }\n\n  function kn(t, n) {\n    return void 0 !== t ? t : void 0 !== n ? n : 0;\n  }\n\n  function Cn(t) {\n    var n = t.dom.ownerDocument,\n        e = n.body,\n        o = n.defaultView,\n        r = n.documentElement;\n    if (e === t.dom) return ke(e.offsetLeft, e.offsetTop);\n    var i = kn(null == o ? void 0 : o.pageYOffset, r.scrollTop),\n        u = kn(null == o ? void 0 : o.pageXOffset, r.scrollLeft),\n        a = kn(r.clientTop, e.clientTop),\n        c = kn(r.clientLeft, e.clientLeft);\n    return Ce(t).translate(u - c, i - a);\n  }\n\n  function On(t) {\n    return Oe.get(t);\n  }\n\n  function _n(t) {\n    return Oe.getOuter(t);\n  }\n\n  function Tn(t) {\n    function n() {\n      return t.stopPropagation();\n    }\n\n    function e() {\n      return t.preventDefault();\n    }\n\n    var o = r(e, n);\n    return {\n      target: At.fromDom(function (t) {\n        if (me() && k(t.target)) {\n          var n = At.fromDom(t.target);\n\n          if (Xn(n) && he(n) && t.composed && t.composedPath) {\n            var e = t.composedPath();\n            if (e) return Y(e);\n          }\n        }\n\n        return vt.from(t.target);\n      }(t).getOr(t.target)),\n      x: t.clientX,\n      y: t.clientY,\n      stop: n,\n      prevent: e,\n      kill: o,\n      raw: t\n    };\n  }\n\n  function En(t, n, e, o, r) {\n    var i,\n        u,\n        a = (i = e, u = o, function (t) {\n      i(t) && u(Tn(t));\n    });\n    return t.dom.addEventListener(n, a, r), {\n      unbind: C(_e, t, n, a, r)\n    };\n  }\n\n  function Dn(n, e) {\n    Yt(n).each(function (t) {\n      t.dom.insertBefore(e.dom, n.dom);\n    });\n  }\n\n  function Bn(t, n) {\n    vt.from(t.dom.nextSibling).map(At.fromDom).fold(function () {\n      Yt(t).each(function (t) {\n        Te(t, n);\n      });\n    }, function (t) {\n      Dn(t, n);\n    });\n  }\n\n  function Mn(n, e) {\n    Jt(n, 0).fold(function () {\n      Te(n, e);\n    }, function (t) {\n      n.dom.insertBefore(e.dom, t.dom);\n    });\n  }\n\n  function An(n, t) {\n    St(t, function (t) {\n      Te(n, t);\n    });\n  }\n\n  function Fn(t) {\n    t.dom.textContent = \"\", St(Kt(t), function (t) {\n      Ee(t);\n    });\n  }\n\n  function In(t) {\n    var n,\n        e = Kt(t);\n    0 < e.length && (n = t, St(e, function (t) {\n      Dn(n, t);\n    })), Ee(t);\n  }\n\n  function Rn(t) {\n    var n = void 0 !== t ? t.dom : document,\n        e = n.body.scrollLeft || n.documentElement.scrollLeft,\n        o = n.body.scrollTop || n.documentElement.scrollTop;\n    return ke(e, o);\n  }\n\n  function Vn(t, n, e) {\n    var o = (void 0 !== e ? e.dom : document).defaultView;\n    o && o.scrollTo(t, n);\n  }\n\n  function Pn(t, n, e, o) {\n    return {\n      x: t,\n      y: n,\n      width: e,\n      height: o,\n      right: t + e,\n      bottom: n + o\n    };\n  }\n\n  function Hn(t) {\n    var o = void 0 === t ? window : t,\n        n = o.document,\n        r = Rn(At.fromDom(n)),\n        e = void 0 === o ? window : o;\n    return (le().browser.isFirefox() ? vt.none() : vt.from(e.visualViewport)).fold(function () {\n      var t = o.document.documentElement,\n          n = t.clientWidth,\n          e = t.clientHeight;\n      return Pn(r.left, r.top, n, e);\n    }, function (t) {\n      return Pn(Math.max(t.pageLeft, r.left), Math.max(t.pageTop, r.top), t.width, t.height);\n    });\n  }\n\n  function zn(o) {\n    var t,\n        r = Rn(At.fromDom(document)),\n        n = (t = Be).owner(o),\n        e = De(t, n);\n    return vt.some(e).fold(C(Cn, o), function (t) {\n      var n = Ce(o),\n          e = I(t, function (t, n) {\n        var e = Ce(n);\n        return {\n          left: t.left + e.left,\n          top: t.top + e.top\n        };\n      }, {\n        left: 0,\n        top: 0\n      });\n      return ke(e.left + n.left + r.left, e.top + n.top + r.top);\n    });\n  }\n\n  function Nn(t) {\n    var n = zn(t),\n        e = _n(t),\n        o = Sn(t);\n\n    return Me(n.left, n.top, e, o);\n  }\n\n  \"undefined\" != typeof window || Function(\"return this;\")();\n\n  function Ln() {\n    return Jn(0, 0);\n  }\n\n  function Wn(t) {\n    function n(t) {\n      return function () {\n        return e === t;\n      };\n    }\n\n    var e = t.current,\n        o = t.version;\n    return {\n      current: e,\n      version: o,\n      isEdge: n(\"Edge\"),\n      isChrome: n(\"Chrome\"),\n      isIE: n(\"IE\"),\n      isOpera: n(\"Opera\"),\n      isFirefox: n(te),\n      isSafari: n(\"Safari\")\n    };\n  }\n\n  function Un(t) {\n    function n(t) {\n      return function () {\n        return e === t;\n      };\n    }\n\n    var e = t.current,\n        o = t.version;\n    return {\n      current: e,\n      version: o,\n      isWindows: n(oe),\n      isiOS: n(\"iOS\"),\n      isAndroid: n(re),\n      isOSX: n(\"OSX\"),\n      isLinux: n(\"Linux\"),\n      isSolaris: n(ie),\n      isFreeBSD: n(ue),\n      isChromeOS: n(ae)\n    };\n  }\n\n  var jn,\n      Gn,\n      Xn = It(1),\n      Yn = It(3),\n      qn = It(9),\n      Kn = It(11),\n      Jn = function Jn(t, n) {\n    return {\n      major: t,\n      minor: n\n    };\n  },\n      $n = {\n    nu: Jn,\n    detect: function detect(t, n) {\n      var e,\n          o,\n          r = String(n).toLowerCase();\n      return 0 === t.length ? Ln() : (o = function (t, n) {\n        for (var e = 0; e < t.length; e++) {\n          var o = t[e];\n          if (o.test(n)) return o;\n        }\n      }(t, e = r)) ? Jn(i(1), i(2)) : {\n        major: 0,\n        minor: 0\n      };\n\n      function i(t) {\n        return Number(e.replace(o, \"$\" + t));\n      }\n    },\n    unknown: Ln\n  },\n      Qn = /.*?version\\/\\ ?([0-9]+)\\.([0-9]+).*/,\n      Zn = {\n    browsers: rt([{\n      name: \"Edge\",\n      versionRegexes: [/.*?edge\\/ ?([0-9]+)\\.([0-9]+)$/],\n      search: function search(t) {\n        return ut(t, \"edge/\") && ut(t, \"chrome\") && ut(t, \"safari\") && ut(t, \"applewebkit\");\n      }\n    }, {\n      name: \"Chrome\",\n      brand: \"Chromium\",\n      versionRegexes: [/.*?chrome\\/([0-9]+)\\.([0-9]+).*/, Qn],\n      search: function search(t) {\n        return ut(t, \"chrome\") && !ut(t, \"chromeframe\");\n      }\n    }, {\n      name: \"IE\",\n      versionRegexes: [/.*?msie\\ ?([0-9]+)\\.([0-9]+).*/, /.*?rv:([0-9]+)\\.([0-9]+).*/],\n      search: function search(t) {\n        return ut(t, \"msie\") || ut(t, \"trident\");\n      }\n    }, {\n      name: \"Opera\",\n      versionRegexes: [Qn, /.*?opera\\/([0-9]+)\\.([0-9]+).*/],\n      search: Pt(\"opera\")\n    }, {\n      name: \"Firefox\",\n      versionRegexes: [/.*?firefox\\/\\ ?([0-9]+)\\.([0-9]+).*/],\n      search: Pt(\"firefox\")\n    }, {\n      name: \"Safari\",\n      versionRegexes: [Qn, /.*?cpu os ([0-9]+)_([0-9]+).*/],\n      search: function search(t) {\n        return (ut(t, \"safari\") || ut(t, \"mobile/\")) && ut(t, \"applewebkit\");\n      }\n    }]),\n    oses: rt([{\n      name: \"Windows\",\n      search: Pt(\"win\"),\n      versionRegexes: [/.*?windows\\ nt\\ ?([0-9]+)\\.([0-9]+).*/]\n    }, {\n      name: \"iOS\",\n      search: function search(t) {\n        return ut(t, \"iphone\") || ut(t, \"ipad\");\n      },\n      versionRegexes: [/.*?version\\/\\ ?([0-9]+)\\.([0-9]+).*/, /.*cpu os ([0-9]+)_([0-9]+).*/, /.*cpu iphone os ([0-9]+)_([0-9]+).*/]\n    }, {\n      name: \"Android\",\n      search: Pt(\"android\"),\n      versionRegexes: [/.*?android\\ ?([0-9]+)\\.([0-9]+).*/]\n    }, {\n      name: \"OSX\",\n      search: Pt(\"mac os x\"),\n      versionRegexes: [/.*?mac\\ os\\ x\\ ?([0-9]+)_([0-9]+).*/]\n    }, {\n      name: \"Linux\",\n      search: Pt(\"linux\"),\n      versionRegexes: []\n    }, {\n      name: \"Solaris\",\n      search: Pt(\"sunos\"),\n      versionRegexes: []\n    }, {\n      name: \"FreeBSD\",\n      search: Pt(\"freebsd\"),\n      versionRegexes: []\n    }, {\n      name: \"ChromeOS\",\n      search: Pt(\"cros\"),\n      versionRegexes: [/.*?chrome\\/([0-9]+)\\.([0-9]+).*/]\n    }])\n  },\n      te = \"Firefox\",\n      ne = function ne() {\n    return Wn({\n      current: void 0,\n      version: $n.unknown()\n    });\n  },\n      ee = Wn,\n      oe = (rt(\"Edge\"), rt(\"Chrome\"), rt(\"IE\"), rt(\"Opera\"), rt(te), rt(\"Safari\"), \"Windows\"),\n      re = \"Android\",\n      ie = \"Solaris\",\n      ue = \"FreeBSD\",\n      ae = \"ChromeOS\",\n      ce = function ce() {\n    return Un({\n      current: void 0,\n      version: $n.unknown()\n    });\n  },\n      se = Un,\n      le = (rt(oe), rt(\"iOS\"), rt(re), rt(\"Linux\"), rt(\"OSX\"), rt(ie), rt(ue), rt(ae), Rt(function () {\n    return t = navigator.userAgent, n = vt.from(navigator.userAgentData), e = Ht, p = Zn.browsers(), h = Zn.oses(), v = n.bind(function (t) {\n      return o = p, K(t.brands, function (n) {\n        var e = n.brand.toLowerCase();\n        return V(o, function (t) {\n          var n;\n          return e === (null === (n = t.brand) || void 0 === n ? void 0 : n.toLowerCase());\n        }).map(function (t) {\n          return {\n            current: t.name,\n            version: $n.nu(parseInt(n.version, 10), 0)\n          };\n        });\n      });\n      var o;\n    }).orThunk(function () {\n      return Vt(p, e = t).map(function (t) {\n        var n = $n.detect(t.versionRegexes, e);\n        return {\n          current: t.name,\n          version: n\n        };\n      });\n      var e;\n    }).fold(ne, ee), b = Vt(h, o = t).map(function (t) {\n      var n = $n.detect(t.versionRegexes, o);\n      return {\n        current: t.name,\n        version: n\n      };\n    }).fold(ce, se), {\n      browser: v,\n      os: b,\n      deviceType: (i = v, u = t, a = e, c = (r = b).isiOS() && !0 === /ipad/i.test(u), s = r.isiOS() && !c, f = (l = r.isiOS() || r.isAndroid()) || a(\"(pointer:coarse)\"), d = c || !s && l && a(\"(min-device-width:768px)\"), m = s || l && !d, g = i.isSafari() && r.isiOS() && !1 === /safari/i.test(u), {\n        isiPad: rt(c),\n        isiPhone: rt(s),\n        isTablet: rt(d),\n        isPhone: rt(m),\n        isTouch: rt(f),\n        isAndroid: r.isAndroid,\n        isiOS: r.isiOS,\n        isWebView: rt(g),\n        isDesktop: rt(!m && !d && !g)\n      })\n    };\n    var t, n, e, o, r, i, u, a, c, s, l, f, d, m, g, p, h, v, b;\n  })),\n      fe = Yt,\n      de = S(Element.prototype.attachShadow) && S(Node.prototype.getRootNode),\n      me = rt(de),\n      ge = de ? function (t) {\n    return At.fromDom(t.dom.getRootNode());\n  } : jt,\n      pe = function pe(t) {\n    var n = ge(t);\n    return Zt(n) ? vt.some(n) : vt.none();\n  },\n      he = function he(t) {\n    return k(t.dom.shadowRoot);\n  },\n      ve = function ve(t) {\n    var n = Yn(t) ? t.dom.parentNode : t.dom;\n    if (null == n || null === n.ownerDocument) return !1;\n    var e,\n        o,\n        r = n.ownerDocument;\n    return pe(At.fromDom(n)).fold(function () {\n      return r.body.contains(n);\n    }, (e = ve, o = nn, function (t) {\n      return e(o(t));\n    }));\n  },\n      be = function be() {\n    return ye(At.fromDom(document));\n  },\n      ye = function ye(t) {\n    var n = t.dom.body;\n    if (null == n) throw new Error(\"Body is not available yet\");\n    return At.fromDom(n);\n  },\n      xe = function xe(t, n) {\n    return ct(t) ? t.style.getPropertyValue(n) : \"\";\n  },\n      we = xn(\"height\", function (t) {\n    var n = t.dom;\n    return ve(t) ? n.getBoundingClientRect().height : n.offsetHeight;\n  }),\n      Se = function Se(e, o) {\n    return {\n      left: e,\n      top: o,\n      translate: function translate(t, n) {\n        return Se(e + t, o + n);\n      }\n    };\n  },\n      ke = Se,\n      Ce = function Ce(t) {\n    var n,\n        e = t.dom,\n        o = e.ownerDocument.body;\n    return o === e ? ke(o.offsetLeft, o.offsetTop) : ve(t) ? (n = e.getBoundingClientRect(), ke(n.left, n.top)) : ke(0, 0);\n  },\n      Oe = xn(\"width\", function (t) {\n    return t.dom.offsetWidth;\n  }),\n      _e = function _e(t, n, e, o) {\n    t.dom.removeEventListener(n, e, o);\n  },\n      Te = function Te(t, n) {\n    t.dom.appendChild(n.dom);\n  },\n      Ee = function Ee(t) {\n    var n = t.dom;\n    null !== n.parentNode && n.parentNode.removeChild(n);\n  },\n      De = function De(o, t) {\n    return o.view(t).fold(rt([]), function (t) {\n      var n = o.owner(t),\n          e = De(o, n);\n      return [t].concat(e);\n    });\n  },\n      Be = Object.freeze({\n    __proto__: null,\n    view: function view(t) {\n      var n;\n      return (t.dom === document ? vt.none() : vt.from(null === (n = t.dom.defaultView) || void 0 === n ? void 0 : n.frameElement)).map(At.fromDom);\n    },\n    owner: Ut\n  }),\n      Me = function Me(t, n, e, o) {\n    return {\n      x: t,\n      y: n,\n      width: e,\n      height: o,\n      right: t + e,\n      bottom: n + o\n    };\n  },\n      Ae = function Ae(t) {\n    var n = Cn(t),\n        e = _n(t),\n        o = Sn(t);\n\n    return Me(n.left, n.top, e, o);\n  },\n      Fe = function Fe() {\n    return Hn(window);\n  },\n      Ie = function Ie(e) {\n    return {\n      isValue: D,\n      isError: T,\n      getOr: rt(e),\n      getOrThunk: rt(e),\n      getOrDie: rt(e),\n      or: function or(t) {\n        return Ie(e);\n      },\n      orThunk: function orThunk(t) {\n        return Ie(e);\n      },\n      fold: function fold(t, n) {\n        return n(e);\n      },\n      map: function map(t) {\n        return Ie(t(e));\n      },\n      mapError: function mapError(t) {\n        return Ie(e);\n      },\n      each: function each(t) {\n        t(e);\n      },\n      bind: function bind(t) {\n        return t(e);\n      },\n      exists: function exists(t) {\n        return t(e);\n      },\n      forall: function forall(t) {\n        return t(e);\n      },\n      toOptional: function toOptional() {\n        return vt.some(e);\n      }\n    };\n  },\n      Re = function Re(e) {\n    return {\n      isValue: T,\n      isError: D,\n      getOr: h,\n      getOrThunk: function getOrThunk(t) {\n        return t();\n      },\n      getOrDie: function getOrDie() {\n        return _(String(e))();\n      },\n      or: h,\n      orThunk: function orThunk(t) {\n        return t();\n      },\n      fold: function fold(t, n) {\n        return t(e);\n      },\n      map: function map(t) {\n        return Re(e);\n      },\n      mapError: function mapError(t) {\n        return Re(t(e));\n      },\n      each: st,\n      bind: function bind(t) {\n        return Re(e);\n      },\n      exists: T,\n      forall: D,\n      toOptional: vt.none\n    };\n  },\n      Ve = {\n    value: Ie,\n    error: Re,\n    fromOption: function fromOption(t, n) {\n      return t.fold(function () {\n        return Re(n);\n      }, Ie);\n    }\n  };\n\n  function Pe(t, n, e) {\n    return t.stype === jn.Error ? n(t.serror) : e(t.svalue);\n  }\n\n  function He(t) {\n    return {\n      stype: jn.Value,\n      svalue: t\n    };\n  }\n\n  function ze(t) {\n    return {\n      stype: jn.Error,\n      serror: t\n    };\n  }\n\n  function Ne(t, n, e, o) {\n    return {\n      tag: \"field\",\n      key: t,\n      newKey: n,\n      presence: e,\n      prop: o\n    };\n  }\n\n  function Le(t, n, e) {\n    switch (t.tag) {\n      case \"field\":\n        return n(t.key, t.newKey, t.presence, t.prop);\n\n      case \"custom\":\n        return e(t.newKey, t.instantiator);\n    }\n  }\n\n  function We(u) {\n    return function () {\n      for (var t = [], n = 0; n < arguments.length; n++) {\n        t[n] = arguments[n];\n      }\n\n      if (0 === t.length) throw new Error(\"Can't merge zero objects\");\n\n      for (var e = {}, o = 0; o < t.length; o++) {\n        var r,\n            i = t[o];\n\n        for (r in i) {\n          Tt(i, r) && (e[r] = u(e[r], i[r]));\n        }\n      }\n\n      return e;\n    };\n  }\n\n  function Ue() {\n    return {\n      tag: \"required\",\n      process: {}\n    };\n  }\n\n  function je(t) {\n    return {\n      tag: \"defaultedThunk\",\n      process: t\n    };\n  }\n\n  function Ge(t) {\n    return je(rt(t));\n  }\n\n  function Xe() {\n    return {\n      tag: \"option\",\n      process: {}\n    };\n  }\n\n  function Ye(t) {\n    return {\n      tag: \"mergeWithThunk\",\n      process: t\n    };\n  }\n\n  function qe(t) {\n    return x(t) && 100 < Ct(t).length ? \" removed due to size\" : JSON.stringify(t, null, 2);\n  }\n\n  function Ke(t, n) {\n    return Lo([{\n      path: t,\n      getErrorInfo: n\n    }]);\n  }\n\n  function Je(e) {\n    return {\n      extract: function extract(n, t) {\n        return Uo(e(t), function (t) {\n          return Ke(n, rt(t));\n        });\n      },\n      toString: rt(\"val\")\n    };\n  }\n\n  function $e(t, n, e, o) {\n    return o(tt(t, n).getOrThunk(function () {\n      return e(t);\n    }));\n  }\n\n  function Qe(n, e, o, r, i) {\n    function u(t) {\n      return i.extract(e.concat([r]), t);\n    }\n\n    function t(t) {\n      return t.fold(function () {\n        return No(vt.none());\n      }, function (t) {\n        var n = i.extract(e.concat([r]), t);\n        return jo(n, vt.some);\n      });\n    }\n\n    var a, c, s, l, f, d;\n\n    switch (n.tag) {\n      case \"required\":\n        return s = e, d = u, tt(l = o, f = r).fold(function () {\n          return t = f, n = l, Ke(s, function () {\n            return 'Could not find valid *required* value for \"' + t + '\" in ' + qe(n);\n          });\n          var t, n;\n        }, d);\n\n      case \"defaultedThunk\":\n        return $e(o, r, n.process, u);\n\n      case \"option\":\n        return t(tt(o, r));\n\n      case \"defaultedOptionThunk\":\n        return c = n.process, t(tt(a = o, r).map(function (t) {\n          return !0 === t ? c(a) : t;\n        }));\n\n      case \"mergeWithThunk\":\n        return $e(o, r, rt({}), function (t) {\n          return u(Yo(n.process(o), t));\n        });\n    }\n  }\n\n  function Ze(e) {\n    return {\n      extract: function extract(t, n) {\n        return e().extract(t, n);\n      },\n      toString: function toString() {\n        return e().toString();\n      }\n    };\n  }\n\n  function to(t) {\n    var s = $o(t),\n        l = I(t, function (e, t) {\n      return Le(t, function (t) {\n        var n;\n        return Yo(e, ((n = {})[t] = !0, n));\n      }, rt(e));\n    }, {});\n    return {\n      extract: function extract(t, n) {\n        var e,\n            o,\n            r,\n            i,\n            u,\n            a,\n            c = F(w(n) ? [] : Ct((r = k, i = o = {}, u = function u(t, n) {\n          i[n] = t;\n        }, a = st, J(n, function (t, n) {\n          (r(t, n) ? u : a)(t, n);\n        }), o)), function (t) {\n          return !nt(l, t);\n        });\n        return 0 === c.length ? s.extract(t, n) : (e = c, Ke(t, function () {\n          return \"There are unsupported fields: [\" + e.join(\", \") + \"] specified\";\n        }));\n      },\n      toString: s.toString\n    };\n  }\n\n  function no(o) {\n    return {\n      extract: function extract(e, t) {\n        var n = M(t, function (t, n) {\n          return o.extract(e.concat([\"[\" + n + \"]\"]), t);\n        });\n        return Ko(n);\n      },\n      toString: function toString() {\n        return \"array(\" + o.toString() + \")\";\n      }\n    };\n  }\n\n  function eo(u) {\n    return {\n      extract: function extract(t, n) {\n        for (var e = [], o = 0, r = u; o < r.length; o++) {\n          var i = r[o].extract(t, n);\n          if (i.stype === jn.Value) return i;\n          e.push(i);\n        }\n\n        return Ko(e);\n      },\n      toString: function toString() {\n        return \"oneOf(\" + M(u, function (t) {\n          return t.toString();\n        }).join(\", \") + \")\";\n      }\n    };\n  }\n\n  function oo(e, o) {\n    return Je(function (t) {\n      var n = _typeof(t);\n\n      return e(t) ? No(t) : Lo(\"Expected type: \" + o + \" but got: \" + n);\n    });\n  }\n\n  function ro(n, a) {\n    return {\n      extract: function extract(i, u) {\n        return tt(u, n).fold(function () {\n          return t = n, Ke(i, function () {\n            return 'Choice schema did not contain choice key: \"' + t + '\"';\n          });\n          var t;\n        }, function (t) {\n          return e = i, n = u, tt(o = a, r = t).fold(function () {\n            return t = o, n = r, Ke(e, function () {\n              return 'The chosen schema: \"' + n + '\" did not exist in branches: ' + qe(t);\n            });\n            var t, n;\n          }, function (t) {\n            return t.extract(e.concat([\"branch: \" + r]), n);\n          });\n          var e, n, o, r;\n        });\n      },\n      toString: function toString() {\n        return \"chooseOn(\" + n + \"). Possible values: \" + Ct(a);\n      }\n    };\n  }\n\n  function io(n) {\n    return Je(function (t) {\n      return n(t).fold(Lo, No);\n    });\n  }\n\n  function uo(n, t) {\n    return r = function r(t) {\n      return n(t).fold(ze, He);\n    }, i = t, {\n      extract: function extract(e, o) {\n        var t = Ct(o),\n            n = no(Je(r)).extract(e, t);\n        return Wo(n, function (t) {\n          var n = M(t, function (t) {\n            return Ne(t, t, Ue(), i);\n          });\n          return $o(n).extract(e, o);\n        });\n      },\n      toString: function toString() {\n        return \"setOf(\" + i.toString() + \")\";\n      }\n    };\n    var r, i;\n  }\n\n  function ao(t, n, e) {\n    return zo((r = n.extract([t], o = e), Go(r, function (t) {\n      return {\n        input: o,\n        errors: t\n      };\n    })));\n    var o, r;\n  }\n\n  function co(t) {\n    return t.fold(function (t) {\n      throw new Error(ur(t));\n    }, h);\n  }\n\n  function so(t, n, e) {\n    return co(ao(t, n, e));\n  }\n\n  function lo(t, n) {\n    return ro(t, dt(n, $o));\n  }\n\n  function fo(n) {\n    return io(function (t) {\n      return wt(n, t) ? Ve.value(t) : Ve.error('Unsupported value: \"' + t + '\", choose one of \"' + n.join(\", \") + '\".');\n    });\n  }\n\n  function mo(t) {\n    return ar(t, t, Ue(), Zo());\n  }\n\n  function go(t, n) {\n    return ar(t, t, Ue(), n);\n  }\n\n  function po(t) {\n    return go(t, nr);\n  }\n\n  function ho(t, n) {\n    return ar(t, t, Ue(), fo(n));\n  }\n\n  function vo(t) {\n    return go(t, or);\n  }\n\n  function bo(t, n) {\n    return ar(t, t, Ue(), $o(n));\n  }\n\n  function yo(t, n) {\n    return ar(t, t, Ue(), Qo(n));\n  }\n\n  function xo(t, n) {\n    return ar(t, t, Ue(), no(n));\n  }\n\n  function wo(t) {\n    return ar(t, t, Xe(), Zo());\n  }\n\n  function So(t, n) {\n    return ar(t, t, Xe(), n);\n  }\n\n  function ko(t) {\n    return So(t, tr);\n  }\n\n  function Co(t) {\n    return So(t, nr);\n  }\n\n  function Oo(t) {\n    return So(t, or);\n  }\n\n  function _o(t, n) {\n    return So(t, no(n));\n  }\n\n  function To(t, n) {\n    return So(t, $o(n));\n  }\n\n  function Eo(t, n) {\n    return ar(t, t, Ge(n), Zo());\n  }\n\n  function Do(t, n, e) {\n    return ar(t, t, Ge(n), e);\n  }\n\n  function Bo(t, n) {\n    return Do(t, n, tr);\n  }\n\n  function Mo(t, n) {\n    return Do(t, n, nr);\n  }\n\n  function Ao(t, n, e) {\n    return Do(t, n, fo(e));\n  }\n\n  function Fo(t, n) {\n    return Do(t, n, er);\n  }\n\n  function Io(t, n) {\n    return Do(t, n, or);\n  }\n\n  function Ro(t, n, e) {\n    return Do(t, n, no(e));\n  }\n\n  function Vo(t, n, e) {\n    return Do(t, n, $o(e));\n  }\n\n  function Po(t) {\n    var n = t;\n    return {\n      get: function get() {\n        return n;\n      },\n      set: function set(t) {\n        n = t;\n      }\n    };\n  }\n\n  (Gn = jn = {})[Gn.Error = 0] = \"Error\", Gn[Gn.Value = 1] = \"Value\";\n\n  function Ho(u) {\n    if (!c(u)) throw new Error(\"cases must be an array\");\n    if (0 === u.length) throw new Error(\"there must be at least one case\");\n    var a = [],\n        e = {};\n    return St(u, function (t, o) {\n      var n = Ct(t);\n      if (1 !== n.length) throw new Error(\"one and only one name per case\");\n      var r = n[0],\n          i = t[r];\n      if (void 0 !== e[r]) throw new Error(\"duplicate key detected:\" + r);\n      if (\"cata\" === r) throw new Error(\"cannot have a case named cata (sorry)\");\n      if (!c(i)) throw new Error(\"case arguments must be an array\");\n      a.push(r), e[r] = function () {\n        for (var e = [], t = 0; t < arguments.length; t++) {\n          e[t] = arguments[t];\n        }\n\n        var n = e.length;\n        if (n !== i.length) throw new Error(\"Wrong number of arguments to case \" + r + \". Expected \" + i.length + \" (\" + i + \"), got \" + n);\n        return {\n          fold: function fold() {\n            for (var t = [], n = 0; n < arguments.length; n++) {\n              t[n] = arguments[n];\n            }\n\n            if (t.length !== u.length) throw new Error(\"Wrong number of arguments to fold. Expected \" + u.length + \", got \" + t.length);\n            return t[o].apply(null, e);\n          },\n          match: function match(t) {\n            var n = Ct(t);\n            if (a.length !== n.length) throw new Error(\"Wrong number of arguments to match. Expected: \" + a.join(\",\") + \"\\nActual: \" + n.join(\",\"));\n            if (!N(a, function (t) {\n              return wt(n, t);\n            })) throw new Error(\"Not all branches were specified when using match. Specified: \" + n.join(\", \") + \"\\nRequired: \" + a.join(\", \"));\n            return t[r].apply(null, e);\n          },\n          log: function log(t) {\n            console.log(t, {\n              constructors: a,\n              constructor: r,\n              params: e\n            });\n          }\n        };\n      };\n    }), e;\n  }\n\n  var zo = function zo(t) {\n    return Pe(t, Ve.error, Ve.value);\n  },\n      No = He,\n      Lo = ze,\n      Wo = function Wo(t, n) {\n    return t.stype === jn.Value ? n(t.svalue) : t;\n  },\n      Uo = function Uo(t, n) {\n    return t.stype === jn.Error ? n(t.serror) : t;\n  },\n      jo = function jo(t, n) {\n    return t.stype === jn.Value ? {\n      stype: jn.Value,\n      svalue: n(t.svalue)\n    } : t;\n  },\n      Go = function Go(t, n) {\n    return t.stype === jn.Error ? {\n      stype: jn.Error,\n      serror: n(t.serror)\n    } : t;\n  },\n      Xo = Pe,\n      Yo = We(function (t, n) {\n    return x(t) && x(n) ? Yo(t, n) : n;\n  }),\n      qo = We(function (t, n) {\n    return n;\n  }),\n      Ko = function Ko(t) {\n    var n,\n        e,\n        o = (n = [], e = [], St(t, function (t) {\n      Pe(t, function (t) {\n        return e.push(t);\n      }, function (t) {\n        return n.push(t);\n      });\n    }), {\n      values: n,\n      errors: e\n    });\n    return 0 < o.errors.length ? r(Lo, ft)(o.errors) : No(o.values);\n  },\n      Jo = Je(No),\n      $o = function $o(e) {\n    return {\n      extract: function extract(i, u) {\n        for (var a = {}, c = [], t = 0, n = e; t < n.length; t++) {\n          Le(n[t], function (t, n, e, o) {\n            var r = Qe(e, i, u, t, o);\n            Xo(r, function (t) {\n              c.push.apply(c, t);\n            }, function (t) {\n              a[n] = t;\n            });\n          }, function (t, n) {\n            a[t] = n(u);\n          });\n        }\n\n        return 0 < c.length ? Lo(c) : No(a);\n      },\n      toString: function toString() {\n        return \"obj{\\n\" + M(e, function (t) {\n          return Le(t, function (t, n, e, o) {\n            return t + \" -> \" + o.toString();\n          }, function (t, n) {\n            return \"state(\" + t + \")\";\n          });\n        }).join(\"\\n\") + \"}\";\n      }\n    };\n  },\n      Qo = r(no, $o),\n      Zo = rt(Jo),\n      tr = oo(u, \"number\"),\n      nr = oo(y, \"string\"),\n      er = oo(w, \"boolean\"),\n      or = oo(S, \"function\"),\n      rr = function rr(n) {\n    if (Object(n) !== n) return !0;\n\n    switch ({}.toString.call(n).slice(8, -1)) {\n      case \"Boolean\":\n      case \"Number\":\n      case \"String\":\n      case \"Date\":\n      case \"RegExp\":\n      case \"Blob\":\n      case \"FileList\":\n      case \"ImageData\":\n      case \"ImageBitmap\":\n      case \"ArrayBuffer\":\n        return !0;\n\n      case \"Array\":\n      case \"Object\":\n        return Object.keys(n).every(function (t) {\n          return rr(n[t]);\n        });\n\n      default:\n        return !1;\n    }\n  },\n      ir = Je(function (t) {\n    return rr(t) ? No(t) : Lo(\"Expected value to be acceptable for sending via postMessage\");\n  }),\n      ur = function ur(t) {\n    return \"Errors: \\n\" + M(10 < (n = t.errors).length ? n.slice(0, 10).concat([{\n      path: [],\n      getErrorInfo: rt(\"... (only showing first ten failures)\")\n    }]) : n, function (t) {\n      return \"Failed path: (\" + t.path.join(\" > \") + \")\\n\" + t.getErrorInfo();\n    }).join(\"\\n\") + \"\\n\\nInput object: \" + qe(t.input);\n    var n;\n  },\n      ar = Ne,\n      cr = function cr(t, n) {\n    return {\n      tag: \"custom\",\n      newKey: t,\n      instantiator: n\n    };\n  };\n\n  function sr(t, n) {\n    return (e = {})[t] = n, e;\n    var e;\n  }\n\n  function lr(t) {\n    return n = {}, St(t, function (t) {\n      n[t.key] = t.value;\n    }), n;\n    var n;\n  }\n\n  function fr(t) {\n    return S(t) ? t : T;\n  }\n\n  function dr(t, n, e) {\n    for (var o = t.dom, r = fr(e); o.parentNode;) {\n      var o = o.parentNode,\n          i = At.fromDom(o),\n          u = n(i);\n      if (u.isSome()) return u;\n      if (r(i)) break;\n    }\n\n    return vt.none();\n  }\n\n  function mr(t, n, e) {\n    var o = n(t),\n        r = fr(e);\n    return o.orThunk(function () {\n      return r(t) ? vt.none() : dr(t, n, r);\n    });\n  }\n\n  function gr(t, n) {\n    return Lt(t.element, n.event.target);\n  }\n\n  function pr(t) {\n    if (!nt(t, \"can\") && !nt(t, \"abort\") && !nt(t, \"run\")) throw new Error(\"EventHandler defined by: \" + JSON.stringify(t, null, 2) + \" does not have can, abort, or run!\");\n    return _lt(_lt({}, ai), t);\n  }\n\n  function hr(t) {\n    return rt(\"alloy.\" + t);\n  }\n\n  function vr(t, n) {\n    nu(t, t.element, n, {});\n  }\n\n  function br(t, n, e) {\n    nu(t, t.element, n, e);\n  }\n\n  function yr(t) {\n    vr(t, Ii());\n  }\n\n  function xr(t, n, e) {\n    nu(t, n, e, {});\n  }\n\n  function wr(t, n, e, o) {\n    t.getSystem().triggerEvent(e, n, o.event);\n  }\n\n  function Sr(t, n) {\n    return {\n      key: t,\n      value: pr({\n        abort: n\n      })\n    };\n  }\n\n  function kr(t) {\n    return {\n      key: t,\n      value: pr({\n        run: function run(t, n) {\n          n.event.prevent();\n        }\n      })\n    };\n  }\n\n  function Cr(t, n) {\n    return {\n      key: t,\n      value: pr({\n        run: n\n      })\n    };\n  }\n\n  function Or(t, e, o) {\n    return {\n      key: t,\n      value: pr({\n        run: function run(t, n) {\n          e.apply(void 0, [t, n].concat(o));\n        }\n      })\n    };\n  }\n\n  function _r(t) {\n    return function (e) {\n      return {\n        key: t,\n        value: pr({\n          run: function run(t, n) {\n            gr(t, n) && e(t, n);\n          }\n        })\n      };\n    };\n  }\n\n  function Tr(t, n, e) {\n    var o,\n        r = n.partUids[e];\n    return Cr(o = t, function (t, n) {\n      t.getSystem().getByUid(r).each(function (t) {\n        wr(t, t.element, o, n);\n      });\n    });\n  }\n\n  function Er(t, r) {\n    return Cr(t, function (n, t) {\n      var e = t.event,\n          o = n.getSystem().getByDom(e.target).getOrThunk(function () {\n        return mr(e.target, function (t) {\n          return n.getSystem().getByDom(t).toOptional();\n        }, T).getOr(n);\n      });\n      r(n, o, t);\n    });\n  }\n\n  function Dr(t) {\n    return Cr(t, function (t, n) {\n      n.cut();\n    });\n  }\n\n  function Br(t, n) {\n    return _r(t)(n);\n  }\n\n  function Mr(t) {\n    return t.dom.innerHTML;\n  }\n\n  function Ar(t, n) {\n    var e,\n        o,\n        r = Ut(t).dom,\n        i = At.fromDom(r.createDocumentFragment());\n    An(i, (e = n, (o = (r || document).createElement(\"div\")).innerHTML = e, Kt(At.fromDom(o)))), Fn(t), Te(t, i);\n  }\n\n  function Fr(t) {\n    if (Zt(t)) return \"#shadow-root\";\n    var n = At.fromDom(t.dom.cloneNode(!1)),\n        e = At.fromTag(\"div\"),\n        o = At.fromDom(n.dom.cloneNode(!0));\n    return Te(e, o), Mr(e);\n  }\n\n  function Ir(t) {\n    var n = new Date().getTime();\n    return t + \"_\" + Math.floor(1e9 * Math.random()) + ++su + String(n);\n  }\n\n  function Rr(t) {\n    var n = Xn(t) ? t.dom[mu] : null;\n    return vt.from(n);\n  }\n\n  function Vr(n) {\n    function e(t) {\n      return \"The component must be in a context to execute: \" + t + (n ? \"\\n\" + Fr(n().element) + \" is not in context.\" : \"\");\n    }\n\n    function t(t) {\n      return function () {\n        throw new Error(e(t));\n      };\n    }\n\n    function o(t) {\n      return function () {\n        console.warn(e(t));\n      };\n    }\n\n    return {\n      debugInfo: rt(\"fake\"),\n      triggerEvent: o(\"triggerEvent\"),\n      triggerFocus: o(\"triggerFocus\"),\n      triggerEscape: o(\"triggerEscape\"),\n      broadcast: o(\"broadcast\"),\n      broadcastOn: o(\"broadcastOn\"),\n      broadcastEvent: o(\"broadcastEvent\"),\n      build: t(\"build\"),\n      addToWorld: t(\"addToWorld\"),\n      removeFromWorld: t(\"removeFromWorld\"),\n      addToGui: t(\"addToGui\"),\n      removeFromGui: t(\"removeFromGui\"),\n      getByUid: t(\"getByUid\"),\n      getByDom: t(\"getByDom\"),\n      isConnected: T\n    };\n  }\n\n  function Pr(t, n) {\n    var e = t.toString(),\n        o = e.indexOf(\")\") + 1,\n        r = e.indexOf(\"(\"),\n        i = e.substring(r + 1, o - 1).split(/,\\s*/);\n    return t.toFunctionAnnotation = function () {\n      return {\n        name: n,\n        parameters: bu(i)\n      };\n    }, t;\n  }\n\n  function Hr(t) {\n    return sr(yu, t);\n  }\n\n  function zr(o) {\n    return t = function t(_t2) {\n      for (var n = [], e = 1; e < arguments.length; e++) {\n        n[e - 1] = arguments[e];\n      }\n\n      return o.apply(void 0, H([_t2.getApis(), _t2], n, !1));\n    }, e = (n = o.toString()).indexOf(\")\") + 1, r = n.indexOf(\"(\"), i = n.substring(r + 1, e - 1).split(/,\\s*/), t.toFunctionAnnotation = function () {\n      return {\n        name: \"OVERRIDE\",\n        parameters: bu(i.slice(1))\n      };\n    }, t;\n    var t, n, e, r, i;\n  }\n\n  function Nr(t, r) {\n    var i = {};\n    return J(t, function (t, o) {\n      J(t, function (t, n) {\n        var e = tt(i, n).getOr([]);\n        i[n] = e.concat([r(o, t)]);\n      });\n    }), i;\n  }\n\n  function Lr(t) {\n    return {\n      classes: E(t.classes) ? [] : t.classes,\n      attributes: E(t.attributes) ? {} : t.attributes,\n      styles: E(t.styles) ? {} : t.styles\n    };\n  }\n\n  function Wr(t) {\n    return t.cHandler;\n  }\n\n  function Ur(t, n) {\n    return {\n      name: t,\n      handler: n\n    };\n  }\n\n  function jr(t, n, e) {\n    var o = n[e];\n    return o ? function (u, t, a) {\n      try {\n        var n = G(t, function (t, n) {\n          var e = t.name,\n              o = n.name,\n              r = a.indexOf(e),\n              i = a.indexOf(o);\n          if (-1 === r) throw new Error(\"The ordering for \" + u + \" does not have an entry for \" + e + \".\\nOrder specified: \" + JSON.stringify(a, null, 2));\n          if (-1 === i) throw new Error(\"The ordering for \" + u + \" does not have an entry for \" + o + \".\\nOrder specified: \" + JSON.stringify(a, null, 2));\n          return r < i ? -1 : i < r ? 1 : 0;\n        });\n        return Ve.value(n);\n      } catch (t) {\n        return Ve.error([t]);\n      }\n    }(\"Event: \" + e, t, o).map(function (t) {\n      var e,\n          n,\n          o,\n          r,\n          i = M(t, function (t) {\n        return t.handler;\n      });\n      return {\n        can: function can() {\n          for (var e = [], t = 0; t < arguments.length; t++) {\n            e[t] = arguments[t];\n          }\n\n          return R(n, function (t, n) {\n            return t && n.can.apply(void 0, e);\n          }, !0);\n        },\n        abort: (o = n = e = i, r = function r(t) {\n          return t.abort;\n        }, function () {\n          for (var e = [], t = 0; t < arguments.length; t++) {\n            e[t] = arguments[t];\n          }\n\n          return R(o, function (t, n) {\n            return t || r(n).apply(void 0, e);\n          }, !1);\n        }),\n        run: function run() {\n          for (var n = [], t = 0; t < arguments.length; t++) {\n            n[t] = arguments[t];\n          }\n\n          St(e, function (t) {\n            t.run.apply(void 0, n);\n          });\n        }\n      };\n    }) : Ve.error([\"The event (\" + e + ') has more than one behaviour that listens to it.\\nWhen this occurs, you must specify an event ordering for the behaviours in your spec (e.g. [ \"listing\", \"toggling\" ]).\\nThe behaviours that can trigger it are: ' + JSON.stringify(M(t, function (t) {\n      return t.name;\n    }), null, 2)]);\n  }\n\n  function Gr(t, n) {\n    var e = un(t, n);\n    return void 0 === e || \"\" === e ? [] : e.split(\" \");\n  }\n\n  function Xr(t) {\n    return void 0 !== t.dom.classList;\n  }\n\n  function Yr(t, n) {\n    var e, o, r;\n    Xr(t) ? t.dom.classList.add(n) : (o = n, r = Gr(e = t, \"class\").concat([o]), on(e, \"class\", r.join(\" \")));\n  }\n\n  function qr(t, n) {\n    var e, o, r, i;\n    Xr(t) ? t.dom.classList.remove(n) : (r = n, 0 < (i = F(Gr(o = t, \"class\"), function (t) {\n      return t !== r;\n    })).length ? on(o, \"class\", i.join(\" \")) : sn(o, \"class\")), 0 === (Xr(e = t) ? e.dom.classList : Gr(e, \"class\")).length && sn(e, \"class\");\n  }\n\n  function Kr(t, n) {\n    return Xr(t) && t.dom.classList.contains(n);\n  }\n\n  function Jr(n, t) {\n    St(t, function (t) {\n      Yr(n, t);\n    });\n  }\n\n  function $r(n, t) {\n    St(t, function (t) {\n      qr(n, t);\n    });\n  }\n\n  function Qr(t) {\n    return t.dom.value;\n  }\n\n  function Zr(t, n) {\n    if (void 0 === n) throw new Error(\"Value.set was undefined\");\n    t.dom.value = n;\n  }\n\n  function ti(t) {\n    var e,\n        n,\n        o,\n        r,\n        i = (e = tt(t, \"behaviours\").getOr({}), z(Ct(e), function (t) {\n      var n = e[t];\n      return k(n) ? [n.me] : [];\n    }));\n    return n = t, r = M(o = i, function (t) {\n      return To(t.name(), [mo(\"config\"), Eo(\"state\", xu)]);\n    }), {\n      list: o,\n      data: dt(ao(\"component.behaviours\", $o(r), n.behaviours).fold(function (t) {\n        throw new Error(ur(t) + \"\\nComplete spec:\\n\" + JSON.stringify(n, null, 2));\n      }, h), function (t) {\n        return rt(t.map(function (t) {\n          return {\n            config: t.config,\n            state: t.state.init(t.config)\n          };\n        }));\n      })\n    };\n  }\n\n  function ni(t, n, e) {\n    var o,\n        r,\n        i = _lt(_lt({}, (o = t).dom), {\n      uid: o.uid,\n      domChildren: M(o.components, function (t) {\n        return t.element;\n      })\n    }),\n        u = t.domModification.fold(function () {\n      return Lr({});\n    }, Lr),\n        a = 0 < n.length ? function (n, t, e, o) {\n      var r = _lt({}, t);\n\n      function i(t) {\n        return I(t, function (t, n) {\n          return _lt(_lt({}, n.modification), t);\n        }, {});\n      }\n\n      St(e, function (t) {\n        r[t.name()] = t.exhibit(n, o);\n      });\n      var u = Nr(r, function (t, n) {\n        return {\n          name: t,\n          modification: n\n        };\n      });\n      return Lr({\n        classes: I(u.classes, function (t, n) {\n          return n.modification.concat(t);\n        }, []),\n        attributes: i(u.attributes),\n        styles: i(u.styles)\n      });\n    }(e, {\n      \"alloy.base.modification\": u\n    }, n, i) : u;\n\n    return _lt(_lt({}, r = i), {\n      attributes: _lt(_lt({}, r.attributes), a.attributes),\n      styles: _lt(_lt({}, r.styles), a.styles),\n      classes: r.classes.concat(a.classes)\n    });\n  }\n\n  function ei(t, n, e) {\n    var o,\n        r,\n        i,\n        u,\n        a,\n        c = {\n      \"alloy.base.behaviour\": t.events\n    },\n        s = t.eventOrder;\n    return r = e, i = n, o = Nr(_lt(_lt({}, c), (u = r, a = {}, St(i, function (t) {\n      a[t.name()] = t.handlers(u);\n    }), a)), Ur), Su(o, s).getOrDie();\n  }\n\n  function oi(t) {\n    var e,\n        n,\n        o,\n        r,\n        i,\n        u,\n        a,\n        c,\n        s,\n        l,\n        f = hu(t),\n        d = f.events,\n        m = B(f, [\"events\"]),\n        g = M(tt(m, \"components\").getOr([]), Tu),\n        p = _lt(_lt({}, m), {\n      events: _lt(_lt({}, cu), d),\n      components: g\n    });\n\n    return Ve.value((n = Po(vu), o = co(ao(\"custom.definition\", Cu, e = p)), r = ti(e), i = r.list, u = r.data, a = function (t) {\n      var n = At.fromTag(t.tag);\n      rn(n, t.attributes), Jr(n, t.classes), mn(n, t.styles), t.innerHtml.each(function (t) {\n        return Ar(n, t);\n      });\n      var e = t.domChildren;\n      return An(n, e), t.value.each(function (t) {\n        Zr(n, t);\n      }), t.uid, gu(n, t.uid), n;\n    }(ni(o, i, u)), c = ei(o, i, u), s = Po(o.components), l = {\n      uid: e.uid,\n      getSystem: n.get,\n      config: function config(t) {\n        var n = u;\n        return (S(n[t.name()]) ? n[t.name()] : function () {\n          throw new Error(\"Could not find \" + t.name() + \" in \" + JSON.stringify(e, null, 2));\n        })();\n      },\n      hasConfigured: function hasConfigured(t) {\n        return S(u[t.name()]);\n      },\n      spec: e,\n      readState: function readState(t) {\n        return u[t]().map(function (t) {\n          return t.state.readState();\n        }).getOr(\"not enabled\");\n      },\n      getApis: function getApis() {\n        return o.apis;\n      },\n      connect: function connect(t) {\n        n.set(t);\n      },\n      disconnect: function disconnect() {\n        n.set(Vr(h));\n      },\n      element: a,\n      syncComponents: function syncComponents() {\n        var t = z(Kt(a), function (t) {\n          return n.get().getByDom(t).fold(function () {\n            return [];\n          }, j);\n        });\n        s.set(t);\n      },\n      components: s.get,\n      events: c\n    }));\n\n    function h() {\n      return l;\n    }\n  }\n\n  function ri(t) {\n    var n = At.fromText(t);\n    return Ou({\n      element: n\n    });\n  }\n\n  Ho([{\n    bothErrors: [\"error1\", \"error2\"]\n  }, {\n    firstError: [\"error1\", \"value2\"]\n  }, {\n    secondError: [\"value1\", \"error2\"]\n  }, {\n    bothValues: [\"value1\", \"value2\"]\n  }]);\n\n  var ii,\n      ui,\n      ai = {\n    can: D,\n    abort: T,\n    run: st\n  },\n      ci = rt,\n      si = ci(\"touchstart\"),\n      li = ci(\"touchmove\"),\n      fi = ci(\"touchend\"),\n      di = ci(\"touchcancel\"),\n      mi = ci(\"mousedown\"),\n      gi = ci(\"mousemove\"),\n      pi = ci(\"mouseout\"),\n      hi = ci(\"mouseup\"),\n      vi = ci(\"mouseover\"),\n      bi = ci(\"focusin\"),\n      yi = ci(\"focusout\"),\n      xi = ci(\"keydown\"),\n      wi = ci(\"keyup\"),\n      Si = ci(\"input\"),\n      ki = ci(\"change\"),\n      Ci = ci(\"click\"),\n      Oi = ci(\"transitioncancel\"),\n      _i = ci(\"transitionend\"),\n      Ti = ci(\"transitionstart\"),\n      Ei = ci(\"selectstart\"),\n      Di = {\n    tap: hr(\"tap\")\n  },\n      Bi = hr(\"focus\"),\n      Mi = hr(\"blur.post\"),\n      Ai = hr(\"paste.post\"),\n      Fi = hr(\"receive\"),\n      Ii = hr(\"execute\"),\n      Ri = hr(\"focus.item\"),\n      Vi = Di.tap,\n      Pi = hr(\"longpress\"),\n      Hi = hr(\"sandbox.close\"),\n      zi = hr(\"typeahead.cancel\"),\n      Ni = hr(\"system.init\"),\n      Li = hr(\"system.touchmove\"),\n      Wi = hr(\"system.touchend\"),\n      Ui = hr(\"system.scroll\"),\n      ji = hr(\"system.resize\"),\n      Gi = hr(\"system.attached\"),\n      Xi = hr(\"system.detached\"),\n      Yi = hr(\"system.dismissRequested\"),\n      qi = hr(\"system.repositionRequested\"),\n      Ki = hr(\"focusmanager.shifted\"),\n      Ji = hr(\"slotcontainer.visibility\"),\n      $i = hr(\"change.tab\"),\n      Qi = hr(\"dismiss.tab\"),\n      Zi = hr(\"highlight\"),\n      tu = hr(\"dehighlight\"),\n      nu = function nu(t, n, e, o) {\n    var r = _lt({\n      target: n\n    }, o);\n\n    t.getSystem().triggerEvent(e, n, r);\n  },\n      eu = lr,\n      ou = _r(Gi()),\n      ru = _r(Xi()),\n      iu = _r(Ni()),\n      uu = (ii = Ii(), function (t) {\n    return Cr(ii, t);\n  }),\n      au = eu([{\n    key: Bi(),\n    value: pr({\n      can: function can(t, n) {\n        var e,\n            o = n.event,\n            r = o.originator,\n            i = o.target;\n        return !(Lt(e = r, t.element) && !Lt(e, i) && (console.warn(Bi() + \" did not get interpreted by the desired target. \\nOriginator: \" + Fr(r) + \"\\nTarget: \" + Fr(i) + \"\\nCheck the \" + Bi() + \" event handlers\"), 1));\n      }\n    })\n  }]),\n      cu = Object.freeze({\n    __proto__: null,\n    events: au\n  }),\n      su = 0,\n      lu = rt(\"alloy-id-\"),\n      fu = rt(\"data-alloy-id\"),\n      du = lu(),\n      mu = fu(),\n      gu = function gu(t, n) {\n    Object.defineProperty(t.dom, mu, {\n      value: n,\n      writable: !0\n    });\n  },\n      pu = Ir,\n      hu = h,\n      vu = Vr(),\n      bu = function bu(t) {\n    return M(t, function (t) {\n      return Bt(t, \"/*\") ? t.substring(0, t.length - \"/*\".length) : t;\n    });\n  },\n      yu = Ir(\"alloy-premade\"),\n      xu = {\n    init: function init() {\n      return wu({\n        readState: rt(\"No State required\")\n      });\n    }\n  },\n      wu = function wu(t) {\n    return t;\n  },\n      Su = function Su(t, a) {\n    var n,\n        e,\n        o,\n        r,\n        i,\n        u,\n        c = $(t, function (r, u) {\n      return (1 === r.length ? Ve.value(r[0].handler) : jr(r, a, u)).map(function (t) {\n        var n,\n            i,\n            e = (i = S(n = t) ? {\n          can: D,\n          abort: T,\n          run: n\n        } : n, function (t, n) {\n          for (var e = [], o = 2; o < arguments.length; o++) {\n            e[o - 2] = arguments[o];\n          }\n\n          var r = [t, n].concat(e);\n          i.abort.apply(void 0, r) ? n.stop() : i.can.apply(void 0, r) && i.run.apply(void 0, r);\n        }),\n            o = 1 < r.length ? F(a[u], function (n) {\n          return d(r, function (t) {\n            return t.name === n;\n          });\n        }).join(\" > \") : r[0].name;\n        return sr(u, {\n          handler: e,\n          purpose: o\n        });\n      });\n    });\n    return n = {}, e = [], o = [], St(c, function (t) {\n      t.fold(function (t) {\n        e.push(t);\n      }, function (t) {\n        o.push(t);\n      });\n    }), 0 < (u = {\n      errors: e,\n      values: o\n    }).errors.length ? Ve.error(ft(u.errors)) : (i = n, 0 === (r = u.values).length ? Ve.value(i) : Ve.value(Yo(i, qo.apply(void 0, r))));\n  },\n      ku = \"alloy.base.behaviour\",\n      Cu = $o([ar(\"dom\", \"dom\", Ue(), $o([mo(\"tag\"), Eo(\"styles\", {}), Eo(\"classes\", []), Eo(\"attributes\", {}), wo(\"value\"), wo(\"innerHtml\")])), mo(\"components\"), mo(\"uid\"), Eo(\"events\", {}), Eo(\"apis\", {}), ar(\"eventOrder\", \"eventOrder\", ((ui = {})[Ii()] = [\"disabling\", ku, \"toggling\", \"typeaheadevents\"], ui[Bi()] = [ku, \"focusing\", \"keying\"], ui[Ni()] = [ku, \"disabling\", \"toggling\", \"representing\"], ui[Si()] = [ku, \"representing\", \"streaming\", \"invalidating\"], ui[Xi()] = [ku, \"representing\", \"item-events\", \"tooltipping\"], ui[mi()] = [\"focusing\", ku, \"item-type-events\"], ui[si()] = [\"focusing\", ku, \"item-type-events\"], ui[vi()] = [\"item-type-events\", \"tooltipping\"], ui[Fi()] = [\"receiving\", \"reflecting\", \"tooltipping\"], Ye(rt(ui))), Zo()), wo(\"domModification\")]),\n      Ou = function Ou(t) {\n    var n = so(\"external.component\", to([mo(\"element\"), wo(\"uid\")]), t),\n        e = Po(Vr()),\n        o = n.uid.getOrThunk(function () {\n      return pu(\"external\");\n    });\n    gu(n.element, o);\n    var r = {\n      uid: o,\n      getSystem: e.get,\n      config: vt.none,\n      hasConfigured: T,\n      connect: function connect(t) {\n        e.set(t);\n      },\n      disconnect: function disconnect() {\n        e.set(Vr(function () {\n          return r;\n        }));\n      },\n      getApis: function getApis() {\n        return {};\n      },\n      element: n.element,\n      spec: t,\n      readState: rt(\"No state\"),\n      syncComponents: st,\n      components: rt([]),\n      events: {}\n    };\n    return Hr(r);\n  },\n      _u = pu,\n      Tu = function Tu(t) {\n    return tt(t, yu).getOrThunk(function () {\n      return oi(Tt(t, \"uid\") ? t : _lt({\n        uid: _u(\"\")\n      }, t)).getOrDie();\n    });\n  },\n      Eu = Hr;\n\n  function Du(t, n, e, o, r) {\n    return t(e, o) ? vt.some(e) : S(r) && r(e) ? vt.none() : n(e, o, r);\n  }\n\n  function Bu(t, n, e) {\n    for (var o = t.dom, r = S(e) ? e : T; o.parentNode;) {\n      var o = o.parentNode,\n          i = At.fromDom(o);\n      if (n(i)) return vt.some(i);\n      if (r(i)) break;\n    }\n\n    return vt.none();\n  }\n\n  function Mu(t, n, e) {\n    return Du(function (t, n) {\n      return n(t);\n    }, Bu, t, n, e);\n  }\n\n  function Au(t, n, e) {\n    return Mu(t, n, e).isSome();\n  }\n\n  function Fu(t, n, e) {\n    return Bu(t, function (t) {\n      return zt(t, n);\n    }, e);\n  }\n\n  function Iu(t, n) {\n    return e = n, Nt(o = void 0 === t ? document : t.dom) ? vt.none() : vt.from(o.querySelector(e)).map(At.fromDom);\n    var e, o;\n  }\n\n  function Ru(t, n, e) {\n    return Du(zt, Fu, t, n, e);\n  }\n\n  function Vu() {\n    var n = Ir(\"aria-owns\");\n    return {\n      id: n,\n      link: function link(t) {\n        on(t, \"aria-owns\", n);\n      },\n      unlink: function unlink(t) {\n        sn(t, \"aria-owns\");\n      }\n    };\n  }\n\n  var Pu,\n      Hu,\n      zu = function zu(n, t) {\n    return Au(t, function (t) {\n      return Lt(t, n.element);\n    }, T) || (e = n, Mu(t, function (t) {\n      if (!Xn(t)) return !1;\n      var n = un(t, \"id\");\n      return void 0 !== n && -1 < n.indexOf(\"aria-owns\");\n    }).bind(function (t) {\n      var n = un(t, \"id\");\n      return Iu(ge(t), '[aria-owns=\"' + n + '\"]');\n    }).exists(function (t) {\n      return zu(e, t);\n    }));\n    var e;\n  },\n      Nu = \"unknown\";\n\n  function Lu(n, t, e) {\n    var o, r, i, u;\n\n    switch (tt(Wu.get(), n).orThunk(function () {\n      return K(Ct(Wu.get()), function (t) {\n        return -1 < n.indexOf(t) ? vt.some(Wu.get()[t]) : vt.none();\n      });\n    }).getOr(Pu.NORMAL)) {\n      case Pu.NORMAL:\n        return e(ju());\n\n      case Pu.LOGGING:\n        var a = (o = n, r = t, i = [], u = new Date().getTime(), {\n          logEventCut: function logEventCut(t, n, e) {\n            i.push({\n              outcome: \"cut\",\n              target: n,\n              purpose: e\n            });\n          },\n          logEventStopped: function logEventStopped(t, n, e) {\n            i.push({\n              outcome: \"stopped\",\n              target: n,\n              purpose: e\n            });\n          },\n          logNoParent: function logNoParent(t, n, e) {\n            i.push({\n              outcome: \"no-parent\",\n              target: n,\n              purpose: e\n            });\n          },\n          logEventNoHandlers: function logEventNoHandlers(t, n) {\n            i.push({\n              outcome: \"no-handlers-left\",\n              target: n\n            });\n          },\n          logEventResponse: function logEventResponse(t, n, e) {\n            i.push({\n              outcome: \"response\",\n              purpose: e,\n              target: n\n            });\n          },\n          write: function write() {\n            var t = new Date().getTime();\n            wt([\"mousemove\", \"mouseover\", \"mouseout\", Ni()], o) || console.log(o, {\n              event: o,\n              time: t - u,\n              target: r.dom,\n              sequence: M(i, function (t) {\n                return wt([\"cut\", \"stopped\", \"response\"], t.outcome) ? \"{\" + t.purpose + \"} \" + t.outcome + \" at (\" + Fr(t.target) + \")\" : t.outcome;\n              })\n            });\n          }\n        }),\n            c = e(a);\n        return a.write(), c;\n\n      case Pu.STOP:\n        return !0;\n    }\n  }\n\n  (Hu = Pu = Pu || {})[Hu.STOP = 0] = \"STOP\", Hu[Hu.NORMAL = 1] = \"NORMAL\", Hu[Hu.LOGGING = 2] = \"LOGGING\";\n  var Wu = Po({}),\n      Uu = [\"alloy/data/Fields\", \"alloy/debugging/Debugging\"],\n      ju = rt({\n    logEventCut: st,\n    logEventStopped: st,\n    logNoParent: st,\n    logEventNoHandlers: st,\n    logEventResponse: st,\n    write: st\n  }),\n      Gu = rt([mo(\"menu\"), mo(\"selectedMenu\")]),\n      Xu = rt([mo(\"item\"), mo(\"selectedItem\")]);\n\n  function Yu() {\n    return bo(\"markers\", [mo(\"backgroundMenu\")].concat(Gu()).concat(Xu()));\n  }\n\n  function qu(t) {\n    return bo(\"markers\", M(t, mo));\n  }\n\n  function Ku(t, n, e) {\n    return void 0 !== (o = new Error()).stack && V(o.stack.split(\"\\n\"), function (n) {\n      return 0 < n.indexOf(\"alloy\") && !d(Uu, function (t) {\n        return -1 < n.indexOf(t);\n      });\n    }).getOr(Nu), ar(n, n, e, io(function (e) {\n      return Ve.value(function () {\n        for (var t = [], n = 0; n < arguments.length; n++) {\n          t[n] = arguments[n];\n        }\n\n        return e.apply(void 0, t);\n      });\n    }));\n    var o;\n  }\n\n  function Ju(t) {\n    return Ku(0, t, Ge(st));\n  }\n\n  function $u(t) {\n    return Ku(0, t, Ge(vt.none));\n  }\n\n  function Qu(t) {\n    return Ku(0, t, Ue());\n  }\n\n  function Zu(t) {\n    return Ku(0, t, Ue());\n  }\n\n  function ta(t, n) {\n    return cr(t, rt(n));\n  }\n\n  function na(t) {\n    return cr(t, h);\n  }\n\n  function ea(t, n, e, o, r, i, u, a) {\n    return {\n      x: t,\n      y: n,\n      bubble: e,\n      direction: o,\n      placement: r,\n      restriction: i,\n      label: u + \"-\" + r,\n      alwaysFit: a = void 0 !== a && a\n    };\n  }\n\n  function oa(t, n, e, o) {\n    var r = t + n;\n    return o < r ? e : r < e ? o : r;\n  }\n\n  function ra(e, n) {\n    return U([\"left\", \"right\", \"top\", \"bottom\"], function (t) {\n      return tt(n, t).map(function (n) {\n        return function (t) {\n          switch (n) {\n            case 1:\n              return t.x;\n\n            case 0:\n              return t.x + t.width;\n\n            case 2:\n              return t.y;\n\n            case 3:\n              return t.y + t.height;\n          }\n        }(e);\n      });\n    });\n  }\n\n  function ia(t, n) {\n    return t.x + t.width / 2 - n.width / 2;\n  }\n\n  function ua(t, n) {\n    return t.x + t.width - n.width;\n  }\n\n  function aa(t, n) {\n    return t.y - n.height;\n  }\n\n  function ca(t) {\n    return t.y + t.height;\n  }\n\n  function sa(t, n) {\n    return t.y + t.height / 2 - n.height / 2;\n  }\n\n  function la(t, n, e) {\n    return ea(t.x + t.width, sa(t, n), e.east(), Wa(), \"east\", ra(t, {\n      left: 0\n    }), Ga);\n  }\n\n  function fa(t, n, e) {\n    return ea(t.x - n.width, sa(t, n), e.west(), Ua(), \"west\", ra(t, {\n      right: 1\n    }), Ga);\n  }\n\n  function da() {\n    return [Xa, Ya, qa, Ka, $a, Ja, la, fa];\n  }\n\n  function ma() {\n    return [Ya, Xa, Ka, qa, $a, Ja, la, fa];\n  }\n\n  function ga() {\n    return [qa, Ka, Xa, Ya, Ja, $a];\n  }\n\n  function pa() {\n    return [Ka, qa, Ya, Xa, Ja, $a];\n  }\n\n  function ha() {\n    return [Xa, Ya, qa, Ka, $a, Ja];\n  }\n\n  function va() {\n    return [Ya, Xa, Ka, qa, $a, Ja];\n  }\n\n  function ba(e, o, r) {\n    return iu(function (t, n) {\n      r(t, e, o);\n    });\n  }\n\n  function ya(t) {\n    return {\n      key: t,\n      value: void 0\n    };\n  }\n\n  function xa(t) {\n    var n,\n        e,\n        o,\n        r,\n        i,\n        u,\n        a,\n        c,\n        s = so(\"Creating behaviour: \" + t.name, ec, t);\n    return n = s.fields, e = s.name, o = s.active, r = s.apis, i = s.extra, u = s.state, a = to(n), c = To(e, [So(\"config\", to(n))]), tc(a, c, e, o, r, i, u);\n  }\n\n  function wa(t) {\n    var n,\n        e = so(\"Creating behaviour: \" + t.name, oc, t),\n        o = lo(e.branchKey, e.branches),\n        r = e.name,\n        i = e.active,\n        u = e.apis,\n        a = e.extra,\n        c = e.state,\n        s = To(r, [So(\"config\", n = o)]);\n    return tc(n, s, r, i, u, a, c);\n  }\n\n  function Sa() {\n    return At.fromDom(document);\n  }\n\n  function ka(t) {\n    return t.dom.focus();\n  }\n\n  function Ca(t) {\n    var n = ge(t).dom;\n    return t.dom === n.activeElement;\n  }\n\n  function Oa(t) {\n    return void 0 === t && (t = Sa()), vt.from(t.dom.activeElement).map(At.fromDom);\n  }\n\n  function _a(n) {\n    return Oa(ge(n)).filter(function (t) {\n      return n.dom.contains(t.dom);\n    });\n  }\n\n  function Ta(t, e) {\n    var o = ge(e),\n        n = Oa(o).bind(function (n) {\n      function t(t) {\n        return Lt(n, t);\n      }\n\n      var r, _i2;\n\n      return t(e) ? vt.some(e) : (r = t, (_i2 = function i(t) {\n        for (var n = 0; n < t.childNodes.length; n++) {\n          var e = At.fromDom(t.childNodes[n]);\n          if (r(e)) return vt.some(e);\n\n          var o = _i2(t.childNodes[n]);\n\n          if (o.isSome()) return o;\n        }\n\n        return vt.none();\n      })(e.dom));\n    }),\n        r = t(e);\n    return n.each(function (n) {\n      Oa(o).filter(function (t) {\n        return Lt(t, n);\n      }).fold(function () {\n        ka(n);\n      }, st);\n    }), r;\n  }\n\n  function Ea(t, n, e, o, r) {\n    function i(t) {\n      return t + \"px\";\n    }\n\n    return {\n      position: t,\n      left: n.map(i),\n      top: e.map(i),\n      right: o.map(i),\n      bottom: r.map(i)\n    };\n  }\n\n  function Da(t, n) {\n    var e;\n    gn(t, _lt(_lt({}, e = n), {\n      position: vt.some(e.position)\n    }));\n  }\n\n  function Ba(t, n, e, o, r, i) {\n    var u = n.rect,\n        a = u.x - e,\n        c = u.y - o,\n        s = r - (a + u.width),\n        l = i - (c + u.height),\n        f = vt.some(a),\n        d = vt.some(c),\n        m = vt.some(s),\n        g = vt.some(l),\n        p = vt.none();\n    return n.direction.fold(function () {\n      return Ea(t, f, d, p, p);\n    }, function () {\n      return Ea(t, p, d, m, p);\n    }, function () {\n      return Ea(t, f, p, p, g);\n    }, function () {\n      return Ea(t, p, p, m, g);\n    }, function () {\n      return Ea(t, f, d, p, p);\n    }, function () {\n      return Ea(t, f, p, p, g);\n    }, function () {\n      return Ea(t, f, d, p, p);\n    }, function () {\n      return Ea(t, p, d, m, p);\n    });\n  }\n\n  function Ma(t, r) {\n    return t.fold(function () {\n      var t = r.rect;\n      return Ea(\"absolute\", vt.some(t.x), vt.some(t.y), vt.none(), vt.none());\n    }, function (t, n, e, o) {\n      return Ba(\"absolute\", r, t, n, e, o);\n    }, function (t, n, e, o) {\n      return Ba(\"fixed\", r, t, n, e, o);\n    });\n  }\n\n  function Aa(t, n) {\n    var e = C(zn, n),\n        o = t.fold(e, e, function () {\n      var t = Rn();\n      return zn(n).translate(-t.left, -t.top);\n    }),\n        r = _n(n),\n        i = Sn(n);\n\n    return Me(o.left, o.top, r, i);\n  }\n\n  rt($o(Xu().concat(Gu())));\n\n  var Fa = rt($o(Xu())),\n      Ia = rt(bo(\"initSize\", [mo(\"numColumns\"), mo(\"numRows\")])),\n      Ra = Ho([{\n    southeast: []\n  }, {\n    southwest: []\n  }, {\n    northeast: []\n  }, {\n    northwest: []\n  }, {\n    south: []\n  }, {\n    north: []\n  }, {\n    east: []\n  }, {\n    west: []\n  }]),\n      Va = Ra.southeast,\n      Pa = Ra.southwest,\n      Ha = Ra.northeast,\n      za = Ra.northwest,\n      Na = Ra.south,\n      La = Ra.north,\n      Wa = Ra.east,\n      Ua = Ra.west,\n      ja = function ja(t, n, e) {\n    return Math.min(Math.max(t, n), e);\n  },\n      Ga = \"layout\",\n      Xa = function Xa(t, n, e) {\n    return ea(t.x, ca(t), e.southeast(), Va(), \"southeast\", ra(t, {\n      left: 1,\n      top: 3\n    }), Ga);\n  },\n      Ya = function Ya(t, n, e) {\n    return ea(ua(t, n), ca(t), e.southwest(), Pa(), \"southwest\", ra(t, {\n      right: 0,\n      top: 3\n    }), Ga);\n  },\n      qa = function qa(t, n, e) {\n    return ea(t.x, aa(t, n), e.northeast(), Ha(), \"northeast\", ra(t, {\n      left: 1,\n      bottom: 2\n    }), Ga);\n  },\n      Ka = function Ka(t, n, e) {\n    return ea(ua(t, n), aa(t, n), e.northwest(), za(), \"northwest\", ra(t, {\n      right: 0,\n      bottom: 2\n    }), Ga);\n  },\n      Ja = function Ja(t, n, e) {\n    return ea(ia(t, n), aa(t, n), e.north(), La(), \"north\", ra(t, {\n      bottom: 2\n    }), Ga);\n  },\n      $a = function $a(t, n, e) {\n    return ea(ia(t, n), ca(t), e.south(), Na(), \"south\", ra(t, {\n      top: 3\n    }), Ga);\n  },\n      Qa = Object.freeze({\n    __proto__: null,\n    events: function events(a) {\n      return eu([Cr(Fi(), function (r, t) {\n        var n,\n            i = a.channels,\n            e = Ct(i),\n            u = t,\n            o = (n = u).universal ? e : F(e, function (t) {\n          return wt(n.channels, t);\n        });\n        St(o, function (t) {\n          var n = i[t],\n              e = n.schema,\n              o = so(\"channel[\" + t + \"] data\\nReceiver: \" + Fr(r.element), e, u.data);\n          n.onReceive(r, o);\n        });\n      })]);\n    }\n  }),\n      Za = [go(\"channels\", uo(Ve.value, to([Qu(\"onReceive\"), Eo(\"schema\", Zo())])))],\n      tc = function tc(e, t, f, n, o, r, i) {\n    function u(t) {\n      return nt(t, f) ? t[f]() : vt.none();\n    }\n\n    var a = dt(o, function (t, n) {\n      return r = f, e = function e(_e2) {\n        for (var t = [], n = 1; n < arguments.length; n++) {\n          t[n - 1] = arguments[n];\n        }\n\n        var o = [_e2].concat(t);\n        return _e2.config({\n          name: rt(r)\n        }).fold(function () {\n          throw new Error(\"We could not find any behaviour configuration for: \" + r + \". Using API: \" + u);\n        }, function (t) {\n          var n = Array.prototype.slice.call(o, 1);\n          return i.apply(void 0, [_e2, t.config, t.state].concat(n));\n        });\n      }, o = u = n, a = (i = t).toString(), c = a.indexOf(\")\") + 1, s = a.indexOf(\"(\"), l = a.substring(s + 1, c - 1).split(/,\\s*/), e.toFunctionAnnotation = function () {\n        return {\n          name: o,\n          parameters: bu(l.slice(0, 1).concat(l.slice(3)))\n        };\n      }, e;\n      var r, i, u, e, o, a, c, s, l;\n    }),\n        c = dt(r, Pr),\n        s = _lt(_lt(_lt({}, c), a), {\n      revoke: C(ya, f),\n      config: function config(t) {\n        var n = so(f + \"-config\", e, t);\n        return {\n          key: f,\n          value: {\n            config: n,\n            me: s,\n            configAsRaw: Rt(function () {\n              return so(f + \"-config\", e, t);\n            }),\n            initialConfig: t,\n            state: i\n          }\n        };\n      },\n      schema: rt(t),\n      exhibit: function exhibit(t, e) {\n        return Et(u(t), tt(n, \"exhibit\"), function (t, n) {\n          return n(e, t.config, t.state);\n        }).getOrThunk(function () {\n          return Lr({});\n        });\n      },\n      name: rt(f),\n      handlers: function handlers(t) {\n        return u(t).map(function (t) {\n          return tt(n, \"events\").getOr(function () {\n            return {};\n          })(t.config, t.state);\n        }).getOr({});\n      }\n    });\n\n    return s;\n  },\n      nc = lr,\n      ec = to([mo(\"fields\"), mo(\"name\"), Eo(\"active\", {}), Eo(\"apis\", {}), Eo(\"state\", xu), Eo(\"extra\", {})]),\n      oc = to([mo(\"branchKey\"), mo(\"branches\"), mo(\"name\"), Eo(\"active\", {}), Eo(\"apis\", {}), Eo(\"state\", xu), Eo(\"extra\", {})]),\n      rc = rt(void 0),\n      ic = xa({\n    fields: Za,\n    name: \"receiving\",\n    active: Qa\n  }),\n      uc = Object.freeze({\n    __proto__: null,\n    exhibit: function exhibit(t, n) {\n      return Lr({\n        classes: [],\n        styles: n.useFixed() ? {} : {\n          position: \"relative\"\n        }\n      });\n    }\n  }),\n      ac = Ho([{\n    none: []\n  }, {\n    relative: [\"x\", \"y\", \"width\", \"height\"]\n  }, {\n    fixed: [\"x\", \"y\", \"width\", \"height\"]\n  }]),\n      cc = function cc(t, n, e) {\n    var o = ke(n, e);\n    return t.fold(rt(o), rt(o), function () {\n      var t = Rn();\n      return o.translate(-t.left, -t.top);\n    });\n  };\n\n  function sc(t) {\n    return an(t, Dc);\n  }\n\n  function lc(t, n, e, o) {\n    var r,\n        i,\n        u,\n        a,\n        c,\n        s,\n        l,\n        f,\n        d,\n        m,\n        g,\n        p,\n        h,\n        v,\n        b,\n        y,\n        x,\n        w,\n        S,\n        k,\n        C,\n        O,\n        _,\n        T,\n        E,\n        D,\n        B,\n        M,\n        A,\n        F,\n        I,\n        R,\n        V,\n        P,\n        H,\n        z,\n        N,\n        L,\n        W,\n        U = t.bubble,\n        j = U.offset,\n        G = (V = o, P = t.restriction, H = j, z = ot(\"left\", V.x), N = ot(\"top\", V.y), L = ot(\"right\", V.right), W = ot(\"bottom\", V.bottom), Me(z, N, L - z, W - N)),\n        X = t.x + j.left,\n        Y = t.y + j.top,\n        q = Me(X, Y, n, e),\n        K = (r = G.x, i = G.y, u = G.right, a = G.bottom, c = q.x, s = q.y, l = q.right, f = q.bottom, d = q.width, m = q.height, {\n      originInBounds: r <= c && c <= u && i <= s && s <= a,\n      sizeInBounds: l <= u && r <= l && f <= a && i <= f,\n      visibleW: Math.min(d, r <= c ? u - c : l - r),\n      visibleH: Math.min(m, i <= s ? a - s : f - i)\n    }),\n        J = K.visibleW,\n        $ = K.visibleH,\n        Q = K.originInBounds && K.sizeInBounds,\n        Z = Q ? q : (g = G.x, p = G.y, h = G.right, v = G.bottom, b = q.x, y = q.y, x = q.width, w = q.height, S = Math.max(g, h - x), k = Math.max(p, v - w), C = ja(b, g, S), O = ja(y, p, k), _ = Math.min(C + x, h) - C, T = Math.min(O + w, v) - O, Me(C, O, _, T)),\n        tt = 0 < Z.width && 0 < Z.height,\n        nt = (E = t.direction, M = rt((D = Z).bottom - (B = o).y), A = rt(B.bottom - D.y), F = E.fold(A, A, M, M, A, M, A, A), I = rt(D.right - B.x), R = rt(B.right - D.x), {\n      maxWidth: E.fold(R, I, R, I, R, R, R, I),\n      maxHeight: F\n    }),\n        et = {\n      rect: Z,\n      maxHeight: nt.maxHeight,\n      maxWidth: nt.maxWidth,\n      direction: t.direction,\n      placement: t.placement,\n      classes: {\n        on: U.classesOn,\n        off: U.classesOff\n      },\n      layout: t.label,\n      testY: Y\n    };\n\n    function ot(r, i) {\n      return P[r].map(function (t) {\n        var n = \"top\" === r || \"bottom\" === r,\n            e = n ? H.top : H.left,\n            o = (\"left\" === r || \"top\" === r ? Math.max : Math.min)(t, i) + e;\n        return n ? ja(o, V.y, V.bottom) : ja(o, V.x, V.right);\n      }).getOr(i);\n    }\n\n    return Q || t.alwaysFit ? Bc.fit(et) : Bc.nofit(et, J, $, tt);\n  }\n\n  function fc(t) {\n    function n() {\n      return e.get().each(t);\n    }\n\n    var e = Po(vt.none());\n    return {\n      clear: function clear() {\n        n(), e.set(vt.none());\n      },\n      isSet: function isSet() {\n        return e.get().isSome();\n      },\n      get: function get() {\n        return e.get();\n      },\n      set: function set(t) {\n        n(), e.set(vt.some(t));\n      }\n    };\n  }\n\n  function dc() {\n    return fc(function (t) {\n      return t.destroy();\n    });\n  }\n\n  function mc() {\n    return fc(function (t) {\n      return t.unbind();\n    });\n  }\n\n  function gc() {\n    var n = fc(st);\n    return _lt(_lt({}, n), {\n      on: function on(t) {\n        return n.get().each(t);\n      }\n    });\n  }\n\n  function pc(t, n, e) {\n    return En(t, n, Mc, e, !1);\n  }\n\n  function hc(t, n, e) {\n    return En(t, n, Mc, e, !0);\n  }\n\n  function vc(o, e) {\n    function r(t) {\n      var n,\n          e = null !== (n = t.raw.pseudoElement) && void 0 !== n ? n : \"\";\n      return Lt(t.target, o) && !at(e) && wt(Fc, t.raw.propertyName);\n    }\n\n    function t(t) {\n      var n;\n      (g(t) || r(t)) && (a.clear(), c.clear(), !g(n = null == t ? void 0 : t.raw.type) && n !== _i() || (clearTimeout(i), sn(o, Ic), $r(o, e.classes)));\n    }\n\n    function n() {\n      a.set(pc(o, _i(), t)), c.set(pc(o, Oi(), t));\n    }\n\n    var i,\n        u,\n        a = mc(),\n        c = mc();\n    \"ontransitionstart\" in o.dom ? u = pc(o, Ti(), function (t) {\n      r(t) && (u.unbind(), n());\n    }) : n();\n    var s,\n        l,\n        f = (s = o, l = d(\"transition-delay\"), R(d(\"transition-duration\"), function (t, n, e) {\n      var o = m(l[e]) + m(n);\n      return Math.max(t, o);\n    }, 0));\n\n    function d(t) {\n      var n = pn(s, t);\n      return F(y(n) ? n.split(/\\s*,\\s*/) : [], at);\n    }\n\n    function m(t) {\n      if (y(t) && /^[\\d.]+/.test(t)) {\n        var n = parseFloat(t);\n        return Bt(t, \"ms\") ? n : 1e3 * n;\n      }\n\n      return 0;\n    }\n\n    requestAnimationFrame(function () {\n      i = setTimeout(t, f + 17), on(o, Ic, i);\n    });\n  }\n\n  function bc(t, n, e, o, r, i) {\n    var u,\n        a,\n        c,\n        s,\n        l,\n        f,\n        d,\n        m,\n        g,\n        p = (u = o, a = r, i.exists(function (t) {\n      var n = u.mode;\n      return \"all\" === n || t[n] !== a[n];\n    }));\n\n    function h(t) {\n      return parseFloat(t).toFixed(3);\n    }\n\n    p || (g = t, N(o.classes, function (t) {\n      return Kr(g, t);\n    })) ? (dn(t, \"position\", e.position), c = Aa(n, t), s = Ma(n, _lt(_lt({}, r), {\n      rect: c\n    })), l = U(Fc, function (t) {\n      return s[t];\n    }), m = e, Q(l, function (t, n) {\n      var e,\n          o,\n          r,\n          i = m[n].map(h),\n          u = t.map(h);\n      return !Et(e = i, o = u, r = void 0 === r ? v : r).getOr(e.isNone() && o.isNone());\n    }).isSome() && (gn(t, l), p && (Jr(f = t, (d = o).classes), an(f, Ic).each(function (t) {\n      clearTimeout(parseInt(t, 10)), sn(f, Ic);\n    }), vc(f, d)), yn(t))) : $r(t, o.classes);\n  }\n\n  function yc(t, n, e, o) {\n    bn(n, \"max-height\"), bn(n, \"max-width\");\n    var r,\n        s,\n        i,\n        l,\n        f,\n        d,\n        m,\n        g,\n        p,\n        u = {\n      width: _n(r = n),\n      height: Sn(r)\n    };\n    return s = n, i = o.preference, l = t, f = u, d = e, m = o.bounds, g = f.width, p = f.height, R(i, function (t, n) {\n      var e = C(a, n);\n      return t.fold(rt(t), e);\n    }, Bc.nofit({\n      rect: l,\n      maxHeight: f.height,\n      maxWidth: f.width,\n      direction: Va(),\n      placement: \"southeast\",\n      classes: {\n        on: [],\n        off: []\n      },\n      layout: \"none\",\n      testY: l.y\n    }, -1, -1, !1)).fold(h, h);\n\n    function a(t, r, i, u, a) {\n      var c = lc(t(l, f, d, s, m), g, p, m);\n      return c.fold(rt(c), function (t, n, e, o) {\n        return (a === o ? u < e || i < n : !a && o) ? c : Bc.nofit(r, i, u, a);\n      });\n    }\n  }\n\n  function xc(t, n) {\n    var e = t,\n        o = Math.floor(n);\n    dn(e, \"max-height\", we.max(e, o, [\"margin-top\", \"border-top-width\", \"padding-top\", \"padding-bottom\", \"border-bottom-width\", \"margin-bottom\"]) + \"px\");\n  }\n\n  function wc(t, n, e) {\n    return void 0 === t[n] ? e : t[n];\n  }\n\n  function Sc(t, n, e, o) {\n    function r(t) {\n      return tt(e, t).getOr([]);\n    }\n\n    function i(t, n, e) {\n      var o = W(Hc, e);\n      return {\n        offset: ke(t, n),\n        classesOn: z(e, r),\n        classesOff: z(o, r)\n      };\n    }\n\n    var u = t * (o = void 0 === o ? 1 : o),\n        a = n * o;\n    return {\n      southeast: function southeast() {\n        return i(-t, n, [\"top\", \"alignLeft\"]);\n      },\n      southwest: function southwest() {\n        return i(t, n, [\"top\", \"alignRight\"]);\n      },\n      south: function south() {\n        return i(-t / 2, n, [\"top\", \"alignCentre\"]);\n      },\n      northeast: function northeast() {\n        return i(-t, -n, [\"bottom\", \"alignLeft\"]);\n      },\n      northwest: function northwest() {\n        return i(t, -n, [\"bottom\", \"alignRight\"]);\n      },\n      north: function north() {\n        return i(-t / 2, -n, [\"bottom\", \"alignCentre\"]);\n      },\n      east: function east() {\n        return i(t, -n / 2, [\"valignCentre\", \"left\"]);\n      },\n      west: function west() {\n        return i(-t, -n / 2, [\"valignCentre\", \"right\"]);\n      },\n      insetNortheast: function insetNortheast() {\n        return i(u, a, [\"top\", \"alignLeft\", \"inset\"]);\n      },\n      insetNorthwest: function insetNorthwest() {\n        return i(-u, a, [\"top\", \"alignRight\", \"inset\"]);\n      },\n      insetNorth: function insetNorth() {\n        return i(-u / 2, a, [\"top\", \"alignCentre\", \"inset\"]);\n      },\n      insetSoutheast: function insetSoutheast() {\n        return i(u, -a, [\"bottom\", \"alignLeft\", \"inset\"]);\n      },\n      insetSouthwest: function insetSouthwest() {\n        return i(-u, -a, [\"bottom\", \"alignRight\", \"inset\"]);\n      },\n      insetSouth: function insetSouth() {\n        return i(-u / 2, -a, [\"bottom\", \"alignCentre\", \"inset\"]);\n      },\n      insetEast: function insetEast() {\n        return i(-u, -a / 2, [\"valignCentre\", \"right\", \"inset\"]);\n      },\n      insetWest: function insetWest() {\n        return i(u, -a / 2, [\"valignCentre\", \"left\", \"inset\"]);\n      }\n    };\n  }\n\n  function kc() {\n    return Sc(0, 0, {});\n  }\n\n  function Cc(n, e) {\n    return function (t) {\n      return \"rtl\" === Nc(t) ? e : n;\n    };\n  }\n\n  ac.none;\n\n  var Oc,\n      _c,\n      Tc = ac.relative,\n      Ec = ac.fixed,\n      Dc = \"data-alloy-placement\",\n      Bc = Ho([{\n    fit: [\"reposition\"]\n  }, {\n    nofit: [\"reposition\", \"visibleW\", \"visibleH\", \"isVisible\"]\n  }]),\n      Mc = D,\n      Ac = Tn,\n      Fc = [\"top\", \"bottom\", \"right\", \"left\"],\n      Ic = \"data-alloy-transition-timer\",\n      Rc = rt(function (t, n) {\n    xc(t, n), mn(t, {\n      \"overflow-x\": \"hidden\",\n      \"overflow-y\": \"auto\"\n    });\n  }),\n      Vc = rt(function (t, n) {\n    xc(t, n);\n  }),\n      Pc = function Pc(t, n, e, o) {\n    var r,\n        i,\n        u,\n        a,\n        c = yc(t, n, e, o),\n        s = n,\n        l = c,\n        f = Ma((r = o).origin, l);\n    return r.transition.each(function (t) {\n      bc(s, r.origin, f, t, l, r.lastPlacement);\n    }), Da(s, f), a = c.placement, on(n, Dc, a), $r(i = n, (u = c.classes).off), Jr(i, u.on), (0, o.maxHeightFunction)(n, c.maxHeight), (0, o.maxWidthFunction)(n, c.maxWidth), {\n      layout: c.layout,\n      placement: c.placement\n    };\n  },\n      Hc = [\"valignCentre\", \"alignLeft\", \"alignRight\", \"alignCentre\", \"top\", \"bottom\", \"left\", \"right\", \"inset\"],\n      zc = h,\n      Nc = function Nc(t) {\n    return \"rtl\" === pn(t, \"direction\") ? \"rtl\" : \"ltr\";\n  };\n\n  function Lc(t) {\n    return Au(t, function (t) {\n      return Xn(t) && un(t, \"data-alloy-vertical-dir\") === Oc.BottomToTop;\n    });\n  }\n\n  function Wc() {\n    return To(\"layouts\", [mo(\"onLtr\"), mo(\"onRtl\"), wo(\"onBottomLtr\"), wo(\"onBottomRtl\")]);\n  }\n\n  function Uc(n, t, e, o, r, i, u) {\n    var a = u.map(Lc).getOr(!1),\n        c = t.layouts.map(function (t) {\n      return t.onLtr(n);\n    }),\n        s = t.layouts.map(function (t) {\n      return t.onRtl(n);\n    });\n    return Cc(a ? t.layouts.bind(function (t) {\n      return t.onBottomLtr.map(function (t) {\n        return t(n);\n      });\n    }).or(c).getOr(r) : c.getOr(e), a ? t.layouts.bind(function (t) {\n      return t.onBottomRtl.map(function (t) {\n        return t(n);\n      });\n    }).or(s).getOr(i) : s.getOr(o))(n);\n  }\n\n  function jc(t) {\n    return t.fold(h, function (t, n, e) {\n      return t.translate(-n, -e);\n    });\n  }\n\n  function Gc(t) {\n    return t.fold(h, h);\n  }\n\n  function Xc(t) {\n    return R(t, function (t, n) {\n      return t.translate(n.left, n.top);\n    }, ke(0, 0));\n  }\n\n  function Yc(t) {\n    return Xc(M(t, Gc));\n  }\n\n  function qc(t, n, e) {\n    var o,\n        r,\n        i = Rn(Ut(t.element)),\n        u = (o = t, r = Xt(e.root).dom, vt.from(r.frameElement).map(At.fromDom).filter(function (t) {\n      return Lt(Ut(t), Ut(o.element));\n    }).map(Cn).getOr(i));\n    return as(u, i.left, i.top);\n  }\n\n  function Kc(t, n, e, o) {\n    var r = us(ke(t, n));\n    return vt.some({\n      point: r,\n      width: e,\n      height: o\n    });\n  }\n\n  function Jc(t, a, c, s, l) {\n    return t.map(function (t) {\n      var n = [a, t.point],\n          e = s.fold(function () {\n        return Yc(n);\n      }, function () {\n        return Yc(n);\n      }, function () {\n        return Xc(M(n, jc));\n      }),\n          o = {\n        x: e.left,\n        y: e.top,\n        width: t.width,\n        height: t.height\n      },\n          r = (c.showAbove ? ga : ha)(),\n          i = (c.showAbove ? pa : va)(),\n          u = Uc(l, c, r, i, r, i, vt.none());\n      return zc({\n        anchorBox: o,\n        bubble: c.bubble.getOr(kc()),\n        overrides: c.overrides,\n        layouts: u,\n        placer: vt.none()\n      });\n    });\n  }\n\n  function $c(t, n, e) {\n    var o,\n        r = t.document.createRange(),\n        i = r;\n    return n.fold(function (t) {\n      i.setStartBefore(t.dom);\n    }, function (t, n) {\n      i.setStart(t.dom, n);\n    }, function (t) {\n      i.setStartAfter(t.dom);\n    }), o = r, e.fold(function (t) {\n      o.setEndBefore(t.dom);\n    }, function (t, n) {\n      o.setEnd(t.dom, n);\n    }, function (t) {\n      o.setEndAfter(t.dom);\n    }), r;\n  }\n\n  function Qc(t, n, e, o, r) {\n    var i = t.document.createRange();\n    return i.setStart(n.dom, e), i.setEnd(o.dom, r), i;\n  }\n\n  function Zc(t) {\n    return {\n      left: t.left,\n      top: t.top,\n      right: t.right,\n      bottom: t.bottom,\n      width: t.width,\n      height: t.height\n    };\n  }\n\n  function ts(t, n, e) {\n    return n(At.fromDom(e.startContainer), e.startOffset, At.fromDom(e.endContainer), e.endOffset);\n  }\n\n  function ns(i, t) {\n    return r = i, o = t.match({\n      domRange: function domRange(t) {\n        return {\n          ltr: rt(t),\n          rtl: vt.none\n        };\n      },\n      relative: function relative(t, n) {\n        return {\n          ltr: Rt(function () {\n            return $c(r, t, n);\n          }),\n          rtl: Rt(function () {\n            return vt.some($c(r, n, t));\n          })\n        };\n      },\n      exact: function exact(t, n, e, o) {\n        return {\n          ltr: Rt(function () {\n            return Qc(r, t, n, e, o);\n          }),\n          rtl: Rt(function () {\n            return vt.some(Qc(r, e, o, t, n));\n          })\n        };\n      }\n    }), ((e = (n = o).ltr()).collapsed ? n.rtl().filter(function (t) {\n      return !1 === t.collapsed;\n    }).map(function (t) {\n      return gs.rtl(At.fromDom(t.endContainer), t.endOffset, At.fromDom(t.startContainer), t.startOffset);\n    }).getOrThunk(function () {\n      return ts(0, gs.ltr, e);\n    }) : ts(0, gs.ltr, e)).match({\n      ltr: function ltr(t, n, e, o) {\n        var r = i.document.createRange();\n        return r.setStart(t.dom, n), r.setEnd(e.dom, o), r;\n      },\n      rtl: function rtl(t, n, e, o) {\n        var r = i.document.createRange();\n        return r.setStart(e.dom, o), r.setEnd(t.dom, n), r;\n      }\n    });\n    var r, n, e, o;\n  }\n\n  (Oc = Oc || {}).TopToBottom = \"toptobottom\", Oc.BottomToTop = \"bottomtotop\";\n\n  var es = \"data-alloy-vertical-dir\",\n      os = [mo(\"hotspot\"), wo(\"bubble\"), Eo(\"overrides\", {}), Wc(), ta(\"placement\", function (t, n, e) {\n    var o = Aa(e, n.hotspot.element),\n        r = Uc(t.element, n, ha(), va(), ga(), pa(), vt.some(n.hotspot.element));\n    return vt.some(zc({\n      anchorBox: o,\n      bubble: n.bubble.getOr(kc()),\n      overrides: n.overrides,\n      layouts: r,\n      placer: vt.none()\n    }));\n  })],\n      rs = [mo(\"x\"), mo(\"y\"), Eo(\"height\", 0), Eo(\"width\", 0), Eo(\"bubble\", kc()), Eo(\"overrides\", {}), Wc(), ta(\"placement\", function (t, n, e) {\n    var o = cc(e, n.x, n.y),\n        r = Me(o.left, o.top, n.width, n.height),\n        i = Uc(t.element, n, da(), ma(), da(), ma(), vt.none());\n    return vt.some(zc({\n      anchorBox: r,\n      bubble: n.bubble,\n      overrides: n.overrides,\n      layouts: i,\n      placer: vt.none()\n    }));\n  })],\n      is = Ho([{\n    screen: [\"point\"]\n  }, {\n    absolute: [\"point\", \"scrollLeft\", \"scrollTop\"]\n  }]),\n      us = is.screen,\n      as = is.absolute,\n      cs = [mo(\"node\"), mo(\"root\"), wo(\"bubble\"), Wc(), Eo(\"overrides\", {}), Eo(\"showAbove\", !1), ta(\"placement\", function (r, i, u) {\n    var a = qc(r, 0, i);\n    return i.node.filter(ve).bind(function (t) {\n      var n = t.dom.getBoundingClientRect(),\n          e = Kc(n.left, n.top, n.width, n.height),\n          o = i.node.getOr(r.element);\n      return Jc(e, a, i, u, o);\n    });\n  })],\n      ss = function ss(t, n, e, o) {\n    return {\n      start: t,\n      soffset: n,\n      finish: e,\n      foffset: o\n    };\n  },\n      ls = Ho([{\n    before: [\"element\"]\n  }, {\n    on: [\"element\", \"offset\"]\n  }, {\n    after: [\"element\"]\n  }]),\n      fs = (ls.before, ls.on, ls.after, function (t) {\n    return t.fold(h, h, h);\n  }),\n      ds = Ho([{\n    domRange: [\"rng\"]\n  }, {\n    relative: [\"startSitu\", \"finishSitu\"]\n  }, {\n    exact: [\"start\", \"soffset\", \"finish\", \"foffset\"]\n  }]),\n      ms = {\n    domRange: ds.domRange,\n    relative: ds.relative,\n    exact: ds.exact,\n    exactFromRange: function exactFromRange(t) {\n      return ds.exact(t.start, t.soffset, t.finish, t.foffset);\n    },\n    getWin: function getWin(t) {\n      return Xt(t.match({\n        domRange: function domRange(t) {\n          return At.fromDom(t.startContainer);\n        },\n        relative: function relative(t, n) {\n          return fs(t);\n        },\n        exact: function exact(t, n, e, o) {\n          return t;\n        }\n      }));\n    },\n    range: ss\n  },\n      gs = Ho([{\n    ltr: [\"start\", \"soffset\", \"finish\", \"foffset\"]\n  }, {\n    rtl: [\"start\", \"soffset\", \"finish\", \"foffset\"]\n  }]);\n\n  function ps(t) {\n    return nf.getOption(t);\n  }\n\n  function hs(t) {\n    return ps(t).filter(function (t) {\n      return 0 !== t.trim().length || -1 < t.indexOf(\"\\xa0\");\n    }).isSome() || wt(ef, Ft(t));\n  }\n\n  function vs(t, n) {\n    return Nt(e = void 0 === t ? document : t.dom) ? [] : M(e.querySelectorAll(n), At.fromDom);\n    var e;\n  }\n\n  function bs(t) {\n    if (0 < t.rangeCount) {\n      var n = t.getRangeAt(0),\n          e = t.getRangeAt(t.rangeCount - 1);\n      return vt.some(ss(At.fromDom(n.startContainer), n.startOffset, At.fromDom(e.endContainer), e.endOffset));\n    }\n\n    return vt.none();\n  }\n\n  function ys(t) {\n    if (null === t.anchorNode || null === t.focusNode) return bs(t);\n    var n,\n        e,\n        o,\n        r,\n        i,\n        u,\n        a,\n        c,\n        s,\n        l,\n        f,\n        d = At.fromDom(t.anchorNode),\n        m = At.fromDom(t.focusNode);\n    return n = d, e = t.anchorOffset, o = m, r = t.focusOffset, u = e, a = o, c = r, (s = Ut(i = n).dom.createRange()).setStart(i.dom, u), s.setEnd(a.dom, c), l = s, f = Lt(n, o) && e === r, l.collapsed && !f ? vt.some(ss(d, t.anchorOffset, m, t.focusOffset)) : bs(t);\n  }\n\n  function xs(t, n) {\n    var e,\n        o,\n        r = (e = ns(t, n)).getClientRects();\n    return 0 < (o = 0 < r.length ? r[0] : e.getBoundingClientRect()).width || 0 < o.height ? vt.some(o).map(Zc) : vt.none();\n  }\n\n  function ws(t, n) {\n    return {\n      element: t,\n      offset: n\n    };\n  }\n\n  function Ss(t, n) {\n    return (Yn(t) ? ws : function (t, n) {\n      var e = Kt(t);\n      if (0 === e.length) return ws(t, n);\n      if (n < e.length) return ws(e[n], 0);\n      var o = e[e.length - 1];\n      return ws(o, (Yn(o) ? nf.get(o) : Kt(o)).length);\n    })(t, n);\n  }\n\n  function ks(t, n) {\n    return n.getSelection.getOrThunk(function () {\n      return function () {\n        return vt.from(t.getSelection()).filter(function (t) {\n          return 0 < t.rangeCount;\n        }).bind(ys);\n      };\n    })().map(function (t) {\n      var n = Ss(t.start, t.soffset),\n          e = Ss(t.finish, t.foffset);\n      return ms.range(n.element, n.offset, e.element, e.offset);\n    });\n  }\n\n  function Cs(t) {\n    return t.x + t.width;\n  }\n\n  function Os(t, n) {\n    return t.x - n.width;\n  }\n\n  function _s(t, n) {\n    return t.y - n.height + t.height;\n  }\n\n  function Ts(t, n, e) {\n    return ea(Cs(t), t.y, e.southeast(), Va(), \"southeast\", ra(t, {\n      left: 0,\n      top: 2\n    }), rf);\n  }\n\n  function Es(t, n, e) {\n    return ea(Os(t, n), t.y, e.southwest(), Pa(), \"southwest\", ra(t, {\n      right: 1,\n      top: 2\n    }), rf);\n  }\n\n  function Ds(t, n, e) {\n    return ea(Cs(t), _s(t, n), e.northeast(), Ha(), \"northeast\", ra(t, {\n      left: 0,\n      bottom: 3\n    }), rf);\n  }\n\n  function Bs(t, n, e) {\n    return ea(Os(t, n), _s(t, n), e.northwest(), za(), \"northwest\", ra(t, {\n      right: 1,\n      bottom: 3\n    }), rf);\n  }\n\n  function Ms() {\n    return [Ts, Es, Ds, Bs];\n  }\n\n  function As() {\n    return [Es, Ts, Bs, Ds];\n  }\n\n  function Fs(t, n, e, o, r, i, u) {\n    var a,\n        c,\n        s,\n        l,\n        f,\n        d,\n        m,\n        g,\n        p,\n        h,\n        v,\n        b,\n        y,\n        x,\n        w = {\n      anchorBox: e.anchorBox,\n      origin: n\n    };\n    return a = w, c = r.element, s = e.bubble, l = e.layouts, f = i, d = o, m = e.overrides, g = u, h = wc(m, \"maxHeightFunction\", Rc()), v = wc(m, \"maxWidthFunction\", st), b = a.anchorBox, y = a.origin, x = {\n      bounds: (p = y, d.fold(function () {\n        return p.fold(Fe, Fe, Me);\n      }, function (e) {\n        return p.fold(e, e, function () {\n          var t = e(),\n              n = cc(p, t.x, t.y);\n          return Me(n.left, n.top, t.width, t.height);\n        });\n      })),\n      origin: y,\n      preference: l,\n      maxHeightFunction: h,\n      maxWidthFunction: v,\n      lastPlacement: f,\n      transition: g\n    }, Pc(b, c, s, x);\n  }\n\n  function Is(t, n) {\n    Te(t.element, n.element);\n  }\n\n  function Rs(n, t) {\n    var e,\n        o = n.components();\n    St((e = n).components(), function (t) {\n      return Ee(t.element);\n    }), Fn(e.element), e.syncComponents();\n    var r = W(o, t);\n    St(r, function (t) {\n      df(t), n.getSystem().removeFromWorld(t);\n    }), St(t, function (t) {\n      t.getSystem().isConnected() ? Is(n, t) : (n.getSystem().addToWorld(t), Is(n, t), ve(n.element) && mf(t)), n.syncComponents();\n    });\n  }\n\n  function Vs(t, n) {\n    gf(t, n, Te);\n  }\n\n  function Ps(t) {\n    df(t), Ee(t.element), t.getSystem().removeFromWorld(t);\n  }\n\n  function Hs(n) {\n    var t = Yt(n.element).bind(function (t) {\n      return n.getSystem().getByDom(t).toOptional();\n    });\n    Ps(n), t.each(function (t) {\n      t.syncComponents();\n    });\n  }\n\n  function zs(t) {\n    var n = t.components();\n    St(n, Ps), Fn(t.element), t.syncComponents();\n  }\n\n  function Ns(t, n) {\n    pf(t, n, Te);\n  }\n\n  function Ls(n) {\n    var t = Kt(n.element);\n    St(t, function (t) {\n      n.getByDom(t).each(df);\n    }), Ee(n.element);\n  }\n\n  function Ws(n, t, e, o) {\n    e.get().each(function (t) {\n      zs(n);\n    }), Vs(t.getAttachPoint(n), n);\n    var r = n.getSystem().build(o);\n    return Vs(n, r), e.set(r), r;\n  }\n\n  function Us(t, n, e, o) {\n    var r = Ws(t, n, e, o);\n    return n.onOpen(t, r), r;\n  }\n\n  function js(n, e, o) {\n    o.get().each(function (t) {\n      zs(n), Hs(n), e.onClose(n, t), o.clear();\n    });\n  }\n\n  function Gs(t, n, e) {\n    return e.isOpen();\n  }\n\n  function Xs(t) {\n    var e = so(\"Dismissal\", Sf, t),\n        n = {};\n    return n[yf()] = {\n      schema: to([mo(\"target\")]),\n      onReceive: function onReceive(n, t) {\n        bf.isOpen(n) && (bf.isPartOf(n, t.target) || e.isExtraPart(n, t.target) || e.fireEventInstead.fold(function () {\n          return bf.close(n);\n        }, function (t) {\n          return vr(n, t.event);\n        }));\n      }\n    }, n;\n  }\n\n  function Ys(t) {\n    var e = so(\"Reposition\", kf, t),\n        n = {};\n    return n[xf()] = {\n      onReceive: function onReceive(n) {\n        bf.isOpen(n) && e.fireEventInstead.fold(function () {\n          return e.doReposition(n);\n        }, function (t) {\n          return vr(n, t.event);\n        });\n      }\n    }, n;\n  }\n\n  function qs(t, n, e) {\n    n.store.manager.onLoad(t, n, e);\n  }\n\n  function Ks(t, n, e) {\n    n.store.manager.onUnload(t, n, e);\n  }\n\n  function Js() {\n    var t = Po(null);\n    return wu({\n      set: t.set,\n      get: t.get,\n      isNotSet: function isNotSet() {\n        return null === t.get();\n      },\n      clear: function clear() {\n        t.set(null);\n      },\n      readState: function readState() {\n        return {\n          mode: \"memory\",\n          value: t.get()\n        };\n      }\n    });\n  }\n\n  function $s() {\n    var i = Po({}),\n        u = Po({});\n    return wu({\n      readState: function readState() {\n        return {\n          mode: \"dataset\",\n          dataByValue: i.get(),\n          dataByText: u.get()\n        };\n      },\n      lookup: function lookup(t) {\n        return tt(i.get(), t).orThunk(function () {\n          return tt(u.get(), t);\n        });\n      },\n      update: function update(t) {\n        var n = i.get(),\n            e = u.get(),\n            o = {},\n            r = {};\n        St(t, function (n) {\n          tt(o[n.value] = n, \"meta\").each(function (t) {\n            tt(t, \"text\").each(function (t) {\n              r[t] = n;\n            });\n          });\n        }), i.set(_lt(_lt({}, n), o)), u.set(_lt(_lt({}, e), r));\n      },\n      clear: function clear() {\n        i.set({}), u.set({});\n      }\n    });\n  }\n\n  function Qs(t, n, e, o) {\n    var r = n.store;\n    e.update([o]), r.setValue(t, o), n.onSetValue(t, o);\n  }\n\n  function Zs(o, t) {\n    return Vo(o, {}, M(t, function (t) {\n      return n = t.name(), e = \"Cannot configure \" + t.name() + \" for \" + o, ar(n, n, Xe(), Je(function (t) {\n        return Lo(\"The field: \" + n + \" is forbidden. \" + e);\n      }));\n      var n, e;\n    }).concat([cr(\"dump\", h)]));\n  }\n\n  function tl(t) {\n    return t.dump;\n  }\n\n  function nl(t, n) {\n    return _lt(_lt({}, nc(n)), t.dump);\n  }\n\n  function el(t) {\n    return Tt(t, \"uiType\");\n  }\n\n  function ol(t) {\n    return t.fold(vt.some, vt.none, vt.some, vt.some);\n  }\n\n  function rl(t) {\n    function n(t) {\n      return t.name;\n    }\n\n    return t.fold(n, n, n, n);\n  }\n\n  function il(e, o) {\n    return function (t) {\n      var n = so(\"Converting part type\", o, t);\n      return e(n);\n    };\n  }\n\n  function ul(t, n, e, o) {\n    return Yo(n.defaults(t, e, o), e, {\n      uid: t.partUids[n.name]\n    }, n.overrides(t, e, o));\n  }\n\n  function al(r, t) {\n    var n = {};\n    return St(t, function (t) {\n      ol(t).each(function (e) {\n        var o = ed(r, e.pname);\n\n        n[e.name] = function (t) {\n          var n = so(\"Part: \" + e.name + \" in \" + r, $o(e.schema), t);\n          return _lt(_lt({}, o), {\n            config: t,\n            validated: n\n          });\n        };\n      });\n    }), n;\n  }\n\n  function cl(t, n, e) {\n    return {\n      uiType: Pf(),\n      owner: t,\n      name: n,\n      config: e,\n      validated: {}\n    };\n  }\n\n  function sl(t) {\n    return z(t, function (t) {\n      return t.fold(vt.none, vt.some, vt.none, vt.none).map(function (t) {\n        return bo(t.name, t.schema.concat([na(td())]));\n      }).toArray();\n    });\n  }\n\n  function ll(t) {\n    return M(t, rl);\n  }\n\n  function fl(t, n, e) {\n    return o = n, r = {}, i = {}, St(e, function (t) {\n      t.fold(function (o) {\n        r[o.pname] = Rf(!0, function (t, n, e) {\n          return o.factory.sketch(ul(t, o, n, e));\n        });\n      }, function (t) {\n        var n = o.parts[t.name];\n        i[t.name] = rt(t.factory.sketch(ul(o, t, n[td()]), n));\n      }, function (o) {\n        r[o.pname] = Rf(!1, function (t, n, e) {\n          return o.factory.sketch(ul(t, o, n, e));\n        });\n      }, function (o) {\n        r[o.pname] = Vf(!0, function (n, t, e) {\n          return M(n[o.name], function (t) {\n            return o.factory.sketch(Yo(o.defaults(n, t, e), t, o.overrides(n, t)));\n          });\n        });\n      });\n    }), {\n      internals: rt(r),\n      externals: rt(i)\n    };\n    var o, r, i;\n  }\n\n  function dl(t, n, e) {\n    return o = vt.some(t), i = (r = n).components, s = dt(e, function (t, n) {\n      return o = t, r = !1, {\n        name: rt(e = n),\n        required: function required() {\n          return o.fold(function (t, n) {\n            return t;\n          }, function (t, n) {\n            return t;\n          });\n        },\n        used: function used() {\n          return r;\n        },\n        replace: function replace() {\n          if (r) throw new Error(\"Trying to use the same placeholder more than once: \" + e);\n          return r = !0, o;\n        }\n      };\n      var e, o, r;\n    }), u = o, a = r, c = s, l = z(i, function (t) {\n      return If(u, a, t, c);\n    }), J(s, function (t) {\n      if (!1 === t.used() && t.required()) throw new Error(\"Placeholder: \" + t.name() + \" was not found in components list\\nNamespace: \" + o.getOr(\"none\") + \"\\nComponents: \" + JSON.stringify(r.components, null, 2));\n    }), l;\n    var o, r, i, u, a, c, s, l;\n  }\n\n  function ml(t, n, e) {\n    var o = n.partUids[e];\n    return t.getSystem().getByUid(o).toOptional();\n  }\n\n  function gl(t, n, e) {\n    return ml(t, n, e).getOrDie(\"Could not find part: \" + e);\n  }\n\n  function pl(t, n, e) {\n    var o = {},\n        r = n.partUids,\n        i = t.getSystem();\n    return St(e, function (t) {\n      o[t] = rt(i.getByUid(r[t]));\n    }), o;\n  }\n\n  function hl(t, n) {\n    var e = t.getSystem();\n    return dt(n.partUids, function (t, n) {\n      return rt(e.getByUid(t));\n    });\n  }\n\n  function vl(t) {\n    return Ct(t.partUids);\n  }\n\n  function bl(t, n, e) {\n    var o = {},\n        r = n.partUids,\n        i = t.getSystem();\n    return St(e, function (t) {\n      o[t] = rt(i.getByUid(r[t]).getOrDie());\n    }), o;\n  }\n\n  function yl(n, t) {\n    return lr(M(ll(t), function (t) {\n      return {\n        key: t,\n        value: n + \"-\" + t\n      };\n    }));\n  }\n\n  function xl(n) {\n    return ar(\"partUids\", \"partUids\", Ye(function (t) {\n      return yl(t.uid, n);\n    }), Zo());\n  }\n\n  function wl(t, n, e, o, r) {\n    var i;\n    return so(t + \" [SpecSchema]\", to((i = r, (0 < o.length ? [bo(\"parts\", o)] : []).concat([mo(\"uid\"), Eo(\"dom\", {}), Eo(\"components\", []), na(\"originalSpec\"), Eo(\"debug.sketcher\", {})]).concat(i)).concat(n)), e);\n  }\n\n  function Sl(t, n, e, o, r) {\n    var i = rd(r),\n        u = wl(t, n, i, sl(e), [xl(e)]),\n        a = fl(0, u, e);\n    return o(u, dl(t, u, a.internals()), i, a.externals());\n  }\n\n  function kl(t) {\n    var r = so(\"Sketcher for \" + t.name, id, t),\n        n = dt(r.apis, zr),\n        e = dt(r.extraApis, Pr);\n    return _lt(_lt({\n      name: r.name,\n      configFields: r.configFields,\n      sketch: function sketch(t) {\n        return n = r.name, e = r.configFields, (0, r.factory)(wl(n, e, o = rd(t), [], []), o);\n        var n, e, o;\n      }\n    }, n), e);\n  }\n\n  function Cl(t) {\n    var n = so(\"Sketcher for \" + t.name, ud, t),\n        e = al(n.name, n.partFields),\n        o = dt(n.apis, zr),\n        r = dt(n.extraApis, Pr);\n    return _lt(_lt({\n      name: n.name,\n      partFields: n.partFields,\n      configFields: n.configFields,\n      sketch: function sketch(t) {\n        return Sl(n.name, n.configFields, n.partFields, n.factory, t);\n      },\n      parts: e\n    }, o), r);\n  }\n\n  function Ol(t) {\n    return \"input\" === Ft(t) && \"radio\" !== un(t, \"type\") || \"textarea\" === Ft(t);\n  }\n\n  function _l(t, n, e) {\n    (n.disabled() ? ld : fd)(t, n);\n  }\n\n  function Tl(t, n) {\n    return !0 === n.useNative && wt(sd, Ft(t.element));\n  }\n\n  function El(t, n) {\n    return Tl(t, n) ? cn(t.element, \"disabled\") : \"true\" === un(t.element, \"aria-disabled\");\n  }\n\n  function Dl(e, o, t, r) {\n    var n = vs(e.element, \".\" + o.highlightClass);\n    St(n, function (n) {\n      d(r, function (t) {\n        return t.element === n;\n      }) || (qr(n, o.highlightClass), e.getSystem().getByDom(n).each(function (t) {\n        o.onDehighlight(e, t), vr(t, tu());\n      }));\n    });\n  }\n\n  function Bl(t, n, e, o) {\n    Dl(t, n, 0, [o]), Yl(0, n, 0, o) || (Yr(o.element, n.highlightClass), n.onHighlight(t, o), vr(o, Zi()));\n  }\n\n  function Ml(e, n, t, o) {\n    var r = vs(e.element, \".\" + n.itemClass);\n    return P(r, function (t) {\n      return Kr(t, n.highlightClass);\n    }).bind(function (t) {\n      var n = oa(t, o, 0, r.length - 1);\n      return e.getSystem().getByDom(r[n]).toOptional();\n    });\n  }\n\n  function Al(t, n, e) {\n    var o = L(t.slice(0, n)),\n        r = L(t.slice(n + 1));\n    return V(o.concat(r), e);\n  }\n\n  function Fl(t, n, e) {\n    return V(L(t.slice(0, n)), e);\n  }\n\n  function Il(t, n, e) {\n    var o = t.slice(0, n);\n    return V(t.slice(n + 1).concat(o), e);\n  }\n\n  function Rl(t, n, e) {\n    return V(t.slice(n + 1), e);\n  }\n\n  function Vl(e) {\n    return function (t) {\n      var n = t.raw;\n      return wt(e, n.which);\n    };\n  }\n\n  function Pl(t) {\n    return function (n) {\n      return N(t, function (t) {\n        return t(n);\n      });\n    };\n  }\n\n  function Hl(t) {\n    return !0 === t.raw.shiftKey;\n  }\n\n  function zl(t) {\n    return !0 === t.raw.ctrlKey;\n  }\n\n  function Nl(t, n) {\n    return {\n      matches: t,\n      classification: n\n    };\n  }\n\n  function Ll(t, n, e) {\n    n.exists(function (n) {\n      return e.exists(function (t) {\n        return Lt(t, n);\n      });\n    }) || br(t, Ki(), {\n      prevFocus: n,\n      newFocus: e\n    });\n  }\n\n  function Wl() {\n    function o(t) {\n      return _a(t.element);\n    }\n\n    return {\n      get: o,\n      set: function set(t, n) {\n        var e = o(t);\n        t.getSystem().triggerFocus(n, t.element), Ll(t, e, o(t));\n      }\n    };\n  }\n\n  function Ul() {\n    function r(t) {\n      return hd.getHighlighted(t).map(function (t) {\n        return t.element;\n      });\n    }\n\n    return {\n      get: r,\n      set: function set(n, t) {\n        var e = r(n);\n        n.getSystem().getByDom(t).fold(st, function (t) {\n          hd.highlight(n, t);\n        });\n        var o = r(n);\n        Ll(n, e, o);\n      }\n    };\n  }\n\n  gs.ltr, gs.rtl;\n\n  function jl(t, n, e, o, r, i) {\n    var u = i.map(Ae);\n    return lf(t, n, e, o, r, u);\n  }\n\n  function Gl(t, n, e) {\n    var o,\n        r,\n        i,\n        u = n.getAttachPoint(t);\n    dn(t.element, \"position\", ff.getMode(u)), i = n.cloakVisibilityAttr, hn((o = t).element, r = \"visibility\").fold(function () {\n      sn(o.element, i);\n    }, function (t) {\n      on(o.element, i, t);\n    }), dn(o.element, r, \"hidden\");\n  }\n\n  function Xl(t, n, e) {\n    var o,\n        r,\n        i,\n        u = t.element;\n    d([\"top\", \"left\", \"right\", \"bottom\"], function (t) {\n      return hn(u, t).isSome();\n    }) || bn(t.element, \"position\"), r = \"visibility\", i = n.cloakVisibilityAttr, an((o = t).element, i).fold(function () {\n      return bn(o.element, r);\n    }, function (t) {\n      return dn(o.element, r, t);\n    });\n  }\n\n  function Yl(t, n, e, o) {\n    return Kr(o.element, n.highlightClass);\n  }\n\n  function ql(n, t, e) {\n    return Iu(n.element, \".\" + t.itemClass).bind(function (t) {\n      return n.getSystem().getByDom(t).toOptional();\n    });\n  }\n\n  function Kl(n, t, e) {\n    var o = vs(n.element, \".\" + t.itemClass);\n    return (0 < o.length ? vt.some(o[o.length - 1]) : vt.none()).bind(function (t) {\n      return n.getSystem().getByDom(t).toOptional();\n    });\n  }\n\n  function Jl(n, t, e) {\n    return et(M(vs(n.element, \".\" + t.itemClass), function (t) {\n      return n.getSystem().getByDom(t).toOptional();\n    }));\n  }\n\n  var $l,\n      Ql,\n      Zl,\n      tf,\n      nf = ($l = Yn, {\n    get: function get(t) {\n      if (!$l(t)) throw new Error(\"Can only get text value of a text node\");\n      return Ql(t).getOr(\"\");\n    },\n    getOption: Ql = function Ql(t) {\n      return $l(t) ? vt.from(t.dom.nodeValue) : vt.none();\n    },\n    set: function set(t, n) {\n      if (!$l(t)) throw new Error(\"Can only set raw text value of a text node\");\n      t.dom.nodeValue = n;\n    }\n  }),\n      ef = [\"img\", \"br\"],\n      of = [wo(\"getSelection\"), mo(\"root\"), wo(\"bubble\"), Wc(), Eo(\"overrides\", {}), Eo(\"showAbove\", !1), ta(\"placement\", function (t, n, e) {\n    var r = Xt(n.root).dom,\n        o = qc(t, 0, n);\n    return Jc(ks(r, n).bind(function (e) {\n      return t = r, n = ms.exactFromRange(e), (0 < (o = ns(t, n).getBoundingClientRect()).width || 0 < o.height ? vt.some(o).map(Zc) : vt.none()).orThunk(function () {\n        var t = At.fromText(\"\\uFEFF\");\n        Dn(e.start, t);\n        var n = xs(r, ms.exact(t, 0, t, 1));\n        return Ee(t), n;\n      }).bind(function (t) {\n        return Kc(t.left, t.top, t.width, t.height);\n      });\n      var t, n, o;\n    }), o, n, e, ks(r, n).bind(function (t) {\n      return Xn(t.start) ? vt.some(t.start) : fe(t.start);\n    }).getOr(t.element));\n  })],\n      rf = \"link-layout\",\n      uf = lo(\"type\", {\n    selection: of,\n    node: cs,\n    hotspot: os,\n    submenu: [mo(\"item\"), Wc(), Eo(\"overrides\", {}), ta(\"placement\", function (t, n, e) {\n      var o = Aa(e, n.item.element),\n          r = Uc(t.element, n, Ms(), As(), Ms(), As(), vt.none());\n      return vt.some(zc({\n        anchorBox: o,\n        bubble: kc(),\n        overrides: n.overrides,\n        layouts: r,\n        placer: vt.none()\n      }));\n    })],\n    makeshift: rs\n  }),\n      af = [xo(\"classes\", nr), Ao(\"mode\", \"all\", [\"all\", \"layout\", \"placement\"])],\n      cf = [Eo(\"useFixed\", T), wo(\"getBounds\")],\n      sf = [go(\"anchor\", uf), To(\"transition\", af)],\n      lf = function lf(c, s, l, f, t, d) {\n    var m = so(\"placement.info\", $o(sf), t),\n        g = m.anchor,\n        p = f.element,\n        h = l.get(f.uid);\n    Ta(function () {\n      dn(p, \"position\", \"fixed\");\n      var t = hn(p, \"visibility\");\n      dn(p, \"visibility\", \"hidden\");\n      var n,\n          e,\n          o,\n          r,\n          i = s.useFixed() ? (r = document.documentElement, Ec(0, 0, r.clientWidth, r.clientHeight)) : (e = Cn((n = c).element), o = n.element.dom.getBoundingClientRect(), Tc(e.left, e.top, o.width, o.height)),\n          u = g.placement,\n          a = d.map(rt).or(s.getBounds);\n      u(c, g, i).each(function (t) {\n        var n = t.placer.getOr(Fs)(c, i, t, a, f, h, m.transition);\n        l.set(f.uid, n);\n      }), t.fold(function () {\n        bn(p, \"visibility\");\n      }, function (t) {\n        dn(p, \"visibility\", t);\n      }), hn(p, \"left\").isNone() && hn(p, \"top\").isNone() && hn(p, \"right\").isNone() && hn(p, \"bottom\").isNone() && mt(hn(p, \"position\"), \"fixed\") && bn(p, \"position\");\n    }, p);\n  },\n      ff = xa({\n    fields: cf,\n    name: \"positioning\",\n    active: uc,\n    apis: Object.freeze({\n      __proto__: null,\n      position: function position(t, n, e, o, r) {\n        jl(t, n, e, o, r, vt.none());\n      },\n      positionWithin: jl,\n      positionWithinBounds: lf,\n      getMode: function getMode(t, n, e) {\n        return n.useFixed() ? \"fixed\" : \"absolute\";\n      },\n      reset: function reset(t, n, e, o) {\n        var r = o.element;\n        St([\"position\", \"left\", \"right\", \"top\", \"bottom\"], function (t) {\n          return bn(r, t);\n        }), sn(r, Dc), e.clear(o.uid);\n      }\n    }),\n    state: Object.freeze({\n      __proto__: null,\n      init: function init() {\n        var e = {};\n        return wu({\n          readState: function readState() {\n            return e;\n          },\n          clear: function clear(t) {\n            k(t) ? delete e[t] : e = {};\n          },\n          set: function set(t, n) {\n            e[t] = n;\n          },\n          get: function get(t) {\n            return tt(e, t);\n          }\n        });\n      }\n    })\n  }),\n      df = function df(t) {\n    vr(t, Xi());\n    var n = t.components();\n    St(n, df);\n  },\n      mf = function mf(t) {\n    var n = t.components();\n    St(n, mf), vr(t, Gi());\n  },\n      gf = function gf(t, n, e) {\n    t.getSystem().addToWorld(n), e(t.element, n.element), ve(t.element) && mf(n), t.syncComponents();\n  },\n      pf = function pf(t, n, e) {\n    e(t, n.element);\n    var o = Kt(n.element);\n    St(o, function (t) {\n      n.getByDom(t).each(mf);\n    });\n  },\n      hf = Object.freeze({\n    __proto__: null,\n    cloak: Gl,\n    decloak: Xl,\n    open: Us,\n    openWhileCloaked: function openWhileCloaked(t, n, e, o, r) {\n      Gl(t, n), Us(t, n, e, o), r(), Xl(t, n);\n    },\n    close: js,\n    isOpen: Gs,\n    isPartOf: function isPartOf(n, e, t, o) {\n      return Gs(0, 0, t) && t.get().exists(function (t) {\n        return e.isPartOf(n, t, o);\n      });\n    },\n    getState: function getState(t, n, e) {\n      return e.get();\n    },\n    setContent: function setContent(t, n, e, o) {\n      return e.get().map(function () {\n        return Ws(t, n, e, o);\n      });\n    }\n  }),\n      vf = Object.freeze({\n    __proto__: null,\n    events: function events(e, o) {\n      return eu([Cr(Hi(), function (t, n) {\n        js(t, e, o);\n      })]);\n    }\n  }),\n      bf = xa({\n    fields: [Ju(\"onOpen\"), Ju(\"onClose\"), mo(\"isPartOf\"), mo(\"getAttachPoint\"), Eo(\"cloakVisibilityAttr\", \"data-precloak-visibility\")],\n    name: \"sandboxing\",\n    active: vf,\n    apis: hf,\n    state: Object.freeze({\n      __proto__: null,\n      init: function init() {\n        var t = gc(),\n            n = rt(\"not-implemented\");\n        return wu({\n          readState: n,\n          isOpen: t.isSet,\n          clear: t.clear,\n          set: t.set,\n          get: t.get\n        });\n      }\n    })\n  }),\n      yf = rt(\"dismiss.popups\"),\n      xf = rt(\"reposition.popups\"),\n      wf = rt(\"mouse.released\"),\n      Sf = to([Eo(\"isExtraPart\", T), To(\"fireEventInstead\", [Eo(\"event\", Yi())])]),\n      kf = to([To(\"fireEventInstead\", [Eo(\"event\", qi())]), vo(\"doReposition\")]),\n      Cf = Object.freeze({\n    __proto__: null,\n    onLoad: qs,\n    onUnload: Ks,\n    setValue: function setValue(t, n, e, o) {\n      n.store.manager.setValue(t, n, e, o);\n    },\n    getValue: function getValue(t, n, e) {\n      return n.store.manager.getValue(t, n, e);\n    },\n    getState: function getState(t, n, e) {\n      return e;\n    }\n  }),\n      Of = Object.freeze({\n    __proto__: null,\n    events: function events(e, o) {\n      var t = e.resetOnDom ? [ou(function (t, n) {\n        qs(t, e, o);\n      }), ru(function (t, n) {\n        Ks(t, e, o);\n      })] : [ba(e, o, qs)];\n      return eu(t);\n    }\n  }),\n      _f = Object.freeze({\n    __proto__: null,\n    memory: Js,\n    dataset: $s,\n    manual: function manual() {\n      return wu({\n        readState: st\n      });\n    },\n    init: function init(t) {\n      return t.store.manager.state(t);\n    }\n  }),\n      Tf = [wo(\"initialValue\"), mo(\"getFallbackEntry\"), mo(\"getDataKey\"), mo(\"setValue\"), ta(\"manager\", {\n    setValue: Qs,\n    getValue: function getValue(t, n, e) {\n      var o = n.store,\n          r = o.getDataKey(t);\n      return e.lookup(r).getOrThunk(function () {\n        return o.getFallbackEntry(r);\n      });\n    },\n    onLoad: function onLoad(n, e, o) {\n      e.store.initialValue.each(function (t) {\n        Qs(n, e, o, t);\n      });\n    },\n    onUnload: function onUnload(t, n, e) {\n      e.clear();\n    },\n    state: $s\n  })],\n      Ef = [mo(\"getValue\"), Eo(\"setValue\", st), wo(\"initialValue\"), ta(\"manager\", {\n    setValue: function setValue(t, n, e, o) {\n      n.store.setValue(t, o), n.onSetValue(t, o);\n    },\n    getValue: function getValue(t, n, e) {\n      return n.store.getValue(t);\n    },\n    onLoad: function onLoad(n, e, t) {\n      e.store.initialValue.each(function (t) {\n        e.store.setValue(n, t);\n      });\n    },\n    onUnload: st,\n    state: xu.init\n  })],\n      Df = xa({\n    fields: [Do(\"store\", {\n      mode: \"memory\"\n    }, lo(\"mode\", {\n      memory: [wo(\"initialValue\"), ta(\"manager\", {\n        setValue: function setValue(t, n, e, o) {\n          e.set(o), n.onSetValue(t, o);\n        },\n        getValue: function getValue(t, n, e) {\n          return e.get();\n        },\n        onLoad: function onLoad(t, n, e) {\n          n.store.initialValue.each(function (t) {\n            e.isNotSet() && e.set(t);\n          });\n        },\n        onUnload: function onUnload(t, n, e) {\n          e.clear();\n        },\n        state: Js\n      })],\n      manual: Ef,\n      dataset: Tf\n    })), Ju(\"onSetValue\"), Eo(\"resetOnDom\", !1)],\n    name: \"representing\",\n    active: Of,\n    apis: Cf,\n    extra: {\n      setValueFrom: function setValueFrom(t, n) {\n        var e = Df.getValue(n);\n        Df.setValue(t, e);\n      }\n    },\n    state: _f\n  }),\n      Bf = Zs,\n      Mf = nl,\n      Af = \"placeholder\",\n      Ff = Ho([{\n    single: [\"required\", \"valueThunk\"]\n  }, {\n    multiple: [\"required\", \"valueThunks\"]\n  }]),\n      If = function If(r, i, u, a) {\n    return t = r, e = a, (el(n = u) && n.uiType === Af ? (c = n, s = e, (o = t).exists(function (t) {\n      return t !== c.owner;\n    }) ? Ff.single(!0, rt(c)) : tt(s, c.name).fold(function () {\n      throw new Error(\"Unknown placeholder component: \" + c.name + \"\\nKnown: [\" + Ct(s) + \"]\\nNamespace: \" + o.getOr(\"none\") + \"\\nSpec: \" + JSON.stringify(c, null, 2));\n    }, function (t) {\n      return t.replace();\n    })) : Ff.single(!1, rt(n))).fold(function (t, n) {\n      var e = el(u) ? n(i, u.config, u.validated) : n(i),\n          o = z(tt(e, \"components\").getOr([]), function (t) {\n        return If(r, i, t, a);\n      });\n      return [_lt(_lt({}, e), {\n        components: o\n      })];\n    }, function (t, n) {\n      if (el(u)) {\n        var e = n(i, u.config, u.validated);\n        return u.validated.preprocess.getOr(h)(e);\n      }\n\n      return n(i);\n    });\n    var t, n, e, o, c, s;\n  },\n      Rf = Ff.single,\n      Vf = Ff.multiple,\n      Pf = rt(Af),\n      Hf = Ho([{\n    required: [\"data\"]\n  }, {\n    external: [\"data\"]\n  }, {\n    optional: [\"data\"]\n  }, {\n    group: [\"data\"]\n  }]),\n      zf = Eo(\"factory\", {\n    sketch: h\n  }),\n      Nf = Eo(\"schema\", []),\n      Lf = mo(\"name\"),\n      Wf = ar(\"pname\", \"pname\", je(function (t) {\n    return \"<alloy.\" + Ir(t.name) + \">\";\n  }), Zo()),\n      Uf = cr(\"schema\", function () {\n    return [wo(\"preprocess\")];\n  }),\n      jf = Eo(\"defaults\", rt({})),\n      Gf = Eo(\"overrides\", rt({})),\n      Xf = $o([zf, Nf, Lf, Wf, jf, Gf]),\n      Yf = $o([zf, Nf, Lf, jf, Gf]),\n      qf = $o([zf, Nf, Lf, Wf, jf, Gf]),\n      Kf = $o([zf, Uf, Lf, mo(\"unit\"), Wf, jf, Gf]),\n      Jf = il(Hf.required, Xf),\n      $f = il(Hf.external, Yf),\n      Qf = il(Hf.optional, qf),\n      Zf = il(Hf.group, Kf),\n      td = rt(\"entirety\"),\n      nd = Object.freeze({\n    __proto__: null,\n    required: Jf,\n    external: $f,\n    optional: Qf,\n    group: Zf,\n    asNamedPart: ol,\n    name: rl,\n    asCommon: function asCommon(t) {\n      return t.fold(h, h, h, h);\n    },\n    original: td\n  }),\n      ed = function ed(t, n) {\n    return {\n      uiType: Pf(),\n      owner: t,\n      name: n\n    };\n  },\n      od = Object.freeze({\n    __proto__: null,\n    generate: al,\n    generateOne: cl,\n    schemas: sl,\n    names: ll,\n    substitutes: fl,\n    components: dl,\n    defaultUids: yl,\n    defaultUidsSchema: xl,\n    getAllParts: hl,\n    getAllPartNames: vl,\n    getPart: ml,\n    getPartOrDie: gl,\n    getParts: pl,\n    getPartsOrDie: bl\n  }),\n      rd = function rd(t) {\n    return Tt(t, \"uid\") ? t : _lt(_lt({}, t), {\n      uid: pu(\"uid\")\n    });\n  },\n      id = to([mo(\"name\"), mo(\"factory\"), mo(\"configFields\"), Eo(\"apis\", {}), Eo(\"extraApis\", {})]),\n      ud = to([mo(\"name\"), mo(\"factory\"), mo(\"configFields\"), mo(\"partFields\"), Eo(\"apis\", {}), Eo(\"extraApis\", {})]),\n      ad = Object.freeze({\n    __proto__: null,\n    getCurrent: function getCurrent(t, n, e) {\n      return n.find(t);\n    }\n  }),\n      cd = xa({\n    fields: [mo(\"find\")],\n    name: \"composing\",\n    apis: ad\n  }),\n      sd = [\"input\", \"button\", \"textarea\", \"select\"],\n      ld = function ld(n, t, e) {\n    t.disableClass.each(function (t) {\n      Yr(n.element, t);\n    }), (Tl(n, t) ? function (t) {\n      on(t.element, \"disabled\", \"disabled\");\n    } : function (t) {\n      on(t.element, \"aria-disabled\", \"true\");\n    })(n), t.onDisabled(n);\n  },\n      fd = function fd(n, t, e) {\n    t.disableClass.each(function (t) {\n      qr(n.element, t);\n    }), (Tl(n, t) ? function (t) {\n      sn(t.element, \"disabled\");\n    } : function (t) {\n      on(t.element, \"aria-disabled\", \"false\");\n    })(n), t.onEnabled(n);\n  },\n      dd = Object.freeze({\n    __proto__: null,\n    enable: fd,\n    disable: ld,\n    isDisabled: El,\n    onLoad: _l,\n    set: function set(t, n, e, o) {\n      (o ? ld : fd)(t, n);\n    }\n  }),\n      md = Object.freeze({\n    __proto__: null,\n    exhibit: function exhibit(t, n) {\n      return Lr({\n        classes: n.disabled() ? n.disableClass.toArray() : []\n      });\n    },\n    events: function events(e, t) {\n      return eu([Sr(Ii(), function (t, n) {\n        return El(t, e);\n      }), ba(e, t, _l)]);\n    }\n  }),\n      gd = xa({\n    fields: [Io(\"disabled\", T), Eo(\"useNative\", !0), wo(\"disableClass\"), Ju(\"onDisabled\"), Ju(\"onEnabled\")],\n    name: \"disabling\",\n    active: md,\n    apis: dd\n  }),\n      pd = Object.freeze({\n    __proto__: null,\n    dehighlightAll: function dehighlightAll(t, n, e) {\n      return Dl(t, n, 0, []);\n    },\n    dehighlight: function dehighlight(t, n, e, o) {\n      Yl(0, n, 0, o) && (qr(o.element, n.highlightClass), n.onDehighlight(t, o), vr(o, tu()));\n    },\n    highlight: Bl,\n    highlightFirst: function highlightFirst(n, e, t) {\n      ql(n, e).each(function (t) {\n        Bl(n, e, 0, t);\n      });\n    },\n    highlightLast: function highlightLast(n, e, t) {\n      Kl(n, e).each(function (t) {\n        Bl(n, e, 0, t);\n      });\n    },\n    highlightAt: function highlightAt(n, e, t, o) {\n      var r, i, u;\n      i = o, u = vs((r = n).element, \".\" + e.itemClass), vt.from(u[i]).fold(function () {\n        return Ve.error(new Error(\"No element found with index \" + i));\n      }, r.getSystem().getByDom).fold(function (t) {\n        throw t;\n      }, function (t) {\n        Bl(n, e, 0, t);\n      });\n    },\n    highlightBy: function highlightBy(n, e, t, o) {\n      V(Jl(n, e), o).each(function (t) {\n        Bl(n, e, 0, t);\n      });\n    },\n    isHighlighted: Yl,\n    getHighlighted: function getHighlighted(n, t, e) {\n      return Iu(n.element, \".\" + t.highlightClass).bind(function (t) {\n        return n.getSystem().getByDom(t).toOptional();\n      });\n    },\n    getFirst: ql,\n    getLast: Kl,\n    getPrevious: function getPrevious(t, n, e) {\n      return Ml(t, n, 0, -1);\n    },\n    getNext: function getNext(t, n, e) {\n      return Ml(t, n, 0, 1);\n    },\n    getCandidates: Jl\n  }),\n      hd = xa({\n    fields: [mo(\"highlightClass\"), mo(\"itemClass\"), Ju(\"onHighlight\"), Ju(\"onDehighlight\")],\n    name: \"highlighting\",\n    apis: pd\n  }),\n      vd = [8],\n      bd = [9],\n      yd = [13],\n      xd = [27],\n      wd = [32],\n      Sd = [37],\n      kd = [38],\n      Cd = [39],\n      Od = [40],\n      _d = O(Hl);\n\n  function Td(t, n, e, o, a) {\n    function c(n, e, t, o, r) {\n      var i = t(n, e, o, r),\n          u = e.event;\n      return V(i, function (t) {\n        return t.matches(u);\n      }).map(function (t) {\n        return t.classification;\n      }).bind(function (t) {\n        return t(n, e, o, r);\n      });\n    }\n\n    var r = {\n      schema: function schema() {\n        return t.concat([Eo(\"focusManager\", Wl()), Do(\"focusInside\", \"onFocus\", io(function (t) {\n          return wt([\"onFocus\", \"onEnterOrSpace\", \"onApi\"], t) ? Ve.value(t) : Ve.error(\"Invalid value for focusInside\");\n        })), ta(\"handler\", r), ta(\"state\", n), ta(\"sendFocusIn\", a)]);\n      },\n      processKey: c,\n      toEvents: function toEvents(i, u) {\n        var t = i.focusInside !== Zl.OnFocusMode ? vt.none() : a(i).map(function (e) {\n          return Cr(Bi(), function (t, n) {\n            e(t, i, u), n.stop();\n          });\n        }),\n            n = [Cr(xi(), function (o, r) {\n          c(o, r, e, i, u).fold(function () {\n            var n = o,\n                e = r,\n                t = Vl(wd.concat(yd))(e.event);\n            i.focusInside === Zl.OnEnterOrSpaceMode && t && gr(n, e) && a(i).each(function (t) {\n              t(n, i, u), e.stop();\n            });\n          }, function (t) {\n            r.stop();\n          });\n        }), Cr(wi(), function (t, n) {\n          c(t, n, o, i, u).each(function (t) {\n            n.stop();\n          });\n        })];\n        return eu(t.toArray().concat(n));\n      }\n    };\n    return r;\n  }\n\n  function Ed(t) {\n    function a(t, n) {\n      return 0 < wn(t.visibilitySelector.bind(function (t) {\n        return Ru(n, t);\n      }).getOr(n));\n    }\n\n    function n(n, e, t) {\n      var o = e,\n          r = F(vs(n.element, o.selector), function (t) {\n        return a(o, t);\n      });\n      vt.from(r[o.firstTabstop]).each(function (t) {\n        e.focusManager.set(n, t);\n      });\n    }\n\n    function o(e, t, r, i) {\n      var n,\n          u = vs(e.element, r.selector);\n      return (n = r).focusManager.get(e).bind(function (t) {\n        return Ru(t, n.selector);\n      }).bind(function (t) {\n        return P(u, C(Lt, t)).bind(function (t) {\n          return n = e, o = r, i(u, t, function (t) {\n            return a(n = o, e = t) && n.useTabstopAt(e);\n            var n, e;\n          }).fold(function () {\n            return o.cyclic ? vt.some(!0) : vt.none();\n          }, function (t) {\n            return o.focusManager.set(n, t), vt.some(!0);\n          });\n          var n, o;\n        });\n      });\n    }\n\n    var e = [wo(\"onEscape\"), wo(\"onEnter\"), Eo(\"selector\", '[data-alloy-tabstop=\"true\"]:not(:disabled)'), Eo(\"firstTabstop\", 0), Eo(\"useTabstopAt\", D), wo(\"visibilitySelector\")].concat([t]),\n        r = rt([Nl(Pl([Hl, Vl(bd)]), function (t, n, e) {\n      return o(t, 0, e, e.cyclic ? Al : Fl);\n    }), Nl(Vl(bd), function (t, n, e) {\n      return o(t, 0, e, e.cyclic ? Il : Rl);\n    }), Nl(Vl(xd), function (n, e, t) {\n      return t.onEscape.bind(function (t) {\n        return t(n, e);\n      });\n    }), Nl(Pl([_d, Vl(yd)]), function (n, e, t) {\n      return t.onEnter.bind(function (t) {\n        return t(n, e);\n      });\n    })]),\n        i = rt([]);\n    return Td(e, xu.init, r, i, function () {\n      return vt.some(n);\n    });\n  }\n\n  function Dd(t, n, e) {\n    return Ol(e) && Vl(wd)(n.event) ? vt.none() : (xr(t, e, Ii()), vt.some(!0));\n  }\n\n  function Bd(t, n) {\n    return vt.some(!0);\n  }\n\n  function Md(t, n, e) {\n    return e.execute(t, n, t.element);\n  }\n\n  function Ad() {\n    var e = gc();\n    return wu({\n      readState: function readState() {\n        return e.get().map(function (t) {\n          return {\n            numRows: String(t.numRows),\n            numColumns: String(t.numColumns)\n          };\n        }).getOr({\n          numRows: \"?\",\n          numColumns: \"?\"\n        });\n      },\n      setGridSize: function setGridSize(t, n) {\n        e.set({\n          numRows: t,\n          numColumns: n\n        });\n      },\n      getNumRows: function getNumRows() {\n        return e.get().map(function (t) {\n          return t.numRows;\n        });\n      },\n      getNumColumns: function getNumColumns() {\n        return e.get().map(function (t) {\n          return t.numColumns;\n        });\n      }\n    });\n  }\n\n  function Fd(i) {\n    return function (t, n, e, o) {\n      var r = i(t.element);\n      return tg(r, t, n, e, o);\n    };\n  }\n\n  function Id(t, n) {\n    return Fd(Cc(t, n));\n  }\n\n  function Rd(t, n) {\n    return Fd(Cc(n, t));\n  }\n\n  function Vd(r) {\n    return function (t, n, e, o) {\n      return tg(r, t, n, e, o);\n    };\n  }\n\n  function Pd(t) {\n    return !((n = t.dom).offsetWidth <= 0 && n.offsetHeight <= 0);\n    var n;\n  }\n\n  function Hd(t, n, e) {\n    var o,\n        r = F(vs(t, e), Pd);\n    return P(o = r, function (t) {\n      return Lt(t, n);\n    }).map(function (t) {\n      return {\n        index: t,\n        candidates: o\n      };\n    });\n  }\n\n  function zd(t, n) {\n    return P(t, function (t) {\n      return Lt(n, t);\n    });\n  }\n\n  function Nd(e, t, o, n) {\n    return n(Math.floor(t / o), t % o).bind(function (t) {\n      var n = t.row * o + t.column;\n      return 0 <= n && n < e.length ? vt.some(e[n]) : vt.none();\n    });\n  }\n\n  function Ld(r, t, i, u, a) {\n    return Nd(r, t, u, function (t, n) {\n      var e = t === i - 1 ? r.length - t * u : u,\n          o = oa(n, a, 0, e - 1);\n      return vt.some({\n        row: t,\n        column: o\n      });\n    });\n  }\n\n  function Wd(i, t, u, a, c) {\n    return Nd(i, t, a, function (t, n) {\n      var e = oa(t, c, 0, u - 1),\n          o = e === u - 1 ? i.length - e * a : a,\n          r = ja(n, 0, o - 1);\n      return vt.some({\n        row: e,\n        column: r\n      });\n    });\n  }\n\n  function Ud(n, e, t) {\n    Iu(n.element, e.selector).each(function (t) {\n      e.focusManager.set(n, t);\n    });\n  }\n\n  function jd(r) {\n    return function (t, n, e, o) {\n      return Hd(t, n, e.selector).bind(function (t) {\n        return r(t.candidates, t.index, o.getNumRows().getOr(e.initSize.numRows), o.getNumColumns().getOr(e.initSize.numColumns));\n      });\n    };\n  }\n\n  function Gd(t, n, e) {\n    return e.captureTab ? vt.some(!0) : vt.none();\n  }\n\n  function Xd(t, n, e, i) {\n    var u = function u(t, n, e) {\n      var o,\n          r = oa(n, i, 0, e.length - 1);\n      return r === t ? vt.none() : \"button\" === Ft(o = e[r]) && \"disabled\" === un(o, \"disabled\") ? u(t, r, e) : vt.from(e[r]);\n    };\n\n    return Hd(t, e, n).bind(function (t) {\n      var n = t.index,\n          e = t.candidates;\n      return u(n, n, e);\n    });\n  }\n\n  function Yd(n, e, o) {\n    return (r = o).focusManager.get(n).bind(function (t) {\n      return Ru(t, r.selector);\n    }).bind(function (t) {\n      return o.execute(n, e, t);\n    });\n    var r;\n  }\n\n  function qd(n, e, t) {\n    e.getInitial(n).orThunk(function () {\n      return Iu(n.element, e.selector);\n    }).each(function (t) {\n      e.focusManager.set(n, t);\n    });\n  }\n\n  function Kd(t, n, e) {\n    return Xd(t, e.selector, n, -1);\n  }\n\n  function Jd(t, n, e) {\n    return Xd(t, e.selector, n, 1);\n  }\n\n  function $d(r) {\n    return function (t, n, e, o) {\n      return r(t, n, e, o).bind(function () {\n        return e.executeOnMove ? Yd(t, n, e) : vt.some(!0);\n      });\n    };\n  }\n\n  function Qd(t, n, e) {\n    return e.onEscape(t, n);\n  }\n\n  function Zd(t, n, e) {\n    return vt.from(t[n]).bind(function (t) {\n      return vt.from(t[e]).map(function (t) {\n        return {\n          rowIndex: n,\n          columnIndex: e,\n          cell: t\n        };\n      });\n    });\n  }\n\n  function tm(t, n, e, o) {\n    return Zd(t, n, oa(e, o, 0, t[n].length - 1));\n  }\n\n  function nm(t, n, e, o) {\n    var r = oa(e, o, 0, t.length - 1),\n        i = t[r].length;\n    return Zd(t, r, ja(n, 0, i - 1));\n  }\n\n  function em(t, n, e, o) {\n    var r = t[n].length;\n    return Zd(t, n, ja(e + o, 0, r - 1));\n  }\n\n  function om(t, n, e, o) {\n    var r = ja(e + o, 0, t.length - 1),\n        i = t[r].length;\n    return Zd(t, r, ja(n, 0, i - 1));\n  }\n\n  function rm(n, e, t) {\n    e.previousSelector(n).orThunk(function () {\n      var t = e.selectors;\n      return Iu(n.element, t.cell);\n    }).each(function (t) {\n      e.focusManager.set(n, t);\n    });\n  }\n\n  function im(t, o) {\n    return function (n, e, i) {\n      var u = i.cycles ? t : o;\n      return Ru(e, i.selectors.row).bind(function (t) {\n        return zd(vs(t, i.selectors.cell), e).bind(function (o) {\n          var r = vs(n, i.selectors.row);\n          return zd(r, t).bind(function (t) {\n            var n,\n                e = (n = i, M(r, function (t) {\n              return vs(t, n.selectors.cell);\n            }));\n            return u(e, t, o).map(function (t) {\n              return t.cell;\n            });\n          });\n        });\n      });\n    };\n  }\n\n  function um(n, e, o) {\n    return o.focusManager.get(n).bind(function (t) {\n      return o.execute(n, e, t);\n    });\n  }\n\n  function am(n, e, t) {\n    Iu(n.element, e.selector).each(function (t) {\n      e.focusManager.set(n, t);\n    });\n  }\n\n  function cm(t, n, e) {\n    return Xd(t, e.selector, n, -1);\n  }\n\n  function sm(t, n, e) {\n    return Xd(t, e.selector, n, 1);\n  }\n\n  function lm(t, n, e, o) {\n    var r = t.getSystem().build(o);\n    gf(t, r, e);\n  }\n\n  function fm(t, n, e, o) {\n    V(Ig(t), function (t) {\n      return Lt(o.element, t.element);\n    }).each(Hs);\n  }\n\n  function dm(n, t, e, r, o) {\n    var i = Ig(n);\n    return vt.from(i[r]).map(function (t) {\n      return fm(n, 0, 0, t), o.each(function (t) {\n        lm(n, 0, function (t, n) {\n          var e,\n              o = n;\n          Jt(e = t, r).fold(function () {\n            Te(e, o);\n          }, function (t) {\n            Dn(t, o);\n          });\n        }, t);\n      }), t;\n    });\n  }\n\n  function mm(t, n) {\n    var e, o;\n    return {\n      key: t,\n      value: {\n        config: {},\n        me: (e = t, o = eu(n), xa({\n          fields: [mo(\"enabled\")],\n          name: e,\n          active: {\n            events: rt(o)\n          }\n        })),\n        configAsRaw: rt({}),\n        initialConfig: {},\n        state: xu\n      }\n    };\n  }\n\n  function gm(t, n) {\n    n.ignore || (ka(t.element), n.onFocus(t));\n  }\n\n  function pm(t, n, e) {\n    var o = n.aria;\n    o.update(t, o, e.get());\n  }\n\n  function hm(n, t, e) {\n    t.toggleClass.each(function (t) {\n      (e.get() ? Yr : qr)(n.element, t);\n    });\n  }\n\n  function vm(t, n, e) {\n    Ym(t, n, e, !e.get());\n  }\n\n  function bm(t, n, e) {\n    e.set(!0), hm(t, n, e), pm(t, n, e);\n  }\n\n  function ym(t, n, e) {\n    e.set(!1), hm(t, n, e), pm(t, n, e);\n  }\n\n  function xm(t, n, e) {\n    Ym(t, n, e, n.selected);\n  }\n\n  function wm() {\n    function t(t, n) {\n      n.stop(), yr(t);\n    }\n\n    return [Cr(Ci(), t), Cr(Vi(), t), Dr(si()), Dr(mi())];\n  }\n\n  function Sm(t) {\n    return eu(ft([t.map(function (e) {\n      return uu(function (t, n) {\n        e(t), n.stop();\n      });\n    }).toArray(), wm()]));\n  }\n\n  function km(t) {\n    (_a(t.element).isNone() || Hg.isFocused(t)) && (Hg.isFocused(t) || Hg.focus(t), br(t, Wg, {\n      item: t\n    }));\n  }\n\n  function Cm(t) {\n    br(t, Ug, {\n      item: t\n    });\n  }\n\n  function Om(t, n) {\n    return t.x + t.width / 2 - n.width / 2;\n  }\n\n  function _m(t, n) {\n    return t.x + t.width - n.width;\n  }\n\n  function Tm(t, n) {\n    return t.y + t.height - n.height;\n  }\n\n  function Em(t, n) {\n    return t.y + t.height / 2 - n.height / 2;\n  }\n\n  function Dm(t, n, e) {\n    return ea(_m(t, n), Tm(t, n), e.insetSouthwest(), za(), \"southwest\", ra(t, {\n      right: 0,\n      bottom: 3\n    }), ap);\n  }\n\n  function Bm(t, n, e) {\n    return ea(t.x, Tm(t, n), e.insetSoutheast(), Ha(), \"southeast\", ra(t, {\n      left: 1,\n      bottom: 3\n    }), ap);\n  }\n\n  function Mm(t, n, e) {\n    return ea(_m(t, n), t.y, e.insetNorthwest(), Pa(), \"northwest\", ra(t, {\n      right: 0,\n      top: 2\n    }), ap);\n  }\n\n  function Am(t, n, e) {\n    return ea(t.x, t.y, e.insetNortheast(), Va(), \"northeast\", ra(t, {\n      left: 1,\n      top: 2\n    }), ap);\n  }\n\n  function Fm(t, n, e) {\n    return ea(_m(t, n), Em(t, n), e.insetEast(), Ua(), \"east\", ra(t, {\n      right: 0\n    }), ap);\n  }\n\n  function Im(t, n, e) {\n    return ea(t.x, Em(t, n), e.insetWest(), Wa(), \"west\", ra(t, {\n      left: 1\n    }), ap);\n  }\n\n  function Rm(t) {\n    switch (t) {\n      case \"north\":\n        return cp;\n\n      case \"northeast\":\n        return Am;\n\n      case \"northwest\":\n        return Mm;\n\n      case \"south\":\n        return sp;\n\n      case \"southeast\":\n        return Bm;\n\n      case \"southwest\":\n        return Dm;\n\n      case \"east\":\n        return Fm;\n\n      case \"west\":\n        return Im;\n    }\n  }\n\n  function Vm(t, n, e, o, r) {\n    return sc(o).map(Rm).getOr(cp)(t, n, e, o, r);\n  }\n\n  function Pm(t) {\n    switch (t) {\n      case \"north\":\n        return sp;\n\n      case \"northeast\":\n        return Bm;\n\n      case \"northwest\":\n        return Dm;\n\n      case \"south\":\n        return cp;\n\n      case \"southeast\":\n        return Am;\n\n      case \"southwest\":\n        return Mm;\n\n      case \"east\":\n        return Im;\n\n      case \"west\":\n        return Fm;\n    }\n  }\n\n  function Hm(t, n, e, o, r) {\n    return sc(o).map(Pm).getOr(cp)(t, n, e, o, r);\n  }\n\n  function zm(t) {\n    var n = void 0 !== t.uid && nt(t, \"uid\") ? t.uid : pu(\"memento\");\n    return {\n      get: function get(t) {\n        return t.getSystem().getByUid(n).getOrDie();\n      },\n      getOpt: function getOpt(t) {\n        return t.getSystem().getByUid(n).toOptional();\n      },\n      asSpec: function asSpec() {\n        return _lt(_lt({}, t), {\n          uid: n\n        });\n      }\n    };\n  }\n\n  function Nm(t) {\n    return function () {\n      return tt(t, gp).getOr(\"!not found!\");\n    };\n  }\n\n  function Lm(t, n) {\n    var e,\n        o = t.toLowerCase();\n\n    if (dp.isRtl()) {\n      var r = Bt(e = o, \"-rtl\") ? e : e + \"-rtl\";\n      return Tt(n, r) ? r : o;\n    }\n\n    return o;\n  }\n\n  function Wm(t, n) {\n    return tt(n, Lm(t, n));\n  }\n\n  function Um(t, n) {\n    var e = n();\n    return Wm(t, e).getOrThunk(Nm(e));\n  }\n\n  function jm() {\n    return mm(\"add-focusable\", [ou(function (t) {\n      var n, e, o;\n      n = t.element, e = \"svg\", o = function o(t) {\n        return zt(t, e);\n      }, V(n.dom.childNodes, function (t) {\n        return o(At.fromDom(t));\n      }).map(At.fromDom).each(function (t) {\n        return on(t, \"focusable\", \"false\");\n      });\n    })]);\n  }\n\n  function Gm(t, n, e, o) {\n    var r,\n        i,\n        u,\n        a = (u = n, dp.isRtl() && Tt(mp, u) ? [\"tox-icon--flip\"] : []),\n        c = tt(e, Lm(n, e)).or(o).getOrThunk(Nm(e));\n    return {\n      dom: {\n        tag: t.tag,\n        attributes: null !== (r = t.attributes) && void 0 !== r ? r : {},\n        classes: t.classes.concat(a),\n        innerHtml: c\n      },\n      behaviours: nc(H(H([], null !== (i = t.behaviours) && void 0 !== i ? i : [], !0), [jm()], !1))\n    };\n  }\n\n  function Xm(t, n, e, o) {\n    return void 0 === o && (o = vt.none()), Gm(n, t, e(), o);\n  }\n\n  (tf = Zl = Zl || {}).OnFocusMode = \"onFocus\", tf.OnEnterOrSpaceMode = \"onEnterOrSpace\", tf.OnApiMode = \"onApi\";\n\n  function Ym(t, n, e, o) {\n    (o ? bm : ym)(t, n, e);\n  }\n\n  function qm(t, n, e) {\n    on(t.element, \"aria-expanded\", e);\n  }\n\n  function Km(t) {\n    return \"prepared\" === t.type ? vt.some(t.menu) : vt.none();\n  }\n\n  var Jm = Ed(cr(\"cyclic\", T)),\n      $m = Ed(cr(\"cyclic\", D)),\n      Qm = Td([Eo(\"execute\", Dd), Eo(\"useSpace\", !1), Eo(\"useEnter\", !0), Eo(\"useControlEnter\", !1), Eo(\"useDown\", !1)], xu.init, function (t, n, e, o) {\n    var r = e.useSpace && !Ol(t.element) ? wd : [],\n        i = e.useEnter ? yd : [],\n        u = e.useDown ? Od : [];\n    return [Nl(Vl(r.concat(i).concat(u)), Md)].concat(e.useControlEnter ? [Nl(Pl([zl, Vl(yd)]), Md)] : []);\n  }, function (t, n, e, o) {\n    return e.useSpace && !Ol(t.element) ? [Nl(Vl(wd), Bd)] : [];\n  }, function () {\n    return vt.none();\n  }),\n      Zm = Object.freeze({\n    __proto__: null,\n    flatgrid: Ad,\n    init: function init(t) {\n      return t.state(t);\n    }\n  }),\n      tg = function tg(n, e, t, o, r) {\n    return o.focusManager.get(e).bind(function (t) {\n      return n(e.element, t, o, r);\n    }).map(function (t) {\n      return o.focusManager.set(e, t), !0;\n    });\n  },\n      ng = Vd,\n      eg = Vd,\n      og = Vd,\n      rg = jd(function (t, n, e, o) {\n    return Ld(t, n, e, o, -1);\n  }),\n      ig = jd(function (t, n, e, o) {\n    return Ld(t, n, e, o, 1);\n  }),\n      ug = jd(function (t, n, e, o) {\n    return Wd(t, n, e, o, -1);\n  }),\n      ag = jd(function (t, n, e, o) {\n    return Wd(t, n, e, o, 1);\n  }),\n      cg = Td([mo(\"selector\"), Eo(\"execute\", Dd), $u(\"onEscape\"), Eo(\"captureTab\", !1), Ia()], Ad, rt([Nl(Vl(Sd), Id(rg, ig)), Nl(Vl(Cd), Rd(rg, ig)), Nl(Vl(kd), ng(ug)), Nl(Vl(Od), eg(ag)), Nl(Pl([Hl, Vl(bd)]), Gd), Nl(Pl([_d, Vl(bd)]), Gd), Nl(Vl(xd), function (t, n, e) {\n    return e.onEscape(t, n);\n  }), Nl(Vl(wd.concat(yd)), function (n, e, o, t) {\n    return (r = o).focusManager.get(n).bind(function (t) {\n      return Ru(t, r.selector);\n    }).bind(function (t) {\n      return o.execute(n, e, t);\n    });\n    var r;\n  })]), rt([Nl(Vl(wd), Bd)]), function () {\n    return vt.some(Ud);\n  }),\n      sg = [mo(\"selector\"), Eo(\"getInitial\", vt.none), Eo(\"execute\", Dd), $u(\"onEscape\"), Eo(\"executeOnMove\", !1), Eo(\"allowVertical\", !0)],\n      lg = rt([Nl(Vl(wd), Bd)]),\n      fg = Td(sg, xu.init, function (t, n, e, o) {\n    var r = Sd.concat(e.allowVertical ? kd : []),\n        i = Cd.concat(e.allowVertical ? Od : []);\n    return [Nl(Vl(r), $d(Id(Kd, Jd))), Nl(Vl(i), $d(Rd(Kd, Jd))), Nl(Vl(yd), Yd), Nl(Vl(wd), Yd), Nl(Vl(xd), Qd)];\n  }, lg, function () {\n    return vt.some(qd);\n  }),\n      dg = [bo(\"selectors\", [mo(\"row\"), mo(\"cell\")]), Eo(\"cycles\", !0), Eo(\"previousSelector\", vt.none), Eo(\"execute\", Dd)],\n      mg = im(function (t, n, e) {\n    return tm(t, n, e, -1);\n  }, function (t, n, e) {\n    return em(t, n, e, -1);\n  }),\n      gg = im(function (t, n, e) {\n    return tm(t, n, e, 1);\n  }, function (t, n, e) {\n    return em(t, n, e, 1);\n  }),\n      pg = im(function (t, n, e) {\n    return nm(t, e, n, -1);\n  }, function (t, n, e) {\n    return om(t, e, n, -1);\n  }),\n      hg = im(function (t, n, e) {\n    return nm(t, e, n, 1);\n  }, function (t, n, e) {\n    return om(t, e, n, 1);\n  }),\n      vg = rt([Nl(Vl(Sd), Id(mg, gg)), Nl(Vl(Cd), Rd(mg, gg)), Nl(Vl(kd), ng(pg)), Nl(Vl(Od), eg(hg)), Nl(Vl(wd.concat(yd)), function (n, e, o) {\n    return _a(n.element).bind(function (t) {\n      return o.execute(n, e, t);\n    });\n  })]),\n      bg = rt([Nl(Vl(wd), Bd)]),\n      yg = Td(dg, xu.init, vg, bg, function () {\n    return vt.some(rm);\n  }),\n      xg = [mo(\"selector\"), Eo(\"execute\", Dd), Eo(\"moveOnTab\", !1)],\n      wg = rt([Nl(Vl(kd), og(cm)), Nl(Vl(Od), og(sm)), Nl(Pl([Hl, Vl(bd)]), function (t, n, e, o) {\n    return e.moveOnTab ? og(cm)(t, n, e, o) : vt.none();\n  }), Nl(Pl([_d, Vl(bd)]), function (t, n, e, o) {\n    return e.moveOnTab ? og(sm)(t, n, e, o) : vt.none();\n  }), Nl(Vl(yd), um), Nl(Vl(wd), um)]),\n      Sg = rt([Nl(Vl(wd), Bd)]),\n      kg = Td(xg, xu.init, wg, Sg, function () {\n    return vt.some(am);\n  }),\n      Cg = Td([$u(\"onSpace\"), $u(\"onEnter\"), $u(\"onShiftEnter\"), $u(\"onLeft\"), $u(\"onRight\"), $u(\"onTab\"), $u(\"onShiftTab\"), $u(\"onUp\"), $u(\"onDown\"), $u(\"onEscape\"), Eo(\"stopSpaceKeyup\", !1), wo(\"focusIn\")], xu.init, function (t, n, e) {\n    return [Nl(Vl(wd), e.onSpace), Nl(Pl([_d, Vl(yd)]), e.onEnter), Nl(Pl([Hl, Vl(yd)]), e.onShiftEnter), Nl(Pl([Hl, Vl(bd)]), e.onShiftTab), Nl(Pl([_d, Vl(bd)]), e.onTab), Nl(Vl(kd), e.onUp), Nl(Vl(Od), e.onDown), Nl(Vl(Sd), e.onLeft), Nl(Vl(Cd), e.onRight), Nl(Vl(wd), e.onSpace), Nl(Vl(xd), e.onEscape)];\n  }, function (t, n, e) {\n    return e.stopSpaceKeyup ? [Nl(Vl(wd), Bd)] : [];\n  }, function (t) {\n    return t.focusIn;\n  }),\n      Og = Jm.schema(),\n      _g = $m.schema(),\n      Tg = fg.schema(),\n      Eg = cg.schema(),\n      Dg = yg.schema(),\n      Bg = Qm.schema(),\n      Mg = kg.schema(),\n      Ag = Cg.schema(),\n      Fg = wa({\n    branchKey: \"mode\",\n    branches: Object.freeze({\n      __proto__: null,\n      acyclic: Og,\n      cyclic: _g,\n      flow: Tg,\n      flatgrid: Eg,\n      matrix: Dg,\n      execution: Bg,\n      menu: Mg,\n      special: Ag\n    }),\n    name: \"keying\",\n    active: {\n      events: function events(t, n) {\n        return t.handler.toEvents(t, n);\n      }\n    },\n    apis: {\n      focusIn: function focusIn(n, e, o) {\n        e.sendFocusIn(e).fold(function () {\n          n.getSystem().triggerFocus(n.element, n.element);\n        }, function (t) {\n          t(n, e, o);\n        });\n      },\n      setGridSize: function setGridSize(t, n, e, o, r) {\n        nt(e, \"setGridSize\") ? e.setGridSize(o, r) : console.error(\"Layout does not support setGridSize\");\n      }\n    },\n    state: Zm\n  }),\n      Ig = function Ig(t, n) {\n    return t.components();\n  },\n      Rg = xa({\n    fields: [],\n    name: \"replacing\",\n    apis: Object.freeze({\n      __proto__: null,\n      append: function append(t, n, e, o) {\n        lm(t, 0, Te, o);\n      },\n      prepend: function prepend(t, n, e, o) {\n        lm(t, 0, Mn, o);\n      },\n      remove: fm,\n      replaceAt: dm,\n      replaceBy: function replaceBy(n, t, e, o, r) {\n        return P(Ig(n), o).bind(function (t) {\n          return dm(n, 0, 0, t, r);\n        });\n      },\n      set: function set(n, t, e, o) {\n        Ta(function () {\n          var t = M(o, n.getSystem().build);\n          Rs(n, t);\n        }, n.element);\n      },\n      contents: Ig\n    })\n  }),\n      Vg = Object.freeze({\n    __proto__: null,\n    focus: gm,\n    blur: function blur(t, n) {\n      n.ignore || t.element.dom.blur();\n    },\n    isFocused: function isFocused(t) {\n      return Ca(t.element);\n    }\n  }),\n      Pg = Object.freeze({\n    __proto__: null,\n    exhibit: function exhibit(t, n) {\n      return Lr(n.ignore ? {} : {\n        attributes: {\n          tabindex: \"-1\"\n        }\n      });\n    },\n    events: function events(e) {\n      return eu([Cr(Bi(), function (t, n) {\n        gm(t, e), n.stop();\n      })].concat(e.stopMousedown ? [Cr(mi(), function (t, n) {\n        n.event.prevent();\n      })] : []));\n    }\n  }),\n      Hg = xa({\n    fields: [Ju(\"onFocus\"), Eo(\"stopMousedown\", !1), Eo(\"ignore\", !1)],\n    name: \"focusing\",\n    active: Pg,\n    apis: Vg\n  }),\n      zg = Object.freeze({\n    __proto__: null,\n    onLoad: xm,\n    toggle: vm,\n    isOn: function isOn(t, n, e) {\n      return e.get();\n    },\n    on: bm,\n    off: ym,\n    set: Ym\n  }),\n      Ng = Object.freeze({\n    __proto__: null,\n    exhibit: function exhibit() {\n      return Lr({});\n    },\n    events: function events(t, n) {\n      var e,\n          o,\n          r,\n          i = (e = t, o = n, r = vm, uu(function (t) {\n        r(t, e, o);\n      })),\n          u = ba(t, n, xm);\n      return eu(ft([t.toggleOnExecute ? [i] : [], [u]]));\n    }\n  }),\n      Lg = xa({\n    fields: [Eo(\"selected\", !1), wo(\"toggleClass\"), Eo(\"toggleOnExecute\", !0), Do(\"aria\", {\n      mode: \"none\"\n    }, lo(\"mode\", {\n      pressed: [Eo(\"syncWithExpanded\", !1), ta(\"update\", function (t, n, e) {\n        on(t.element, \"aria-pressed\", e), n.syncWithExpanded && qm(t, 0, e);\n      })],\n      checked: [ta(\"update\", function (t, n, e) {\n        on(t.element, \"aria-checked\", e);\n      })],\n      expanded: [ta(\"update\", qm)],\n      selected: [ta(\"update\", function (t, n, e) {\n        on(t.element, \"aria-selected\", e);\n      })],\n      none: [ta(\"update\", st)]\n    }))],\n    name: \"toggling\",\n    active: Ng,\n    apis: zg,\n    state: {\n      init: function init() {\n        var n = Po(!1);\n        return {\n          get: function get() {\n            return n.get();\n          },\n          set: function set(t) {\n            return n.set(t);\n          },\n          clear: function clear() {\n            return n.set(!1);\n          },\n          readState: function readState() {\n            return n.get();\n          }\n        };\n      }\n    }\n  }),\n      Wg = \"alloy.item-hover\",\n      Ug = \"alloy.item-focus\",\n      jg = rt(Wg),\n      Gg = rt(Ug),\n      Xg = [mo(\"data\"), mo(\"components\"), mo(\"dom\"), Eo(\"hasSubmenu\", !1), wo(\"toggling\"), Bf(\"itemBehaviours\", [Lg, Hg, Fg, Df]), Eo(\"ignoreFocus\", !1), Eo(\"domModification\", {}), ta(\"builder\", function (t) {\n    return {\n      dom: t.dom,\n      domModification: _lt(_lt({}, t.domModification), {\n        attributes: _lt(_lt(_lt({\n          role: t.toggling.isSome() ? \"menuitemcheckbox\" : \"menuitem\"\n        }, t.domModification.attributes), {\n          \"aria-haspopup\": t.hasSubmenu\n        }), t.hasSubmenu ? {\n          \"aria-expanded\": !1\n        } : {})\n      }),\n      behaviours: Mf(t.itemBehaviours, [t.toggling.fold(Lg.revoke, function (t) {\n        return Lg.config(_lt({\n          aria: {\n            mode: \"checked\"\n          }\n        }, t));\n      }), Hg.config({\n        ignore: t.ignoreFocus,\n        stopMousedown: t.ignoreFocus,\n        onFocus: function onFocus(t) {\n          Cm(t);\n        }\n      }), Fg.config({\n        mode: \"execution\"\n      }), Df.config({\n        store: {\n          mode: \"memory\",\n          initialValue: t.data\n        }\n      }), mm(\"item-type-events\", H(H([], wm(), !0), [Cr(vi(), km), Cr(Ri(), Hg.focus)], !1))]),\n      components: t.components,\n      eventOrder: t.eventOrder\n    };\n  }), Eo(\"eventOrder\", {})],\n      Yg = [mo(\"dom\"), mo(\"components\"), ta(\"builder\", function (t) {\n    return {\n      dom: t.dom,\n      components: t.components,\n      events: eu([Cr(Ri(), function (t, n) {\n        n.stop();\n      })])\n    };\n  })],\n      qg = rt(\"item-widget\"),\n      Kg = rt([Jf({\n    name: \"widget\",\n    overrides: function overrides(n) {\n      return {\n        behaviours: nc([Df.config({\n          store: {\n            mode: \"manual\",\n            getValue: function getValue(t) {\n              return n.data;\n            },\n            setValue: st\n          }\n        })])\n      };\n    }\n  })]),\n      Jg = lo(\"type\", {\n    widget: [mo(\"uid\"), mo(\"data\"), mo(\"components\"), mo(\"dom\"), Eo(\"autofocus\", !1), Eo(\"ignoreFocus\", !1), Bf(\"widgetBehaviours\", [Df, Hg, Fg]), Eo(\"domModification\", {}), xl(Kg()), ta(\"builder\", function (e) {\n      function o(t) {\n        return ml(t, e, \"widget\").map(function (t) {\n          return Fg.focusIn(t), t;\n        });\n      }\n\n      function t(t, n) {\n        return Ol(n.event.target) || e.autofocus && n.setSource(t.element), vt.none();\n      }\n\n      var n = fl(qg(), e, Kg()),\n          r = dl(qg(), e, n.internals());\n      return {\n        dom: e.dom,\n        components: r,\n        domModification: e.domModification,\n        events: eu([uu(function (t, n) {\n          o(t).each(function (t) {\n            n.stop();\n          });\n        }), Cr(vi(), km), Cr(Ri(), function (t, n) {\n          e.autofocus ? o(t) : Hg.focus(t);\n        })]),\n        behaviours: Mf(e.widgetBehaviours, [Df.config({\n          store: {\n            mode: \"memory\",\n            initialValue: e.data\n          }\n        }), Hg.config({\n          ignore: e.ignoreFocus,\n          onFocus: function onFocus(t) {\n            Cm(t);\n          }\n        }), Fg.config({\n          mode: \"special\",\n          focusIn: e.autofocus ? function (t) {\n            o(t);\n          } : rc(),\n          onLeft: t,\n          onRight: t,\n          onEscape: function onEscape(t, n) {\n            return Hg.isFocused(t) || e.autofocus ? (e.autofocus && n.setSource(t.element), vt.none()) : (Hg.focus(t), vt.some(!0));\n          }\n        })])\n      };\n    })],\n    item: Xg,\n    separator: Yg\n  }),\n      $g = rt([Zf({\n    factory: {\n      sketch: function sketch(t) {\n        var n = so(\"menu.spec item\", Jg, t);\n        return n.builder(n);\n      }\n    },\n    name: \"items\",\n    unit: \"item\",\n    defaults: function defaults(t, n) {\n      return Tt(n, \"uid\") ? n : _lt(_lt({}, n), {\n        uid: pu(\"item\")\n      });\n    },\n    overrides: function overrides(t, n) {\n      return {\n        type: n.type,\n        ignoreFocus: t.fakeFocus,\n        domModification: {\n          classes: [t.markers.item]\n        }\n      };\n    }\n  })]),\n      Qg = rt([mo(\"value\"), mo(\"items\"), mo(\"dom\"), mo(\"components\"), Eo(\"eventOrder\", {}), Zs(\"menuBehaviours\", [hd, Df, cd, Fg]), Do(\"movement\", {\n    mode: \"menu\",\n    moveOnTab: !0\n  }, lo(\"mode\", {\n    grid: [Ia(), ta(\"config\", function (t, n) {\n      return {\n        mode: \"flatgrid\",\n        selector: \".\" + t.markers.item,\n        initSize: {\n          numColumns: n.initSize.numColumns,\n          numRows: n.initSize.numRows\n        },\n        focusManager: t.focusManager\n      };\n    })],\n    matrix: [ta(\"config\", function (t, n) {\n      return {\n        mode: \"matrix\",\n        selectors: {\n          row: n.rowSelector,\n          cell: \".\" + t.markers.item\n        },\n        focusManager: t.focusManager\n      };\n    }), mo(\"rowSelector\")],\n    menu: [Eo(\"moveOnTab\", !0), ta(\"config\", function (t, n) {\n      return {\n        mode: \"menu\",\n        selector: \".\" + t.markers.item,\n        moveOnTab: n.moveOnTab,\n        focusManager: t.focusManager\n      };\n    })]\n  })), go(\"markers\", Fa()), Eo(\"fakeFocus\", !1), Eo(\"focusManager\", Wl()), Ju(\"onHighlight\")]),\n      Zg = rt(\"alloy.menu-focus\"),\n      tp = Cl({\n    name: \"Menu\",\n    configFields: Qg(),\n    partFields: $g(),\n    factory: function factory(t, n, e, o) {\n      return {\n        uid: t.uid,\n        dom: t.dom,\n        markers: t.markers,\n        behaviours: nl(t.menuBehaviours, [hd.config({\n          highlightClass: t.markers.selectedItem,\n          itemClass: t.markers.item,\n          onHighlight: t.onHighlight\n        }), Df.config({\n          store: {\n            mode: \"memory\",\n            initialValue: t.value\n          }\n        }), cd.config({\n          find: vt.some\n        }), Fg.config(t.movement.config(t, t.movement))]),\n        events: eu([Cr(Gg(), function (n, e) {\n          var t = e.event;\n          n.getSystem().getByDom(t.target).each(function (t) {\n            hd.highlight(n, t), e.stop(), br(n, Zg(), {\n              menu: n,\n              item: t\n            });\n          });\n        }), Cr(jg(), function (t, n) {\n          var e = n.event.item;\n          hd.highlight(t, e);\n        })]),\n        components: n,\n        eventOrder: t.eventOrder,\n        domModification: {\n          attributes: {\n            role: \"menu\"\n          }\n        }\n      };\n    }\n  }),\n      np = function np(e, o, r, t) {\n    return tt(r, t).bind(function (t) {\n      return tt(e, t).bind(function (t) {\n        var n = np(e, o, r, t);\n        return vt.some([t].concat(n));\n      });\n    }).getOr([]);\n  },\n      ep = function ep() {\n    function a(t) {\n      return n(t).bind(Km);\n    }\n\n    function e(t) {\n      return tt(c.get(), t);\n    }\n\n    var c = Po({}),\n        i = Po({}),\n        s = Po({}),\n        l = gc(),\n        u = Po({}),\n        n = function n(t) {\n      return tt(i.get(), t);\n    };\n\n    return {\n      setMenuBuilt: function setMenuBuilt(t, n) {\n        var e;\n        i.set(_lt(_lt({}, i.get()), ((e = {})[t] = {\n          type: \"prepared\",\n          menu: n\n        }, e)));\n      },\n      setContents: function setContents(t, n, e, o) {\n        l.set(t), c.set(e), i.set(n), u.set(o);\n\n        var r = function (t, n) {\n          var e = {};\n          J(t, function (t, n) {\n            St(t, function (t) {\n              e[t] = n;\n            });\n          });\n\n          var o = n,\n              r = _t(n, function (t, n) {\n            return {\n              k: t,\n              v: n\n            };\n          }),\n              i = dt(r, function (t, n) {\n            return [n].concat(np(e, o, r, n));\n          });\n\n          return dt(e, function (t) {\n            return tt(i, t).getOr([t]);\n          });\n        }(o, e);\n\n        s.set(r);\n      },\n      expand: function expand(e) {\n        return tt(c.get(), e).map(function (t) {\n          var n = tt(s.get(), e).getOr([]);\n          return [t].concat(n);\n        });\n      },\n      refresh: function refresh(t) {\n        return tt(s.get(), t);\n      },\n      collapse: function collapse(t) {\n        return tt(s.get(), t).bind(function (t) {\n          return 1 < t.length ? vt.some(t.slice(1)) : vt.none();\n        });\n      },\n      lookupMenu: n,\n      lookupItem: e,\n      otherMenus: function otherMenus(t) {\n        var n = u.get();\n        return W(Ct(n), t);\n      },\n      getPrimary: function getPrimary() {\n        return l.get().bind(a);\n      },\n      getMenus: function getMenus() {\n        return i.get();\n      },\n      clear: function clear() {\n        c.set({}), i.set({}), s.set({}), l.clear();\n      },\n      isClear: function isClear() {\n        return l.get().isNone();\n      },\n      getTriggeringPath: function getTriggeringPath(t, u) {\n        var n = F(e(t).toArray(), function (t) {\n          return a(t).isSome();\n        });\n        return tt(s.get(), t).bind(function (t) {\n          var e = L(n.concat(t));\n          return function (t) {\n            for (var n = [], e = 0; e < t.length; e++) {\n              var o = t[e];\n              if (!o.isSome()) return vt.none();\n              n.push(o.getOrDie());\n            }\n\n            return vt.some(n);\n          }(z(e, function (t, n) {\n            return o = t, r = u, i = e.slice(0, n + 1), a(o).bind(function (n) {\n              return e = o, Q(c.get(), function (t, n) {\n                return t === e;\n              }).bind(function (t) {\n                return r(t).map(function (t) {\n                  return {\n                    triggeredMenu: n,\n                    triggeringItem: t,\n                    triggeringPath: i\n                  };\n                });\n              });\n              var e;\n            }).fold(function () {\n              return mt(l.get(), t) ? [] : [vt.none()];\n            }, function (t) {\n              return [vt.some(t)];\n            });\n            var o, r, i;\n          }));\n        });\n      }\n    };\n  },\n      op = Km,\n      rp = rt(\"collapse-item\"),\n      ip = kl({\n    name: \"TieredMenu\",\n    configFields: [Zu(\"onExecute\"), Zu(\"onEscape\"), Qu(\"onOpenMenu\"), Qu(\"onOpenSubmenu\"), Ju(\"onRepositionMenu\"), Ju(\"onCollapseMenu\"), Eo(\"highlightImmediately\", !0), bo(\"data\", [mo(\"primary\"), mo(\"menus\"), mo(\"expansions\")]), Eo(\"fakeFocus\", !1), Ju(\"onHighlight\"), Ju(\"onHover\"), Yu(), mo(\"dom\"), Eo(\"navigateOnHover\", !0), Eo(\"stayInDom\", !1), Zs(\"tmenuBehaviours\", [Fg, hd, cd, Rg]), Eo(\"eventOrder\", {})],\n    apis: {\n      collapseMenu: function collapseMenu(t, n) {\n        t.collapseMenu(n);\n      },\n      highlightPrimary: function highlightPrimary(t, n) {\n        t.highlightPrimary(n);\n      },\n      repositionMenus: function repositionMenus(t, n) {\n        t.repositionMenus(n);\n      }\n    },\n    factory: function factory(a, t) {\n      function e(t) {\n        var o,\n            r,\n            n = (o = t, r = a.data.primary, dt(a.data.menus, function (t, n) {\n          function e() {\n            return tp.sketch(_lt(_lt({}, t), {\n              value: n,\n              markers: a.markers,\n              fakeFocus: a.fakeFocus,\n              onHighlight: a.onHighlight,\n              focusManager: (a.fakeFocus ? Ul : Wl)()\n            }));\n          }\n\n          return n === r ? {\n            type: \"prepared\",\n            menu: o.getSystem().build(e())\n          } : {\n            type: \"notbuilt\",\n            nbMenu: e\n          };\n        })),\n            e = dt(a.data.menus, function (t, n) {\n          return z(t.items, function (t) {\n            return \"separator\" === t.type ? [] : [t.data.value];\n          });\n        });\n        return g.setContents(a.data.primary, n, a.data.expansions, e), g.getPrimary();\n      }\n\n      function c(t) {\n        return Df.getValue(t).value;\n      }\n\n      function u(n, t) {\n        hd.highlight(n, t), hd.getHighlighted(t).orThunk(function () {\n          return hd.getFirst(t);\n        }).each(function (t) {\n          xr(n, t.element, Ri());\n        });\n      }\n\n      function s(n, t) {\n        return et(M(t, function (t) {\n          return n.lookupMenu(t).bind(function (t) {\n            return \"prepared\" === t.type ? vt.some(t.menu) : vt.none();\n          });\n        }));\n      }\n\n      function l(n, t, e) {\n        var o = s(t, t.otherMenus(e));\n        St(o, function (t) {\n          $r(t.element, [a.markers.backgroundMenu]), a.stayInDom || Rg.remove(n, t);\n        });\n      }\n\n      function f(t, o) {\n        var n;\n        J((n = t, r.get().getOrThunk(function () {\n          var e = {},\n              t = F(vs(n.element, \".\" + a.markers.item), function (t) {\n            return \"true\" === un(t, \"aria-haspopup\");\n          });\n          return St(t, function (t) {\n            n.getSystem().getByDom(t).each(function (t) {\n              var n = c(t);\n              e[n] = t;\n            });\n          }), r.set(e), e;\n        })), function (t, n) {\n          var e = wt(o, n);\n          on(t.element, \"aria-expanded\", e);\n        });\n      }\n\n      function d(o, r, i) {\n        return vt.from(i[0]).bind(function (t) {\n          return r.lookupMenu(t).bind(function (t) {\n            if (\"notbuilt\" === t.type) return vt.none();\n            var n = t.menu,\n                e = s(r, i.slice(1));\n            return St(e, function (t) {\n              Yr(t.element, a.markers.backgroundMenu);\n            }), ve(n.element) || Rg.append(o, Eu(n)), $r(n.element, [a.markers.backgroundMenu]), u(o, n), l(o, r, i), vt.some(n);\n          });\n        });\n      }\n\n      var m,\n          n,\n          r = gc(),\n          g = ep();\n\n      function i(r, i, u) {\n        if (void 0 === u && (u = m.HighlightSubmenu), i.hasConfigured(gd) && gd.isDisabled(i)) return vt.some(i);\n        var t = c(i);\n        return g.expand(t).bind(function (o) {\n          return f(r, o), vt.from(o[0]).bind(function (e) {\n            return g.lookupMenu(e).bind(function (t) {\n              var n = function (t, n, e) {\n                if (\"notbuilt\" !== e.type) return e.menu;\n                var o = t.getSystem().build(e.nbMenu());\n                return g.setMenuBuilt(n, o), o;\n              }(r, e, t);\n\n              return ve(n.element) || Rg.append(r, Eu(n)), a.onOpenSubmenu(r, i, n, L(o)), u === m.HighlightSubmenu ? (hd.highlightFirst(n), d(r, g, o)) : (hd.dehighlightAll(n), vt.some(i));\n            });\n          });\n        });\n      }\n\n      function o(n, e) {\n        var t = c(e);\n        return g.collapse(t).bind(function (t) {\n          return f(n, t), d(n, g, t).map(function (t) {\n            return a.onCollapseMenu(n, e, t), t;\n          });\n        });\n      }\n\n      function p(e) {\n        return function (n, t) {\n          return Ru(t.getSource(), \".\" + a.markers.item).bind(function (t) {\n            return n.getSystem().getByDom(t).toOptional().bind(function (t) {\n              return e(n, t).map(D);\n            });\n          });\n        };\n      }\n\n      function h(t) {\n        return hd.getHighlighted(t).bind(hd.getHighlighted);\n      }\n\n      (n = m = {})[n.HighlightSubmenu = 0] = \"HighlightSubmenu\", n[n.HighlightParent = 1] = \"HighlightParent\";\n      var v = eu([Cr(Zg(), function (e, o) {\n        var t = o.event.item;\n        g.lookupItem(c(t)).each(function () {\n          var t = o.event.menu;\n          hd.highlight(e, t);\n          var n = c(o.event.item);\n          g.refresh(n).each(function (t) {\n            return l(e, g, t);\n          });\n        });\n      }), uu(function (n, t) {\n        var e = t.event.target;\n        n.getSystem().getByDom(e).each(function (t) {\n          0 === c(t).indexOf(\"collapse-item\") && o(n, t), i(n, t, m.HighlightSubmenu).fold(function () {\n            a.onExecute(n, t);\n          }, st);\n        });\n      }), ou(function (n, t) {\n        e(n).each(function (t) {\n          Rg.append(n, Eu(t)), a.onOpenMenu(n, t), a.highlightImmediately && u(n, t);\n        });\n      })].concat(a.navigateOnHover ? [Cr(jg(), function (t, n) {\n        var e = n.event.item,\n            o = t,\n            r = c(e);\n        g.refresh(r).bind(function (t) {\n          return f(o, t), d(o, g, t);\n        }), i(t, e, m.HighlightParent), a.onHover(t, e);\n      })] : [])),\n          b = {\n        collapseMenu: function collapseMenu(n) {\n          h(n).each(function (t) {\n            o(n, t);\n          });\n        },\n        highlightPrimary: function highlightPrimary(n) {\n          g.getPrimary().each(function (t) {\n            u(n, t);\n          });\n        },\n        repositionMenus: function repositionMenus(o) {\n          g.getPrimary().bind(function (n) {\n            return h(o).bind(function (t) {\n              var n = c(t),\n                  e = et(M(Z(g.getMenus()), op));\n              return g.getTriggeringPath(n, function (t) {\n                return n = t, K(e, function (t) {\n                  return t.getSystem().isConnected() ? V(hd.getCandidates(t), function (t) {\n                    return c(t) === n;\n                  }) : vt.none();\n                });\n                var n;\n              });\n            }).map(function (t) {\n              return {\n                primary: n,\n                triggeringPath: t\n              };\n            });\n          }).fold(function () {\n            vt.from(o.components()[0]).filter(function (t) {\n              return \"menu\" === un(t.element, \"role\");\n            }).each(function (t) {\n              a.onRepositionMenu(o, t, []);\n            });\n          }, function (t) {\n            var n = t.primary,\n                e = t.triggeringPath;\n            a.onRepositionMenu(o, n, e);\n          });\n        }\n      };\n      return {\n        uid: a.uid,\n        dom: a.dom,\n        markers: a.markers,\n        behaviours: nl(a.tmenuBehaviours, [Fg.config({\n          mode: \"special\",\n          onRight: p(function (t, n) {\n            return Ol(n.element) ? vt.none() : i(t, n, m.HighlightSubmenu);\n          }),\n          onLeft: p(function (t, n) {\n            return Ol(n.element) ? vt.none() : o(t, n);\n          }),\n          onEscape: p(function (t, n) {\n            return o(t, n).orThunk(function () {\n              return a.onEscape(t, n).map(function () {\n                return t;\n              });\n            });\n          }),\n          focusIn: function focusIn(n, t) {\n            g.getPrimary().each(function (t) {\n              xr(n, t.element, Ri());\n            });\n          }\n        }), hd.config({\n          highlightClass: a.markers.selectedMenu,\n          itemClass: a.markers.menu\n        }), cd.config({\n          find: function find(t) {\n            return hd.getHighlighted(t);\n          }\n        }), Rg.config({})]),\n        eventOrder: a.eventOrder,\n        apis: b,\n        events: v\n      };\n    },\n    extraApis: {\n      tieredData: function tieredData(t, n, e) {\n        return {\n          primary: t,\n          menus: n,\n          expansions: e\n        };\n      },\n      singleData: function singleData(t, n) {\n        return {\n          primary: t,\n          menus: sr(t, n),\n          expansions: {}\n        };\n      },\n      collapseItem: function collapseItem(t) {\n        return {\n          value: Ir(rp()),\n          meta: {\n            text: t\n          }\n        };\n      }\n    }\n  }),\n      up = kl({\n    name: \"InlineView\",\n    configFields: [mo(\"lazySink\"), Ju(\"onShow\"), Ju(\"onHide\"), Oo(\"onEscape\"), Zs(\"inlineBehaviours\", [bf, Df, ic]), To(\"fireDismissalEventInstead\", [Eo(\"event\", Yi())]), To(\"fireRepositionEventInstead\", [Eo(\"event\", qi())]), Eo(\"getRelated\", vt.none), Eo(\"isExtraPart\", T), Eo(\"eventOrder\", vt.none)],\n    factory: function factory(d, t) {\n      function n(e) {\n        bf.isOpen(e) && Df.getValue(e).each(function (t) {\n          switch (t.mode) {\n            case \"menu\":\n              bf.getState(e).each(ip.repositionMenus);\n              break;\n\n            case \"position\":\n              var n = d.lazySink(e).getOrDie();\n              ff.positionWithinBounds(n, e, t.config, t.getBounds());\n          }\n        });\n      }\n\n      function o(t, n, e, o) {\n        i(t, n, e, function () {\n          return o.map(function (t) {\n            return Ae(t);\n          });\n        });\n      }\n\n      function r(t, n, e, o) {\n        var r,\n            i,\n            u,\n            a,\n            c,\n            s = (r = d, i = t, u = n, a = o, c = \"horizontal\" === e.type ? {\n          layouts: {\n            onLtr: ha,\n            onRtl: va\n          }\n        } : {}, ip.sketch({\n          dom: {\n            tag: \"div\"\n          },\n          data: e.data,\n          markers: e.menu.markers,\n          highlightImmediately: e.menu.highlightImmediately,\n          onEscape: function onEscape() {\n            return bf.close(i), r.onEscape.map(function (t) {\n              return t(i);\n            }), vt.some(!0);\n          },\n          onExecute: function onExecute() {\n            return vt.some(!0);\n          },\n          onOpenMenu: function onOpenMenu(t, n) {\n            ff.positionWithinBounds(l().getOrDie(), n, u, a());\n          },\n          onOpenSubmenu: function onOpenSubmenu(t, n, e, o) {\n            var r = l().getOrDie();\n            ff.position(r, e, {\n              anchor: _lt({\n                type: \"submenu\",\n                item: n\n              }, f(o))\n            });\n          },\n          onRepositionMenu: function onRepositionMenu(t, n, e) {\n            var o = l().getOrDie();\n            ff.positionWithinBounds(o, n, u, a()), St(e, function (t) {\n              var n = f(t.triggeringPath);\n              ff.position(o, t.triggeredMenu, {\n                anchor: _lt({\n                  type: \"submenu\",\n                  item: t.triggeringItem\n                }, n)\n              });\n            });\n          }\n        }));\n\n        function l() {\n          return r.lazySink(i);\n        }\n\n        function f(t) {\n          return 2 === t.length ? c : {};\n        }\n\n        bf.open(t, s), Df.setValue(t, vt.some({\n          mode: \"menu\",\n          menu: s\n        }));\n      }\n\n      var i = function i(t, n, e, o) {\n        var r = d.lazySink(t).getOrDie();\n        bf.openWhileCloaked(t, n, function () {\n          return ff.positionWithinBounds(r, t, e, o());\n        }), Df.setValue(t, vt.some({\n          mode: \"position\",\n          config: e,\n          getBounds: o\n        }));\n      },\n          e = {\n        setContent: function setContent(t, n) {\n          bf.setContent(t, n);\n        },\n        showAt: function showAt(t, n, e) {\n          o(t, n, e, vt.none());\n        },\n        showWithin: o,\n        showWithinBounds: i,\n        showMenuAt: function showMenuAt(t, n, e) {\n          r(t, n, e, vt.none);\n        },\n        showMenuWithinBounds: r,\n        hide: function hide(t) {\n          bf.isOpen(t) && (Df.setValue(t, vt.none()), bf.close(t));\n        },\n        getContent: function getContent(t) {\n          return bf.getState(t);\n        },\n        reposition: n,\n        isOpen: bf.isOpen\n      };\n\n      return {\n        uid: d.uid,\n        dom: d.dom,\n        behaviours: nl(d.inlineBehaviours, [bf.config({\n          isPartOf: function isPartOf(t, n, e) {\n            return zu(n, e) || (o = e, d.getRelated(t).exists(function (t) {\n              return zu(t, o);\n            }));\n            var o;\n          },\n          getAttachPoint: function getAttachPoint(t) {\n            return d.lazySink(t).getOrDie();\n          },\n          onOpen: function onOpen(t) {\n            d.onShow(t);\n          },\n          onClose: function onClose(t) {\n            d.onHide(t);\n          }\n        }), Df.config({\n          store: {\n            mode: \"memory\",\n            initialValue: vt.none()\n          }\n        }), ic.config({\n          channels: _lt(_lt({}, Xs(_lt({\n            isExtraPart: t.isExtraPart\n          }, d.fireDismissalEventInstead.map(function (t) {\n            return {\n              fireEventInstead: {\n                event: t.event\n              }\n            };\n          }).getOr({})))), Ys(_lt(_lt({}, d.fireRepositionEventInstead.map(function (t) {\n            return {\n              fireEventInstead: {\n                event: t.event\n              }\n            };\n          }).getOr({})), {\n            doReposition: n\n          })))\n        })]),\n        eventOrder: d.eventOrder,\n        apis: e\n      };\n    },\n    apis: {\n      showAt: function showAt(t, n, e, o) {\n        t.showAt(n, e, o);\n      },\n      showWithin: function showWithin(t, n, e, o, r) {\n        t.showWithin(n, e, o, r);\n      },\n      showWithinBounds: function showWithinBounds(t, n, e, o, r) {\n        t.showWithinBounds(n, e, o, r);\n      },\n      showMenuAt: function showMenuAt(t, n, e, o) {\n        t.showMenuAt(n, e, o);\n      },\n      showMenuWithinBounds: function showMenuWithinBounds(t, n, e, o, r) {\n        t.showMenuWithinBounds(n, e, o, r);\n      },\n      hide: function hide(t, n) {\n        t.hide(n);\n      },\n      isOpen: function isOpen(t, n) {\n        return t.isOpen(n);\n      },\n      getContent: function getContent(t, n) {\n        return t.getContent(n);\n      },\n      setContent: function setContent(t, n, e) {\n        t.setContent(n, e);\n      },\n      reposition: function reposition(t, n) {\n        t.reposition(n);\n      }\n    }\n  }),\n      ap = \"layout-inset\",\n      cp = function cp(t, n, e) {\n    return ea(Om(t, n), t.y, e.insetNorth(), Na(), \"north\", ra(t, {\n      top: 2\n    }), ap);\n  },\n      sp = function sp(t, n, e) {\n    return ea(Om(t, n), Tm(t, n), e.insetSouth(), La(), \"south\", ra(t, {\n      bottom: 3\n    }), ap);\n  },\n      lp = tinymce.util.Tools.resolve(\"tinymce.util.Delay\"),\n      fp = kl({\n    name: \"Button\",\n    factory: function factory(t) {\n      function e(n) {\n        return tt(t.dom, \"attributes\").bind(function (t) {\n          return tt(t, n);\n        });\n      }\n\n      var n = Sm(t.action),\n          o = t.dom.tag;\n      return {\n        uid: t.uid,\n        dom: t.dom,\n        components: t.components,\n        events: n,\n        behaviours: Mf(t.buttonBehaviours, [Hg.config({}), Fg.config({\n          mode: \"execution\",\n          useSpace: !0,\n          useEnter: !0\n        })]),\n        domModification: {\n          attributes: function () {\n            if (\"button\" !== o) return {\n              role: e(\"role\").getOr(\"button\")\n            };\n            var t = e(\"type\").getOr(\"button\"),\n                n = e(\"role\").map(function (t) {\n              return {\n                role: t\n              };\n            }).getOr({});\n            return _lt({\n              type: t\n            }, n);\n          }()\n        },\n        eventOrder: t.eventOrder\n      };\n    },\n    configFields: [Eo(\"uid\", void 0), mo(\"dom\"), Eo(\"components\", []), Bf(\"buttonBehaviours\", [Hg, Fg]), wo(\"action\"), wo(\"role\"), Eo(\"eventOrder\", {})]\n  }),\n      dp = tinymce.util.Tools.resolve(\"tinymce.util.I18n\"),\n      mp = {\n    indent: !0,\n    outdent: !0,\n    \"table-insert-column-after\": !0,\n    \"table-insert-column-before\": !0,\n    \"paste-column-after\": !0,\n    \"paste-column-before\": !0,\n    \"unordered-list\": !0,\n    \"list-bull-circle\": !0,\n    \"list-bull-default\": !0,\n    \"list-bull-square\": !0\n  },\n      gp = \"temporary-placeholder\",\n      pp = {\n    success: \"checkmark\",\n    error: \"warning\",\n    err: \"error\",\n    warning: \"warning\",\n    warn: \"warning\",\n    info: \"info\"\n  },\n      hp = kl({\n    name: \"Notification\",\n    factory: function factory(n) {\n      function e(t) {\n        return {\n          dom: {\n            tag: \"div\",\n            classes: [\"tox-bar\"],\n            attributes: {\n              style: \"width: \" + t + \"%\"\n            }\n          }\n        };\n      }\n\n      function o(t) {\n        return {\n          dom: {\n            tag: \"div\",\n            classes: [\"tox-text\"],\n            innerHtml: t + \"%\"\n          }\n        };\n      }\n\n      var t,\n          r,\n          i,\n          u,\n          a = zm({\n        dom: {\n          tag: \"p\",\n          innerHtml: n.translationProvider(n.text)\n        },\n        behaviours: nc([Rg.config({})])\n      }),\n          c = zm({\n        dom: {\n          tag: \"div\",\n          classes: n.progress ? [\"tox-progress-bar\", \"tox-progress-indicator\"] : [\"tox-progress-bar\"]\n        },\n        components: [{\n          dom: {\n            tag: \"div\",\n            classes: [\"tox-bar-container\"]\n          },\n          components: [e(0)]\n        }, o(0)],\n        behaviours: nc([Rg.config({})])\n      }),\n          s = {\n        updateProgress: function updateProgress(t, n) {\n          t.getSystem().isConnected() && c.getOpt(t).each(function (t) {\n            Rg.set(t, [{\n              dom: {\n                tag: \"div\",\n                classes: [\"tox-bar-container\"]\n              },\n              components: [e(n)]\n            }, o(n)]);\n          });\n        },\n        updateText: function updateText(t, n) {\n          var e;\n          t.getSystem().isConnected() && (e = a.get(t), Rg.set(e, [ri(n)]));\n        }\n      },\n          l = ft([n.icon.toArray(), n.level.toArray(), n.level.bind(function (t) {\n        return vt.from(pp[t]);\n      }).toArray()]),\n          f = zm(fp.sketch({\n        dom: {\n          tag: \"button\",\n          classes: [\"tox-notification__dismiss\", \"tox-button\", \"tox-button--naked\", \"tox-button--icon\"]\n        },\n        components: [Xm(\"close\", {\n          tag: \"div\",\n          classes: [\"tox-icon\"],\n          attributes: {\n            \"aria-label\": n.translationProvider(\"Close\")\n          }\n        }, n.iconProvider)],\n        action: function action(t) {\n          n.onAction(t);\n        }\n      })),\n          d = [(t = l, r = {\n        tag: \"div\",\n        classes: [\"tox-notification__icon\"]\n      }, i = n.iconProvider, u = i(), Gm(r, V(t, function (t) {\n        return Tt(u, Lm(t, u));\n      }).getOr(gp), u, vt.none())), {\n        dom: {\n          tag: \"div\",\n          classes: [\"tox-notification__body\"]\n        },\n        components: [a.asSpec()],\n        behaviours: nc([Rg.config({})])\n      }];\n      return {\n        uid: n.uid,\n        dom: {\n          tag: \"div\",\n          attributes: {\n            role: \"alert\"\n          },\n          classes: n.level.map(function (t) {\n            return [\"tox-notification\", \"tox-notification--in\", \"tox-notification--\" + t];\n          }).getOr([\"tox-notification\", \"tox-notification--in\"])\n        },\n        behaviours: nc([Hg.config({}), mm(\"notification-events\", [Cr(bi(), function (t) {\n          f.getOpt(t).each(Hg.focus);\n        })])]),\n        components: d.concat(n.progress ? [c.asSpec()] : []).concat(n.closeButton ? [f.asSpec()] : []),\n        apis: s\n      };\n    },\n    configFields: [wo(\"level\"), mo(\"progress\"), mo(\"icon\"), mo(\"onAction\"), mo(\"text\"), mo(\"iconProvider\"), mo(\"translationProvider\"), Fo(\"closeButton\", !0)],\n    apis: {\n      updateProgress: function updateProgress(t, n, e) {\n        t.updateProgress(n, e);\n      },\n      updateText: function updateText(t, n, e) {\n        t.updateText(n, e);\n      }\n    }\n  });\n\n  function vp(e, o) {\n    function r() {\n      b(i) || (clearTimeout(i), i = null);\n    }\n\n    var i = null;\n    return {\n      cancel: r,\n      throttle: function throttle() {\n        for (var t = [], n = 0; n < arguments.length; n++) {\n          t[n] = arguments[n];\n        }\n\n        r(), i = setTimeout(function () {\n          i = null, e.apply(null, t);\n        }, o);\n      }\n    };\n  }\n\n  function bp(o, t, n, e, r) {\n    var i = Bp(o, function (t) {\n      return (n = o).isBlock(e = t) || wt([\"BR\", \"IMG\", \"HR\", \"INPUT\"], e.nodeName) || \"false\" === n.getContentEditable(e);\n      var n, e;\n    });\n    return vt.from(i.backwards(t, n, e, r));\n  }\n\n  function yp(e, n) {\n    return Mp(At.fromDom(e.selection.getNode())).getOrThunk(function () {\n      var i,\n          _u2,\n          t = At.fromHtml('<span data-mce-autocompleter=\"1\" data-mce-bogus=\"1\"></span>', e.getDoc());\n\n      return Te(t, At.fromDom(n.extractContents())), n.insertNode(t.dom), Yt(t).each(function (t) {\n        return t.dom.normalize();\n      }), i = hs, (_u2 = function u(t) {\n        for (var n = Kt(t), e = n.length - 1; 0 <= e; e--) {\n          var o = n[e];\n          if (i(o)) return vt.some(o);\n\n          var r = _u2(o);\n\n          if (r.isSome()) return r;\n        }\n\n        return vt.none();\n      })(t).map(function (t) {\n        var n;\n        e.selection.setCursorLocation(t.dom, \"img\" === Ft(n = t) ? 1 : ps(n).fold(function () {\n          return Kt(n).length;\n        }, function (t) {\n          return t.length;\n        }));\n      }), t;\n    });\n  }\n\n  function xp(t) {\n    return t.toString().replace(/\\u00A0/g, \" \").replace(/\\uFEFF/g, \"\");\n  }\n\n  function wp(t) {\n    return \"\" !== t && -1 !== \" \\xa0\\f\\n\\r\\t\\v\".indexOf(t);\n  }\n\n  function Sp(t, n) {\n    return t.substring(n.length);\n  }\n\n  function kp(o, t, r, n) {\n    return void 0 === n && (n = 0), Mp(At.fromDom(t.startContainer)).fold(function () {\n      return function (t, o, i, r) {\n        if (void 0 === r && (r = 0), !o.collapsed || 3 !== o.startContainer.nodeType) return vt.none();\n        var n = t.getParent(o.startContainer, t.isBlock) || t.getRoot();\n        return bp(t, o.startContainer, o.startOffset, function (t, r, n) {\n          return function (t, n) {\n            for (var e = r - 1; 0 <= e; e--) {\n              var o = t.charAt(e);\n              if (wp(o)) return vt.none();\n              if (o === n) break;\n            }\n\n            return vt.some(e);\n          }(n, i).getOr(r);\n        }, n).bind(function (t) {\n          var n = o.cloneRange();\n          if (n.setStart(t.container, t.offset), n.setEnd(o.endContainer, o.endOffset), n.collapsed) return vt.none();\n          var e = xp(n);\n          return 0 !== e.lastIndexOf(i) || Sp(e, i).length < r ? vt.none() : vt.some({\n            text: Sp(e, i),\n            range: n,\n            triggerChar: i\n          });\n        });\n      }(o, t, r, n);\n    }, function (t) {\n      var n = o.createRng();\n      n.selectNode(t.dom);\n      var e = xp(n);\n      return vt.some({\n        range: n,\n        text: Sp(e, r),\n        triggerChar: r\n      });\n    });\n  }\n\n  function Cp(t, n) {\n    return {\n      container: t,\n      offset: n\n    };\n  }\n\n  function Op(t) {\n    return ao(\"toolbarbutton\", zp, t);\n  }\n\n  function _p(t) {\n    return ao(\"ToggleButton\", Lp, t);\n  }\n\n  function Tp(n, t, e, o) {\n    void 0 === o && (o = {});\n    var r = t(),\n        i = n.selection.getRng().startContainer.nodeValue,\n        u = F(r.lookupByChar(e.triggerChar), function (t) {\n      return e.text.length >= t.minChars && t.matches.getOrThunk(function () {\n        return e = n.dom, function (t) {\n          var n = Ip(t.startContainer, t.startOffset);\n          return !bp(e, n.container, n.offset, function (t, n) {\n            return 0 === n ? -1 : n;\n          }, e.getRoot()).filter(function (t) {\n            return !wp(t.container.data.charAt(t.offset - 1));\n          }).isSome();\n        };\n        var e;\n      })(e.range, i, e.text);\n    });\n    if (0 === u.length) return vt.none();\n    var a = Ap.all(M(u, function (n) {\n      return n.fetch(e.text, n.maxResults, o).then(function (t) {\n        return {\n          matchText: e.text,\n          items: t,\n          columns: n.columns,\n          onAction: n.onAction,\n          highlightOn: n.highlightOn\n        };\n      });\n    }));\n    return vt.some({\n      lookupData: a,\n      context: e\n    });\n  }\n\n  var Ep,\n      Dp,\n      Bp = tinymce.util.Tools.resolve(\"tinymce.dom.TextSeeker\"),\n      Mp = function Mp(t) {\n    return Ru(t, \"[data-mce-autocompleter]\");\n  },\n      Ap = tinymce.util.Tools.resolve(\"tinymce.util.Promise\"),\n      Fp = function Fp(t) {\n    if (3 === t.nodeType) return Cp(t, t.data.length);\n    var n = t.childNodes;\n    return 0 < n.length ? Fp(n[n.length - 1]) : Cp(t, n.length);\n  },\n      Ip = function Ip(t, n) {\n    var e = t.childNodes;\n    return 0 < e.length && n < e.length ? Ip(e[n], 0) : 0 < e.length && 1 === t.nodeType && e.length === n ? Fp(e[e.length - 1]) : Cp(t, n);\n  },\n      Rp = $o([po(\"type\"), Co(\"text\")]),\n      Vp = $o([Eo(\"type\", \"autocompleteitem\"), Eo(\"active\", !1), Eo(\"disabled\", !1), Eo(\"meta\", {}), po(\"value\"), Co(\"text\"), Co(\"icon\")]),\n      Pp = $o([po(\"type\"), po(\"ch\"), Bo(\"minChars\", 1), Eo(\"columns\", 1), Bo(\"maxResults\", 10), Oo(\"matches\"), vo(\"fetch\"), vo(\"onAction\"), Ro(\"highlightOn\", [], nr)]),\n      Hp = [Fo(\"disabled\", !1), Co(\"tooltip\"), Co(\"icon\"), Co(\"text\"), Io(\"onSetup\", function () {\n    return st;\n  })],\n      zp = $o([po(\"type\"), vo(\"onAction\")].concat(Hp)),\n      Np = [Fo(\"active\", !1)].concat(Hp),\n      Lp = $o(Np.concat([po(\"type\"), vo(\"onAction\")])),\n      Wp = [Io(\"predicate\", T), Ao(\"scope\", \"node\", [\"node\", \"editor\"]), Ao(\"position\", \"selection\", [\"node\", \"selection\", \"line\"])],\n      Up = Hp.concat([Eo(\"type\", \"contextformbutton\"), Eo(\"primary\", !1), vo(\"onAction\"), cr(\"original\", h)]),\n      jp = Np.concat([Eo(\"type\", \"contextformbutton\"), Eo(\"primary\", !1), vo(\"onAction\"), cr(\"original\", h)]),\n      Gp = Hp.concat([Eo(\"type\", \"contextformbutton\")]),\n      Xp = Np.concat([Eo(\"type\", \"contextformtogglebutton\")]),\n      Yp = lo(\"type\", {\n    contextformbutton: Up,\n    contextformtogglebutton: jp\n  }),\n      qp = $o([Eo(\"type\", \"contextform\"), Io(\"initValue\", rt(\"\")), Co(\"label\"), xo(\"commands\", Yp), So(\"launch\", lo(\"type\", {\n    contextformbutton: Gp,\n    contextformtogglebutton: Xp\n  }))].concat(Wp)),\n      Kp = $o([Eo(\"type\", \"contexttoolbar\"), po(\"items\")].concat(Wp));\n\n  function Jp(t) {\n    return tt(_h, t).getOr(kh);\n  }\n\n  function $p(t) {\n    return {\n      backgroundMenu: \"tox-background-menu\",\n      selectedMenu: \"tox-selected-menu\",\n      selectedItem: \"tox-collection__item--active\",\n      hasIcons: \"tox-menu--has-icons\",\n      menu: \"color\" === t ? \"tox-swatches\" : \"tox-menu\",\n      tieredMenu: \"tox-tiered-menu\"\n    };\n  }\n\n  function Qp(t) {\n    var n = $p(t);\n    return {\n      backgroundMenu: n.backgroundMenu,\n      selectedMenu: n.selectedMenu,\n      menu: n.menu,\n      selectedItem: n.selectedItem,\n      item: Jp(t)\n    };\n  }\n\n  function Zp(t, n, e) {\n    return {\n      dom: {\n        tag: \"div\",\n        classes: ft([[$p(e).tieredMenu]])\n      },\n      markers: Qp(e)\n    };\n  }\n\n  function th(n, e) {\n    return function (t) {\n      return M(p(t, e), function (t) {\n        return {\n          dom: n,\n          components: t\n        };\n      });\n    };\n  }\n\n  function nh(t, e) {\n    var o = [],\n        r = [];\n    return St(t, function (t, n) {\n      e(t, n) ? (0 < r.length && o.push(r), r = [], Tt(t.dom, \"innerHtml\") && r.push(t)) : r.push(t);\n    }), 0 < r.length && o.push(r), M(o, function (t) {\n      return {\n        dom: {\n          tag: \"div\",\n          classes: [\"tox-collection__group\"]\n        },\n        components: t\n      };\n    });\n  }\n\n  function eh(n, e) {\n    return {\n      dom: {\n        tag: \"div\",\n        classes: [\"tox-menu\", \"tox-collection\"].concat(1 === n ? [\"tox-collection--list\"] : [\"tox-collection--grid\"])\n      },\n      components: [tp.parts.items({\n        preprocess: function preprocess(t) {\n          return \"auto\" !== n && 1 < n ? th({\n            tag: \"div\",\n            classes: [\"tox-collection__group\"]\n          }, n)(t) : nh(t, function (t, n) {\n            return \"separator\" === e[n].type;\n          });\n        }\n      })]\n    };\n  }\n\n  function oh(t) {\n    return d(t, function (t) {\n      return \"icon\" in t && void 0 !== t.icon;\n    });\n  }\n\n  function rh(t) {\n    return console.error(ur(t)), console.log(t), vt.none();\n  }\n\n  function ih(t, n, e, o, r) {\n    var i,\n        u = (i = e, {\n      dom: {\n        tag: \"div\",\n        classes: [\"tox-collection\", \"tox-collection--horizontal\"]\n      },\n      components: [tp.parts.items({\n        preprocess: function preprocess(t) {\n          return nh(t, function (t, n) {\n            return \"separator\" === i[n].type;\n          });\n        }\n      })]\n    });\n    return {\n      value: t,\n      dom: u.dom,\n      components: u.components,\n      items: e\n    };\n  }\n\n  function uh(t, n, e, o, r) {\n    var i, u;\n    return \"color\" === r ? {\n      value: t,\n      dom: (i = {\n        dom: {\n          tag: \"div\",\n          classes: [\"tox-menu\", \"tox-swatches-menu\"]\n        },\n        components: [{\n          dom: {\n            tag: \"div\",\n            classes: [\"tox-swatches\"]\n          },\n          components: [tp.parts.items({\n            preprocess: \"auto\" !== o ? th({\n              tag: \"div\",\n              classes: [\"tox-swatches__row\"]\n            }, o) : h\n          })]\n        }]\n      }).dom,\n      components: i.components,\n      items: e\n    } : \"normal\" === r && \"auto\" === o ? {\n      value: t,\n      dom: (i = eh(o, e)).dom,\n      components: i.components,\n      items: e\n    } : \"normal\" === r && 1 === o ? {\n      value: t,\n      dom: (i = eh(1, e)).dom,\n      components: i.components,\n      items: e\n    } : \"normal\" === r ? {\n      value: t,\n      dom: (i = eh(o, e)).dom,\n      components: i.components,\n      items: e\n    } : \"listpreview\" !== r || \"auto\" === o ? {\n      value: t,\n      dom: {\n        tag: \"div\",\n        classes: ft([[(u = $p(r)).menu, \"tox-menu-\" + o + \"-column\"], n ? [u.hasIcons] : []])\n      },\n      components: Ih,\n      items: e\n    } : {\n      value: t,\n      dom: (i = {\n        dom: {\n          tag: \"div\",\n          classes: [\"tox-menu\", \"tox-collection\", \"tox-collection--toolbar\", \"tox-collection--toolbar-lg\"]\n        },\n        components: [tp.parts.items({\n          preprocess: th({\n            tag: \"div\",\n            classes: [\"tox-collection__group\"]\n          }, o)\n        })]\n      }).dom,\n      components: i.components,\n      items: e\n    };\n  }\n\n  function ah(t, o, n) {\n    var r = vs(t.element, \".\" + n);\n\n    if (0 < r.length) {\n      var e = P(r, function (t) {\n        var n = t.dom.getBoundingClientRect().top,\n            e = r[0].dom.getBoundingClientRect().top;\n        return Math.abs(n - e) > o;\n      }).getOr(r.length);\n      return vt.some({\n        numColumns: e,\n        numRows: Math.ceil(r.length / e)\n      });\n    }\n\n    return vt.none();\n  }\n\n  function ch(t, n, e) {\n    t.getSystem().broadcastOn([Jh], {});\n  }\n\n  function sh(t) {\n    return t.getParam(\"height\", Math.max(t.getElement().offsetHeight, 200));\n  }\n\n  function lh(t) {\n    return t.getParam(\"width\", ev.DOM.getStyle(t.getElement(), \"width\"));\n  }\n\n  function fh(t) {\n    return vt.from(t.getParam(\"min_width\")).filter(u);\n  }\n\n  function dh(t) {\n    return vt.from(t.getParam(\"min_height\")).filter(u);\n  }\n\n  function mh(t) {\n    return vt.from(t.getParam(\"max_width\")).filter(u);\n  }\n\n  function gh(t) {\n    return vt.from(t.getParam(\"max_height\")).filter(u);\n  }\n\n  function ph(t) {\n    return !1 !== t.getParam(\"menubar\", !0, \"boolean\");\n  }\n\n  function hh(t) {\n    var n = t.getParam(\"toolbar\", !0),\n        e = !0 === n,\n        o = y(n),\n        r = c(n) && 0 < n.length;\n    return !rv(t) && (r || o || e);\n  }\n\n  function vh(n) {\n    var t = F(m(9, function (t) {\n      return n.getParam(\"toolbar\" + (t + 1), !1, \"string\");\n    }), function (t) {\n      return \"string\" == typeof t;\n    });\n    return 0 < t.length ? vt.some(t) : vt.none();\n  }\n\n  (Dp = Ep = {})[Dp.CLOSE_ON_EXECUTE = 0] = \"CLOSE_ON_EXECUTE\", Dp[Dp.BUBBLE_TO_SANDBOX = 1] = \"BUBBLE_TO_SANDBOX\";\n\n  var bh,\n      yh,\n      xh,\n      wh,\n      Sh = Ep,\n      kh = \"tox-menu-nav__js\",\n      Ch = \"tox-collection__item\",\n      Oh = \"tox-swatch\",\n      _h = {\n    normal: kh,\n    color: Oh\n  },\n      Th = \"tox-collection__item--enabled\",\n      Eh = \"tox-collection__item-icon\",\n      Dh = \"tox-collection__item-label\",\n      Bh = \"tox-collection__item-caret\",\n      Mh = \"tox-collection__item--active\",\n      Ah = \"tox-collection__item-container\",\n      Fh = \"tox-collection__item-container--row\",\n      Ih = [tp.parts.items({})],\n      Rh = [po(\"type\"), po(\"src\"), Co(\"alt\"), Ro(\"classes\", [], nr)],\n      Vh = $o(Rh),\n      Ph = [po(\"type\"), po(\"text\"), Co(\"name\"), Ro(\"classes\", [\"tox-collection__item-label\"], nr)],\n      Hh = $o(Ph),\n      zh = Ze(function () {\n    return ro(\"type\", {\n      cardimage: Vh,\n      cardtext: Hh,\n      cardcontainer: Nh\n    });\n  }),\n      Nh = $o([po(\"type\"), Mo(\"direction\", \"horizontal\"), Mo(\"align\", \"left\"), Mo(\"valign\", \"middle\"), xo(\"items\", zh)]),\n      Lh = [Fo(\"disabled\", !1), Co(\"text\"), Co(\"shortcut\"), ar(\"value\", \"value\", je(function () {\n    return Ir(\"menuitem-value\");\n  }), Zo()), Eo(\"meta\", {})],\n      Wh = $o([po(\"type\"), Co(\"label\"), xo(\"items\", zh), Io(\"onSetup\", function () {\n    return st;\n  }), Io(\"onAction\", st)].concat(Lh)),\n      Uh = $o([po(\"type\"), Fo(\"active\", !1), Co(\"icon\")].concat(Lh)),\n      jh = [po(\"type\"), po(\"fancytype\"), Io(\"onAction\", st)],\n      Gh = lo(\"fancytype\", {\n    inserttable: [Eo(\"initData\", {})].concat(jh),\n    colorswatch: [Vo(\"initData\", {}, [Fo(\"allowCustomColors\", !0), _o(\"colors\", Zo())])].concat(jh)\n  }),\n      Xh = $o([po(\"type\"), Io(\"onSetup\", function () {\n    return st;\n  }), Io(\"onAction\", st), Co(\"icon\")].concat(Lh)),\n      Yh = $o([po(\"type\"), vo(\"getSubmenuItems\"), Io(\"onSetup\", function () {\n    return st;\n  }), Co(\"icon\")].concat(Lh)),\n      qh = $o([po(\"type\"), Co(\"icon\"), Fo(\"active\", !1), Io(\"onSetup\", function () {\n    return st;\n  }), vo(\"onAction\")].concat(Lh)),\n      Kh = function Kh(t) {\n    return n = Ir(\"unnamed-events\"), nc([mm(n, t)]);\n    var n;\n  },\n      Jh = Ir(\"tooltip.exclusive\"),\n      $h = Ir(\"tooltip.show\"),\n      Qh = Ir(\"tooltip.hide\"),\n      Zh = Object.freeze({\n    __proto__: null,\n    hideAllExclusive: ch,\n    setComponents: function setComponents(t, n, e, o) {\n      e.getTooltip().each(function (t) {\n        t.getSystem().isConnected() && Rg.set(t, o);\n      });\n    }\n  }),\n      tv = Object.freeze({\n    __proto__: null,\n    events: function events(r, i) {\n      function e(n) {\n        i.getTooltip().each(function (t) {\n          Hs(t), r.onHide(n, t), i.clearTooltip();\n        }), i.clearTimer();\n      }\n\n      return eu(ft([[Cr($h, function (o) {\n        i.resetTimer(function () {\n          var t,\n              n,\n              e = o;\n          i.isShowing() || (ch(e), t = r.lazySink(e).getOrDie(), n = e.getSystem().build({\n            dom: r.tooltipDom,\n            components: r.tooltipComponents,\n            events: eu(\"normal\" === r.mode ? [Cr(vi(), function (t) {\n              vr(e, $h);\n            }), Cr(pi(), function (t) {\n              vr(e, Qh);\n            })] : []),\n            behaviours: nc([Rg.config({})])\n          }), i.setTooltip(n), Vs(t, n), r.onShow(e, n), ff.position(t, n, {\n            anchor: r.anchor(e)\n          }));\n        }, r.delay);\n      }), Cr(Qh, function (t) {\n        i.resetTimer(function () {\n          e(t);\n        }, r.delay);\n      }), Cr(Fi(), function (t, n) {\n        n.universal || wt(n.channels, Jh) && e(t);\n      }), ru(function (t) {\n        e(t);\n      })], \"normal\" === r.mode ? [Cr(bi(), function (t) {\n        vr(t, $h);\n      }), Cr(Mi(), function (t) {\n        vr(t, Qh);\n      }), Cr(vi(), function (t) {\n        vr(t, $h);\n      }), Cr(pi(), function (t) {\n        vr(t, Qh);\n      })] : [Cr(Zi(), function (t, n) {\n        vr(t, $h);\n      }), Cr(tu(), function (t) {\n        vr(t, Qh);\n      })]]));\n    }\n  }),\n      nv = xa({\n    fields: [mo(\"lazySink\"), mo(\"tooltipDom\"), Eo(\"exclusive\", !0), Eo(\"tooltipComponents\", []), Eo(\"delay\", 300), Ao(\"mode\", \"normal\", [\"normal\", \"follow-highlight\"]), Eo(\"anchor\", function (t) {\n      return {\n        type: \"hotspot\",\n        hotspot: t,\n        layouts: {\n          onLtr: rt([$a, Ja, Xa, qa, Ya, Ka]),\n          onRtl: rt([$a, Ja, Xa, qa, Ya, Ka])\n        }\n      };\n    }), Ju(\"onHide\"), Ju(\"onShow\")],\n    name: \"tooltipping\",\n    active: tv,\n    state: Object.freeze({\n      __proto__: null,\n      init: function init() {\n        function e() {\n          o.on(clearTimeout);\n        }\n\n        var o = gc(),\n            t = gc(),\n            n = rt(\"not-implemented\");\n        return wu({\n          getTooltip: t.get,\n          isShowing: t.isSet,\n          setTooltip: t.set,\n          clearTooltip: t.clear,\n          clearTimer: e,\n          resetTimer: function resetTimer(t, n) {\n            e(), o.set(setTimeout(t, n));\n          },\n          readState: n\n        });\n      }\n    }),\n    apis: Zh\n  }),\n      ev = tinymce.util.Tools.resolve(\"tinymce.dom.DOMUtils\"),\n      ov = tinymce.util.Tools.resolve(\"tinymce.EditorManager\"),\n      rv = function rv(t) {\n    return vh(t).fold(function () {\n      return 0 < t.getParam(\"toolbar\", [], \"string[]\").length;\n    }, D);\n  };\n\n  function iv(t) {\n    return t.getParam(\"toolbar_mode\", \"\", \"string\");\n  }\n\n  function uv(t) {\n    return t.getParam(\"toolbar_location\", xh.auto, \"string\");\n  }\n\n  function av(t) {\n    return uv(t) === xh.bottom;\n  }\n\n  function cv(t) {\n    if (!t.inline) return vt.none();\n    var n = t.getParam(\"fixed_toolbar_container\", \"\", \"string\");\n    if (0 < n.length) return Iu(be(), n);\n    var e = t.getParam(\"fixed_toolbar_container_target\");\n    return k(e) ? vt.some(At.fromDom(e)) : vt.none();\n  }\n\n  function sv(t) {\n    return t.inline && cv(t).isSome();\n  }\n\n  function lv(t) {\n    return cv(t).getOrThunk(function () {\n      return tn(ge(At.fromDom(t.getElement())));\n    });\n  }\n\n  function fv(t) {\n    return t.inline && !ph(t) && !hh(t) && !rv(t);\n  }\n\n  function dv(t) {\n    return (t.getParam(\"toolbar_sticky\", !1, \"boolean\") || t.inline) && !sv(t) && !fv(t);\n  }\n\n  function mv(t, n) {\n    var e = t.outerContainer.element;\n    n && (t.mothership.broadcastOn([yf()], {\n      target: e\n    }), t.uiMothership.broadcastOn([yf()], {\n      target: e\n    })), t.mothership.broadcastOn([Kv], {\n      readonly: n\n    }), t.uiMothership.broadcastOn([Kv], {\n      readonly: n\n    });\n  }\n\n  function gv(t, n) {\n    t.on(\"init\", function () {\n      t.mode.isReadOnly() && mv(n, !0);\n    }), t.on(\"SwitchMode\", function () {\n      return mv(n, t.mode.isReadOnly());\n    }), t.getParam(\"readonly\", !1, \"boolean\") && t.setMode(\"readonly\");\n  }\n\n  function pv() {\n    var t;\n    return ic.config({\n      channels: ((t = {})[Kv] = {\n        schema: Jv,\n        onReceive: function onReceive(t, n) {\n          gd.set(t, n.readonly);\n        }\n      }, t)\n    });\n  }\n\n  function hv(t, n) {\n    var e = t.getApi(n);\n    return function (t) {\n      t(e);\n    };\n  }\n\n  function vv(e, o) {\n    return ou(function (t) {\n      hv(e, t)(function (t) {\n        var n = e.onSetup(t);\n        S(n) && o.set(n);\n      });\n    });\n  }\n\n  function bv(n, e) {\n    return ru(function (t) {\n      return hv(n, t)(e.get());\n    });\n  }\n\n  function yv(t, n, e, o) {\n    var r,\n        i,\n        u = Po(st);\n    return {\n      type: \"item\",\n      dom: n.dom,\n      components: tb(n.optComponents),\n      data: t.data,\n      eventOrder: Zv,\n      hasSubmenu: t.triggersSubmenu,\n      itemBehaviours: nc([mm(\"item-events\", [(r = t, i = e, uu(function (t, n) {\n        hv(r, t)(r.onAction), r.triggersSubmenu || i !== Sh.CLOSE_ON_EXECUTE || (vr(t, Hi()), n.stop());\n      })), vv(t, u), bv(t, u)]), gd.config({\n        disabled: function disabled() {\n          return t.disabled || o.isDisabled();\n        },\n        disableClass: \"tox-collection__item--state-disabled\"\n      }), pv(), Rg.config({})].concat(t.itemBehaviours))\n    };\n  }\n\n  function xv(t) {\n    return {\n      value: t.value,\n      meta: _lt({\n        text: t.text.getOr(\"\")\n      }, t.meta)\n    };\n  }\n\n  function wv(t, n, e) {\n    return Xm(t, {\n      tag: \"div\",\n      classes: e = void 0 === e ? [Eh] : e\n    }, n);\n  }\n\n  function Sv(t) {\n    return {\n      dom: {\n        tag: \"div\",\n        classes: [Dh]\n      },\n      components: [ri(dp.translate(t))]\n    };\n  }\n\n  function kv(t, n) {\n    return {\n      dom: {\n        tag: \"div\",\n        classes: n,\n        innerHtml: t\n      }\n    };\n  }\n\n  function Cv(t, n) {\n    return {\n      dom: {\n        tag: \"div\",\n        classes: [Dh]\n      },\n      components: [{\n        dom: {\n          tag: t.tag,\n          styles: t.styles\n        },\n        components: [ri(dp.translate(n))]\n      }]\n    };\n  }\n\n  function Ov(t) {\n    return {\n      dom: {\n        tag: \"div\",\n        classes: [\"tox-collection__item-accessory\"],\n        innerHtml: (e = nb.mac ? {\n          alt: \"&#x2325;\",\n          ctrl: \"&#x2303;\",\n          shift: \"&#x21E7;\",\n          meta: \"&#x2318;\",\n          access: \"&#x2303;&#x2325;\"\n        } : {\n          meta: \"Ctrl\",\n          access: \"Shift+Alt\"\n        }, n = M(t.split(\"+\"), function (t) {\n          var n = t.toLowerCase().trim();\n          return Tt(e, n) ? e[n] : t;\n        }), nb.mac ? n.join(\"\") : n.join(\"+\"))\n      }\n    };\n    var e, n;\n  }\n\n  function _v(t) {\n    return wv(\"checkmark\", t, [\"tox-collection__item-checkmark\"]);\n  }\n\n  function Tv(t) {\n    var n = t.map(function (t) {\n      return {\n        attributes: {\n          title: dp.translate(t)\n        }\n      };\n    }).getOr({});\n    return _lt({\n      tag: \"div\",\n      classes: [kh, Ch]\n    }, n);\n  }\n\n  function Ev(t, n, e, o) {\n    return void 0 === o && (o = vt.none()), \"color\" === t.presets ? (r = n, i = o, c = t.ariaLabel, s = t.value, {\n      dom: (u = t.iconContent.map(function (t) {\n        return n = r.icons, e = i, Wm(t, o = n()).or(e).getOrThunk(Nm(o));\n        var n, e, o;\n      }).getOr(\"\"), a = {\n        tag: \"div\",\n        attributes: c.map(function (t) {\n          return {\n            title: r.translate(t)\n          };\n        }).getOr({}),\n        classes: [\"tox-swatch\"]\n      }, _lt(_lt({}, a), \"custom\" === s ? {\n        tag: \"button\",\n        classes: H(H([], a.classes, !0), [\"tox-swatches__picker-btn\"], !1),\n        innerHtml: u\n      } : \"remove\" === s ? {\n        classes: H(H([], a.classes, !0), [\"tox-swatch--remove\"], !1),\n        innerHtml: u\n      } : {\n        attributes: _lt(_lt({}, a.attributes), {\n          \"data-mce-color\": s\n        }),\n        styles: {\n          \"background-color\": s\n        }\n      })),\n      optComponents: []\n    }) : (l = t, f = n, d = o, m = {\n      tag: \"div\",\n      classes: [Eh]\n    }, g = e ? l.iconContent.map(function (t) {\n      return Xm(t, m, f.icons, d);\n    }).orThunk(function () {\n      return vt.some({\n        dom: m\n      });\n    }) : vt.none(), p = l.checkMark, h = vt.from(l.meta).fold(function () {\n      return Sv;\n    }, function (t) {\n      return Tt(t, \"style\") ? C(Cv, t.style) : Sv;\n    }), v = l.htmlContent.fold(function () {\n      return l.textContent.map(h);\n    }, function (t) {\n      return vt.some(kv(t, [Dh]));\n    }), {\n      dom: Tv(l.ariaLabel),\n      optComponents: [g, v, l.shortcutContent.map(Ov), p, l.caret]\n    });\n    var r, i, u, a, c, s, l, f, d, m, g, p, h, v;\n  }\n\n  function Dv(t, n) {\n    return tt(t, \"tooltipWorker\").map(function (e) {\n      return [nv.config({\n        lazySink: n.getSink,\n        tooltipDom: {\n          tag: \"div\",\n          classes: [\"tox-tooltip-worker-container\"]\n        },\n        tooltipComponents: [],\n        anchor: function anchor(t) {\n          return {\n            type: \"submenu\",\n            item: t,\n            overrides: {\n              maxHeightFunction: Vc\n            }\n          };\n        },\n        mode: \"follow-highlight\",\n        onShow: function onShow(n, t) {\n          e(function (t) {\n            nv.setComponents(n, [Ou({\n              element: At.fromDom(t)\n            })]);\n          });\n        }\n      })];\n    }).getOr([]);\n  }\n\n  function Bv(t, n) {\n    var e = dp.translate(t),\n        o = ev.DOM.encode(e);\n\n    if (0 < n.length) {\n      var r = new RegExp(n.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"), \"gi\");\n      return o.replace(r, function (t) {\n        return '<span class=\"tox-autocompleter-highlight\">' + t + \"</span>\";\n      });\n    }\n\n    return o;\n  }\n\n  function Mv(t) {\n    return {\n      value: t\n    };\n  }\n\n  function Av(t) {\n    return rb.test(t) || ib.test(t);\n  }\n\n  function Fv(t) {\n    var n = t.toString(16);\n    return (1 === n.length ? \"0\" + n : n).toUpperCase();\n  }\n\n  function Iv(t) {\n    return Mv(Fv(t.red) + Fv(t.green) + Fv(t.blue));\n  }\n\n  function Rv(t, n, e, o) {\n    return {\n      red: t,\n      green: n,\n      blue: e,\n      alpha: o\n    };\n  }\n\n  function Vv(t) {\n    var n = parseInt(t, 10);\n    return n.toString() === t && 0 <= n && n <= 255;\n  }\n\n  function Pv(t) {\n    var n,\n        e,\n        o,\n        r = (t.hue || 0) % 360,\n        i = t.saturation / 100,\n        u = t.value / 100,\n        i = ab(0, ub(i, 1)),\n        u = ab(0, ub(u, 1));\n    if (0 === i) return Rv(n = e = o = cb(255 * u), e, o, 1);\n    var a = r / 60,\n        c = u * i,\n        s = c * (1 - Math.abs(a % 2 - 1)),\n        l = u - c;\n\n    switch (Math.floor(a)) {\n      case 0:\n        n = c, e = s, o = 0;\n        break;\n\n      case 1:\n        n = s, e = c, o = 0;\n        break;\n\n      case 2:\n        n = 0, e = c, o = s;\n        break;\n\n      case 3:\n        n = 0, e = s, o = c;\n        break;\n\n      case 4:\n        n = s, e = 0, o = c;\n        break;\n\n      case 5:\n        n = c, e = 0, o = s;\n        break;\n\n      default:\n        n = e = o = 0;\n    }\n\n    return Rv(n = cb(255 * (n + l)), e = cb(255 * (e + l)), o = cb(255 * (o + l)), 1);\n  }\n\n  function Hv(t) {\n    var n,\n        e,\n        o = (n = {\n      value: t.value.replace(rb, function (t, n, e, o) {\n        return n + n + e + e + o + o;\n      })\n    }, null === (e = ib.exec(n.value)) ? [\"FFFFFF\", \"FF\", \"FF\", \"FF\"] : e);\n    return Rv(parseInt(o[1], 16), parseInt(o[2], 16), parseInt(o[3], 16), 1);\n  }\n\n  function zv(t, n, e, o) {\n    return Rv(parseInt(t, 10), parseInt(n, 10), parseInt(e, 10), parseFloat(o));\n  }\n\n  function Nv(t) {\n    if (\"transparent\" === t) return vt.some(Rv(0, 0, 0, 0));\n    var n = sb.exec(t);\n    if (null !== n) return vt.some(zv(n[1], n[2], n[3], \"1\"));\n    var e = lb.exec(t);\n    return null !== e ? vt.some(zv(e[1], e[2], e[3], e[4])) : vt.none();\n  }\n\n  function Lv(t) {\n    return \"rgba(\" + t.red + \",\" + t.green + \",\" + t.blue + \",\" + t.alpha + \")\";\n  }\n\n  function Wv(t, n) {\n    return t.fire(\"ResizeContent\", n);\n  }\n\n  function Uv(t, n, e) {\n    return {\n      hue: t,\n      saturation: n,\n      value: e\n    };\n  }\n\n  function jv(t) {\n    var n,\n        e,\n        o = 0,\n        r = t.red / 255,\n        i = t.green / 255,\n        u = t.blue / 255,\n        a = Math.min(r, Math.min(i, u)),\n        c = Math.max(r, Math.max(i, u));\n    return a === c ? Uv(0, 0, 100 * (o = a)) : (e = 60 * ((r === a ? 3 : u === a ? 1 : 5) - (r === a ? i - u : u === a ? r - i : u - r) / (c - a)), n = (c - a) / c, o = c, Uv(Math.round(e), Math.round(100 * n), Math.round(100 * o)));\n  }\n\n  function Gv(t) {\n    return Iv(Pv(t));\n  }\n\n  function Xv(o) {\n    return (Av(n = o) ? vt.some({\n      value: (Dt(t = n, \"#\") ? t.substring(\"#\".length) : t).toUpperCase()\n    }) : vt.none()).orThunk(function () {\n      return Nv(o).map(Iv);\n    }).getOrThunk(function () {\n      var t = document.createElement(\"canvas\");\n      t.height = 1, t.width = 1;\n      var n = t.getContext(\"2d\");\n      n.clearRect(0, 0, t.width, t.height), n.fillStyle = \"#FFFFFF\", n.fillStyle = o, n.fillRect(0, 0, 1, 1);\n      var e = n.getImageData(0, 0, 1, 1).data;\n      return Iv(Rv(e[0], e[1], e[2], e[3]));\n    });\n    var t, n;\n  }\n\n  (yh = bh = bh || {})[\"default\"] = \"wrap\", yh.floating = \"floating\", yh.sliding = \"sliding\", yh.scrolling = \"scrolling\", (wh = xh = xh || {}).auto = \"auto\", wh.top = \"top\", wh.bottom = \"bottom\";\n\n  function Yv(t) {\n    return gd.config({\n      disabled: t,\n      disableClass: \"tox-tbtn--disabled\"\n    });\n  }\n\n  var qv,\n      Kv = \"silver.readonly\",\n      Jv = $o([go(\"readonly\", er)]),\n      $v = function $v(t) {\n    return gd.config({\n      disabled: t\n    });\n  },\n      Qv = function Qv(t) {\n    return gd.config({\n      disabled: t,\n      disableClass: \"tox-tbtn--disabled\",\n      useNative: !1\n    });\n  },\n      Zv = ((qv = {})[Ii()] = [\"disabling\", \"alloy.base.behaviour\", \"toggling\", \"item-events\"], qv),\n      tb = et,\n      nb = tinymce.util.Tools.resolve(\"tinymce.Env\"),\n      eb = function eb(t, a) {\n    return M(t, function (t) {\n      switch (t.type) {\n        case \"cardcontainer\":\n          return r = eb((o = t).items, a), i = \"vertical\" === o.direction ? \"tox-collection__item-container--column\" : Fh, u = \"left\" === o.align ? \"tox-collection__item-container--align-left\" : \"tox-collection__item-container--align-right\", {\n            dom: {\n              tag: \"div\",\n              classes: [Ah, i, u, function () {\n                switch (o.valign) {\n                  case \"top\":\n                    return \"tox-collection__item-container--valign-top\";\n\n                  case \"middle\":\n                    return \"tox-collection__item-container--valign-middle\";\n\n                  case \"bottom\":\n                    return \"tox-collection__item-container--valign-bottom\";\n                }\n              }()]\n            },\n            components: r\n          };\n\n        case \"cardimage\":\n          return e = t.src, {\n            dom: {\n              tag: \"img\",\n              classes: t.classes,\n              attributes: {\n                src: e,\n                alt: t.alt.getOr(\"\")\n              }\n            }\n          };\n\n        case \"cardtext\":\n          var n = t.name.exists(function (t) {\n            return wt(a.cardText.highlightOn, t);\n          }) ? vt.from(a.cardText.matchText).getOr(\"\") : \"\";\n          return kv(Bv(t.text, n), t.classes);\n      }\n\n      var e, o, r, i, u;\n    });\n  },\n      ob = al(qg(), Kg()),\n      rb = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i,\n      ib = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i,\n      ub = Math.min,\n      ab = Math.max,\n      cb = Math.round,\n      sb = /^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)/,\n      lb = /^rgba\\((\\d+),\\s*(\\d+),\\s*(\\d+),\\s*(\\d?(?:\\.\\d+)?)\\)/,\n      fb = Rv(255, 0, 0, 1),\n      db = tinymce.util.Tools.resolve(\"tinymce.util.LocalStorage\"),\n      mb = \"tinymce-custom-colors\";\n\n  function gb(t) {\n    return !1 !== t.getParam(\"custom_colors\");\n  }\n\n  function pb(t) {\n    var n = t.getParam(\"color_map\");\n    return void 0 !== n ? function (t) {\n      for (var n = [], e = 0; e < t.length; e += 2) {\n        n.push({\n          text: t[e + 1],\n          value: \"#\" + Xv(t[e]).value,\n          type: \"choiceitem\"\n        });\n      }\n\n      return n;\n    }(n) : Mb;\n  }\n\n  function hb(t) {\n    Ab.add(t);\n  }\n\n  function vb(t) {\n    var n,\n        e = (n = pb(t).length, Math.max(5, Math.ceil(Math.sqrt(n))));\n    return t.getParam(\"color_cols\", e, \"number\");\n  }\n\n  function bb(t) {\n    var n = \"choiceitem\",\n        e = {\n      type: n,\n      text: \"Remove color\",\n      icon: \"color-swatch-remove-color\",\n      value: \"remove\"\n    };\n    return t ? [e, {\n      type: n,\n      text: \"Custom color\",\n      icon: \"color-picker\",\n      value: \"custom\"\n    }] : [e];\n  }\n\n  function yb(n, e, t, o) {\n    \"custom\" === t ? Ib(n)(function (t) {\n      t.each(function (t) {\n        hb(t), n.execCommand(\"mceApplyTextcolor\", e, t), o(t);\n      });\n    }, Fb) : \"remove\" === t ? (o(\"\"), n.execCommand(\"mceRemoveTextcolor\", e)) : (o(t), n.execCommand(\"mceApplyTextcolor\", e, t));\n  }\n\n  function xb(t, n) {\n    return t.concat(M(Ab.state(), function (t) {\n      return {\n        type: Bb,\n        text: t,\n        value: t\n      };\n    }).concat(bb(n)));\n  }\n\n  function wb(n, e) {\n    return function (t) {\n      t(xb(n, e));\n    };\n  }\n\n  function Sb(t, n, e) {\n    t.setIconFill(\"forecolor\" === n ? \"tox-icon-text-color__color\" : \"tox-icon-highlight-bg-color__color\", e);\n  }\n\n  function kb(i, e, u, t, o) {\n    i.ui.registry.addSplitButton(e, {\n      tooltip: t,\n      presets: \"color\",\n      icon: \"forecolor\" === e ? \"text-color\" : \"highlight-bg-color\",\n      select: function select(e) {\n        var o,\n            r = u;\n        return i.dom.getParents(i.selection.getStart(), function (t) {\n          var n;\n          (n = t.style[\"forecolor\" === r ? \"color\" : \"background-color\"]) && (o = o || n);\n        }), vt.from(o).bind(function (t) {\n          return Nv(t).map(function (t) {\n            var n = Iv(t).value;\n            return ut(e.toLowerCase(), n);\n          });\n        }).getOr(!1);\n      },\n      columns: vb(i),\n      fetch: wb(pb(i), gb(i)),\n      onAction: function onAction(t) {\n        yb(i, u, o.get(), st);\n      },\n      onItemAction: function onItemAction(t, n) {\n        yb(i, u, n, function (t) {\n          o.set(t), i.fire(\"TextColorChange\", {\n            name: e,\n            color: t\n          });\n        });\n      },\n      onSetup: function onSetup(n) {\n        function t(t) {\n          t.name === e && Sb(n, t.name, t.color);\n        }\n\n        return Sb(n, e, o.get()), i.on(\"TextColorChange\", t), function () {\n          i.off(\"TextColorChange\", t);\n        };\n      }\n    });\n  }\n\n  function Cb(n, t, e, o) {\n    n.ui.registry.addNestedMenuItem(t, {\n      text: o,\n      icon: \"forecolor\" === t ? \"text-color\" : \"highlight-bg-color\",\n      getSubmenuItems: function getSubmenuItems() {\n        return [{\n          type: \"fancymenuitem\",\n          fancytype: \"colorswatch\",\n          onAction: function onAction(t) {\n            yb(n, e, t.value, st);\n          }\n        }];\n      }\n    });\n  }\n\n  function Ob(t, n, e, o, r, i, u, a) {\n    return uh(t, oh(n), Rb(n, e, o, \"color\" !== r ? \"normal\" : \"color\", i, u, a), o, r);\n  }\n\n  function _b(t, n) {\n    var e = Qp(n);\n    return 1 === t ? {\n      mode: \"menu\",\n      moveOnTab: !0\n    } : \"auto\" === t ? {\n      mode: \"grid\",\n      selector: \".\" + e.item,\n      initSize: {\n        numColumns: 1,\n        numRows: 1\n      }\n    } : {\n      mode: \"matrix\",\n      rowSelector: \".\" + (\"color\" === n ? \"tox-swatches__row\" : \"tox-collection__group\")\n    };\n  }\n\n  function Tb(t, n) {\n    return ri(n + \"x\" + t);\n  }\n\n  var Eb,\n      Db,\n      Bb = \"choiceitem\",\n      Mb = [{\n    type: Bb,\n    text: \"Light Green\",\n    value: \"#BFEDD2\"\n  }, {\n    type: Bb,\n    text: \"Light Yellow\",\n    value: \"#FBEEB8\"\n  }, {\n    type: Bb,\n    text: \"Light Red\",\n    value: \"#F8CAC6\"\n  }, {\n    type: Bb,\n    text: \"Light Purple\",\n    value: \"#ECCAFA\"\n  }, {\n    type: Bb,\n    text: \"Light Blue\",\n    value: \"#C2E0F4\"\n  }, {\n    type: Bb,\n    text: \"Green\",\n    value: \"#2DC26B\"\n  }, {\n    type: Bb,\n    text: \"Yellow\",\n    value: \"#F1C40F\"\n  }, {\n    type: Bb,\n    text: \"Red\",\n    value: \"#E03E2D\"\n  }, {\n    type: Bb,\n    text: \"Purple\",\n    value: \"#B96AD9\"\n  }, {\n    type: Bb,\n    text: \"Blue\",\n    value: \"#3598DB\"\n  }, {\n    type: Bb,\n    text: \"Dark Turquoise\",\n    value: \"#169179\"\n  }, {\n    type: Bb,\n    text: \"Orange\",\n    value: \"#E67E23\"\n  }, {\n    type: Bb,\n    text: \"Dark Red\",\n    value: \"#BA372A\"\n  }, {\n    type: Bb,\n    text: \"Dark Purple\",\n    value: \"#843FA1\"\n  }, {\n    type: Bb,\n    text: \"Dark Blue\",\n    value: \"#236FA1\"\n  }, {\n    type: Bb,\n    text: \"Light Gray\",\n    value: \"#ECF0F1\"\n  }, {\n    type: Bb,\n    text: \"Medium Gray\",\n    value: \"#CED4D9\"\n  }, {\n    type: Bb,\n    text: \"Gray\",\n    value: \"#95A5A6\"\n  }, {\n    type: Bb,\n    text: \"Dark Gray\",\n    value: \"#7E8C8D\"\n  }, {\n    type: Bb,\n    text: \"Navy Blue\",\n    value: \"#34495E\"\n  }, {\n    type: Bb,\n    text: \"Black\",\n    value: \"#000000\"\n  }, {\n    type: Bb,\n    text: \"White\",\n    value: \"#ffffff\"\n  }],\n      Ab = function (e) {\n    void 0 === e && (e = 10);\n\n    function o(t) {\n      i.splice(t, 1);\n    }\n\n    var t,\n        n = db.getItem(mb),\n        r = y(n) ? JSON.parse(n) : [],\n        i = e - (t = r).length < 0 ? t.slice(0, e) : t;\n    return {\n      add: function add(t) {\n        var n;\n        (-1 === (n = l(i, t)) ? vt.none() : vt.some(n)).each(o), i.unshift(t), i.length > e && i.pop(), db.setItem(mb, JSON.stringify(i));\n      },\n      state: function state() {\n        return i.slice(0);\n      }\n    };\n  }(10),\n      Fb = \"#000000\",\n      Ib = function Ib(r) {\n    return function (e, t) {\n      var o = !1;\n      r.windowManager.open({\n        title: \"Color Picker\",\n        size: \"normal\",\n        body: {\n          type: \"panel\",\n          items: [{\n            type: \"colorpicker\",\n            name: \"colorpicker\",\n            label: \"Color\"\n          }]\n        },\n        buttons: [{\n          type: \"cancel\",\n          name: \"cancel\",\n          text: \"Cancel\"\n        }, {\n          type: \"submit\",\n          name: \"save\",\n          text: \"Save\",\n          primary: !0\n        }],\n        initialData: {\n          colorpicker: t\n        },\n        onAction: function onAction(t, n) {\n          \"hex-valid\" === n.name && (o = n.value);\n        },\n        onSubmit: function onSubmit(t) {\n          var n = t.getData().colorpicker;\n          o ? (e(vt.from(n)), t.close()) : r.windowManager.alert(r.translate([\"Invalid hex color code: {0}\", n]));\n        },\n        onClose: st,\n        onCancel: function onCancel() {\n          e(vt.none());\n        }\n      });\n    };\n  },\n      Rb = function Rb(e, o, r, i, u, a, c) {\n    return et(M(e, function (n) {\n      return \"choiceitem\" === n.type ? ao(\"choicemenuitem\", Uh, n).fold(rh, function (t) {\n        return vt.some(function (n, t, e, o, r, i, u, a) {\n          void 0 === a && (a = !0);\n          var c = Ev({\n            presets: e,\n            textContent: t ? n.text : vt.none(),\n            htmlContent: vt.none(),\n            ariaLabel: n.text,\n            iconContent: n.icon,\n            shortcutContent: t ? n.shortcut : vt.none(),\n            checkMark: t ? vt.some(_v(u.icons)) : vt.none(),\n            caret: vt.none(),\n            value: n.value\n          }, u, a);\n          return Yo(yv({\n            data: xv(n),\n            disabled: n.disabled,\n            getApi: function getApi(n) {\n              return {\n                setActive: function setActive(t) {\n                  Lg.set(n, t);\n                },\n                isActive: function isActive() {\n                  return Lg.isOn(n);\n                },\n                isDisabled: function isDisabled() {\n                  return gd.isDisabled(n);\n                },\n                setDisabled: function setDisabled(t) {\n                  return gd.set(n, t);\n                }\n              };\n            },\n            onAction: function onAction(t) {\n              return o(n.value);\n            },\n            onSetup: function onSetup(t) {\n              return t.setActive(r), st;\n            },\n            triggersSubmenu: !1,\n            itemBehaviours: []\n          }, c, i, u), {\n            toggling: {\n              toggleClass: Th,\n              toggleOnExecute: !1,\n              selected: n.active\n            }\n          });\n        }(t, 1 === r, i, o, a(n.value), u, c, oh(e)));\n      }) : vt.none();\n    }));\n  },\n      Vb = Ir(\"cell-over\"),\n      Pb = Ir(\"cell-execute\"),\n      Hb = {\n    inserttable: function inserttable(u) {\n      var t = Ir(\"size-label\"),\n          a = function (t) {\n        for (var n = [], e = 0; e < 10; e++) {\n          for (var o = [], r = 0; r < 10; r++) {\n            o.push(function (n, e, t) {\n              function o(t) {\n                return br(t, Pb, {\n                  row: n,\n                  col: e\n                });\n              }\n\n              function r(t, n) {\n                n.stop(), o(t);\n              }\n\n              var i;\n              return Tu({\n                dom: {\n                  tag: \"div\",\n                  attributes: ((i = {\n                    role: \"button\"\n                  })[\"aria-labelledby\"] = t, i)\n                },\n                behaviours: nc([mm(\"insert-table-picker-cell\", [Cr(vi(), Hg.focus), Cr(Ii(), o), Cr(Ci(), r), Cr(Vi(), r)]), Lg.config({\n                  toggleClass: \"tox-insert-table-picker__selected\",\n                  toggleOnExecute: !1\n                }), Hg.config({\n                  onFocus: function onFocus(t) {\n                    return br(t, Vb, {\n                      row: n,\n                      col: e\n                    });\n                  }\n                })])\n              });\n            }(e, r, t));\n          }\n\n          n.push(o);\n        }\n\n        return n;\n      }(t),\n          n = Tb(0, 0),\n          c = zm({\n        dom: {\n          tag: \"span\",\n          classes: [\"tox-insert-table-picker__label\"],\n          attributes: {\n            id: t\n          }\n        },\n        components: [n],\n        behaviours: nc([Rg.config({})])\n      });\n\n      return {\n        type: \"widget\",\n        data: {\n          value: Ir(\"widget-id\")\n        },\n        dom: {\n          tag: \"div\",\n          classes: [\"tox-fancymenuitem\"]\n        },\n        autofocus: !0,\n        components: [ob.widget({\n          dom: {\n            tag: \"div\",\n            classes: [\"tox-insert-table-picker\"]\n          },\n          components: z(a, function (t) {\n            return M(t, Eu);\n          }).concat(c.asSpec()),\n          behaviours: nc([mm(\"insert-table-picker\", [ou(function (t) {\n            Rg.set(c.get(t), [n]);\n          }), Er(Vb, function (t, n, e) {\n            var o = e.event,\n                r = o.row,\n                i = o.col;\n            !function (t, n, e) {\n              for (var o = 0; o < 10; o++) {\n                for (var r = 0; r < 10; r++) {\n                  Lg.set(t[o][r], o <= n && r <= e);\n                }\n              }\n            }(a, r, i), Rg.set(c.get(t), [Tb(r + 1, i + 1)]);\n          }), Er(Pb, function (t, n, e) {\n            var o = e.event,\n                r = o.row,\n                i = o.col;\n            u.onAction({\n              numRows: r + 1,\n              numColumns: i + 1\n            }), vr(t, Hi());\n          })]), Fg.config({\n            initSize: {\n              numRows: 10,\n              numColumns: 10\n            },\n            mode: \"flatgrid\",\n            selector: '[role=\"button\"]'\n          })])\n        })]\n      };\n    },\n    colorswatch: function colorswatch(n, t) {\n      var e,\n          o,\n          r,\n          i = (o = t, r = (e = n).initData.allowCustomColors && o.colorinput.hasCustomColors(), e.initData.colors.fold(function () {\n        return xb(o.colorinput.getColors(), r);\n      }, function (t) {\n        return t.concat(bb(r));\n      })),\n          u = t.colorinput.getColorCols(),\n          a = Ob(Ir(\"menu-value\"), i, function (t) {\n        n.onAction({\n          value: t\n        });\n      }, u, \"color\", Sh.CLOSE_ON_EXECUTE, T, t.shared.providers),\n          c = _lt(_lt({}, a), {\n        markers: Qp(\"color\"),\n        movement: _b(u, \"color\")\n      });\n\n      return {\n        type: \"widget\",\n        data: {\n          value: Ir(\"widget-id\")\n        },\n        dom: {\n          tag: \"div\",\n          classes: [\"tox-fancymenuitem\"]\n        },\n        autofocus: !0,\n        components: [ob.widget(tp.sketch(c))]\n      };\n    }\n  },\n      zb = function zb(t) {\n    var n = t.text.fold(function () {\n      return {};\n    }, function (t) {\n      return {\n        innerHtml: t\n      };\n    });\n    return {\n      type: \"separator\",\n      dom: _lt({\n        tag: \"div\",\n        classes: [Ch, \"tox-collection__group-heading\"]\n      }, n),\n      components: []\n    };\n  },\n      Nb = function Nb(t, n, e, o) {\n    void 0 === o && (o = !0);\n    var r = Ev({\n      presets: \"normal\",\n      iconContent: t.icon,\n      textContent: t.text,\n      htmlContent: vt.none(),\n      ariaLabel: t.text,\n      caret: vt.none(),\n      checkMark: vt.none(),\n      shortcutContent: t.shortcut\n    }, e, o);\n    return yv({\n      data: xv(t),\n      getApi: function getApi(n) {\n        return {\n          isDisabled: function isDisabled() {\n            return gd.isDisabled(n);\n          },\n          setDisabled: function setDisabled(t) {\n            return gd.set(n, t);\n          }\n        };\n      },\n      disabled: t.disabled,\n      onAction: t.onAction,\n      onSetup: t.onSetup,\n      triggersSubmenu: !1,\n      itemBehaviours: []\n    }, r, n, e);\n  },\n      Lb = function Lb(t, n, e, o, r) {\n    void 0 === o && (o = !0);\n    var i = (r = void 0 !== r && r) ? wv(\"chevron-down\", e.icons, [Bh]) : wv(\"chevron-right\", e.icons, [Bh]),\n        u = Ev({\n      presets: \"normal\",\n      iconContent: t.icon,\n      textContent: t.text,\n      htmlContent: vt.none(),\n      ariaLabel: t.text,\n      caret: vt.some(i),\n      checkMark: vt.none(),\n      shortcutContent: t.shortcut\n    }, e, o);\n    return yv({\n      data: xv(t),\n      getApi: function getApi(n) {\n        return {\n          isDisabled: function isDisabled() {\n            return gd.isDisabled(n);\n          },\n          setDisabled: function setDisabled(t) {\n            return gd.set(n, t);\n          }\n        };\n      },\n      disabled: t.disabled,\n      onAction: st,\n      onSetup: t.onSetup,\n      triggersSubmenu: !0,\n      itemBehaviours: []\n    }, u, n, e);\n  },\n      Wb = function Wb(t, n, e, o) {\n    void 0 === o && (o = !0);\n    var r = Ev({\n      iconContent: t.icon,\n      textContent: t.text,\n      htmlContent: vt.none(),\n      ariaLabel: t.text,\n      checkMark: vt.some(_v(e.icons)),\n      caret: vt.none(),\n      shortcutContent: t.shortcut,\n      presets: \"normal\",\n      meta: t.meta\n    }, e, o);\n    return Yo(yv({\n      data: xv(t),\n      disabled: t.disabled,\n      getApi: function getApi(n) {\n        return {\n          setActive: function setActive(t) {\n            Lg.set(n, t);\n          },\n          isActive: function isActive() {\n            return Lg.isOn(n);\n          },\n          isDisabled: function isDisabled() {\n            return gd.isDisabled(n);\n          },\n          setDisabled: function setDisabled(t) {\n            return gd.set(n, t);\n          }\n        };\n      },\n      onAction: t.onAction,\n      onSetup: t.onSetup,\n      triggersSubmenu: !1,\n      itemBehaviours: []\n    }, r, n, e), {\n      toggling: {\n        toggleClass: Th,\n        toggleOnExecute: !1,\n        selected: t.active\n      }\n    });\n  },\n      Ub = function Ub(n, e) {\n    return tt(Hb, n.fancytype).map(function (t) {\n      return t(n, e);\n    });\n  };\n\n  function jb(t, u, a, n, c, s, l) {\n    var e = 1 === n,\n        o = !e || oh(t);\n    return et(M(t, function (t) {\n      switch (t.type) {\n        case \"separator\":\n          return ao(\"Autocompleter.Separator\", Rp, t).fold(rh, function (t) {\n            return vt.some(zb(t));\n          });\n\n        case \"cardmenuitem\":\n          return ao(\"cardmenuitem\", Wh, t).fold(rh, function (n) {\n            return vt.some((t = _lt(_lt({}, n), {\n              onAction: function onAction(t) {\n                n.onAction(t), a(n.value, n.meta);\n              }\n            }), e = c, o = s, r = {\n              itemBehaviours: Dv(n.meta, s),\n              cardText: {\n                matchText: u,\n                highlightOn: l\n              }\n            }, i = {\n              dom: Tv(t.label),\n              optComponents: [vt.some({\n                dom: {\n                  tag: \"div\",\n                  classes: [Ah, Fh]\n                },\n                components: eb(t.items, r)\n              })]\n            }, yv({\n              data: xv(_lt({\n                text: vt.none()\n              }, t)),\n              disabled: t.disabled,\n              getApi: function getApi(e) {\n                return {\n                  isDisabled: function isDisabled() {\n                    return gd.isDisabled(e);\n                  },\n                  setDisabled: function setDisabled(n) {\n                    gd.set(e, n), St(vs(e.element, \"*\"), function (t) {\n                      e.getSystem().getByDom(t).each(function (t) {\n                        t.hasConfigured(gd) && gd.set(t, n);\n                      });\n                    });\n                  }\n                };\n              },\n              onAction: t.onAction,\n              onSetup: t.onSetup,\n              triggersSubmenu: !1,\n              itemBehaviours: vt.from(r.itemBehaviours).getOr([])\n            }, i, e, o.providers)));\n            var t, e, o, r, i;\n          });\n\n        default:\n          return ao(\"Autocompleter.Item\", Vp, t).fold(rh, function (t) {\n            return vt.some(function (n, e, t, o, r, i, u, a) {\n              void 0 === a && (a = !0);\n              var c = Ev({\n                presets: o,\n                textContent: vt.none(),\n                htmlContent: t ? n.text.map(function (t) {\n                  return Bv(t, e);\n                }) : vt.none(),\n                ariaLabel: n.text,\n                iconContent: n.icon,\n                shortcutContent: vt.none(),\n                checkMark: vt.none(),\n                caret: vt.none(),\n                value: n.value\n              }, u.providers, a, n.icon);\n              return yv({\n                data: xv(n),\n                disabled: n.disabled,\n                getApi: rt({}),\n                onAction: function onAction(t) {\n                  return r(n.value, n.meta);\n                },\n                onSetup: rt(st),\n                triggersSubmenu: !1,\n                itemBehaviours: Dv(n.meta, u)\n              }, c, i, u.providers);\n            }(t, u, e, \"normal\", a, c, s, o));\n          });\n      }\n    }));\n  }\n\n  function Gb(t, n, e, o, r) {\n    var i = oh(n),\n        u = et(M(n, function (t) {\n      function n(t) {\n        return function (t, n, e, o, r) {\n          function i(t) {\n            return r ? _lt(_lt({}, t), {\n              shortcut: vt.none(),\n              icon: t.text.isSome() ? vt.none() : t.icon\n            }) : t;\n          }\n\n          var u = e.shared.providers;\n\n          switch (t.type) {\n            case \"menuitem\":\n              return ao(\"menuitem\", Xh, t).fold(rh, function (t) {\n                return vt.some(Nb(i(t), n, u, o));\n              });\n\n            case \"nestedmenuitem\":\n              return ao(\"nestedmenuitem\", Yh, t).fold(rh, function (t) {\n                return vt.some(Lb(i(t), n, u, o, r));\n              });\n\n            case \"togglemenuitem\":\n              return ao(\"togglemenuitem\", qh, t).fold(rh, function (t) {\n                return vt.some(Wb(i(t), n, u, o));\n              });\n\n            case \"separator\":\n              return ao(\"separatormenuitem\", Rp, t).fold(rh, function (t) {\n                return vt.some(zb(t));\n              });\n\n            case \"fancymenuitem\":\n              return ao(\"fancymenuitem\", Gh, t).fold(rh, function (t) {\n                return Ub(i(t), e);\n              });\n\n            default:\n              return console.error(\"Unknown item in general menu\", t), vt.none();\n          }\n        }(t, e, o, r ? !Tt(t, \"text\") : i, r);\n      }\n\n      return \"nestedmenuitem\" === t.type && t.getSubmenuItems().length <= 0 ? n(_lt(_lt({}, t), {\n        disabled: !0\n      })) : n(t);\n    }));\n    return (r ? ih : uh)(t, i, u, 1, \"normal\");\n  }\n\n  function Xb(t) {\n    return ip.singleData(t.value, t);\n  }\n\n  function Yb(t, n, e) {\n    return Ru(t, n, e).isSome();\n  }\n\n  function qb(e, o) {\n    var r = null;\n    return {\n      cancel: function cancel() {\n        null !== r && (clearTimeout(r), r = null);\n      },\n      schedule: function schedule() {\n        for (var t = [], n = 0; n < arguments.length; n++) {\n          t[n] = arguments[n];\n        }\n\n        r = setTimeout(function () {\n          e.apply(null, t), r = null;\n        }, o);\n      }\n    };\n  }\n\n  function Kb(t) {\n    var n = t.raw;\n    return void 0 === n.touches || 1 !== n.touches.length ? vt.none() : vt.some(n.touches[0]);\n  }\n\n  function Jb() {\n    return le().browser.isFirefox();\n  }\n\n  function $b(n, t) {\n    var e,\n        o,\n        r,\n        i,\n        u,\n        a,\n        c,\n        s,\n        l,\n        f = _lt({\n      stopBackspace: !0\n    }, t),\n        d = (u = f, a = gc(), c = Po(!1), s = qb(function (t) {\n      u.triggerEvent(Pi(), t), c.set(!0);\n    }, 400), l = lr([{\n      key: si(),\n      value: function value(e) {\n        return Kb(e).each(function (t) {\n          s.cancel();\n          var n = {\n            x: t.clientX,\n            y: t.clientY,\n            target: e.target\n          };\n          s.schedule(e), c.set(!1), a.set(n);\n        }), vt.none();\n      }\n    }, {\n      key: li(),\n      value: function value(t) {\n        return s.cancel(), Kb(t).each(function (i) {\n          a.on(function (t) {\n            var n = i,\n                e = t,\n                o = Math.abs(n.clientX - e.x),\n                r = Math.abs(n.clientY - e.y);\n            (5 < o || 5 < r) && a.clear();\n          });\n        }), vt.none();\n      }\n    }, {\n      key: fi(),\n      value: function value(n) {\n        return s.cancel(), a.get().filter(function (t) {\n          return Lt(t.target, n.target);\n        }).map(function (t) {\n          return c.get() ? (n.prevent(), !1) : u.triggerEvent(Vi(), n);\n        });\n      }\n    }]), {\n      fireIfReady: function fireIfReady(n, t) {\n        return tt(l, t).bind(function (t) {\n          return t(n);\n        });\n      }\n    }),\n        m = M([\"touchstart\", \"touchmove\", \"touchend\", \"touchcancel\", \"gesturestart\", \"mousedown\", \"mouseup\", \"mouseover\", \"mousemove\", \"mouseout\", \"click\"].concat([\"selectstart\", \"input\", \"contextmenu\", \"change\", \"transitionend\", \"transitioncancel\", \"drag\", \"dragstart\", \"dragend\", \"dragenter\", \"dragleave\", \"dragover\", \"drop\", \"keyup\"]), function (t) {\n      return pc(n, t, function (n) {\n        d.fireIfReady(n, t).each(function (t) {\n          t && n.kill();\n        }), f.triggerEvent(t, n) && n.kill();\n      });\n    }),\n        g = gc(),\n        p = pc(n, \"paste\", function (n) {\n      d.fireIfReady(n, \"paste\").each(function (t) {\n        t && n.kill();\n      }), f.triggerEvent(\"paste\", n) && n.kill(), g.set(setTimeout(function () {\n        f.triggerEvent(Ai(), n);\n      }, 0));\n    }),\n        h = pc(n, \"keydown\", function (t) {\n      var n;\n      f.triggerEvent(\"keydown\", t) ? t.kill() : !f.stopBackspace || (n = t).raw.which !== vd[0] || wt([\"input\", \"textarea\"], Ft(n.target)) || Yb(n.target, '[contenteditable=\"true\"]') || t.prevent();\n    }),\n        v = (e = n, o = function o(t) {\n      f.triggerEvent(\"focusin\", t) && t.kill();\n    }, Jb() ? hc(e, \"focus\", o) : pc(e, \"focusin\", o)),\n        b = gc(),\n        y = (r = n, i = function i(t) {\n      f.triggerEvent(\"focusout\", t) && t.kill(), b.set(setTimeout(function () {\n        f.triggerEvent(Mi(), t);\n      }, 0));\n    }, Jb() ? hc(r, \"blur\", i) : pc(r, \"focusout\", i));\n\n    return {\n      unbind: function unbind() {\n        St(m, function (t) {\n          t.unbind();\n        }), h.unbind(), v.unbind(), y.unbind(), p.unbind(), g.on(clearTimeout), b.on(clearTimeout);\n      }\n    };\n  }\n\n  function Qb(t, n) {\n    return Po(tt(t, \"target\").getOr(n));\n  }\n\n  function Zb(t, o, n, e, r, i) {\n    var u,\n        a,\n        c = t(o, e),\n        s = (u = Po(!1), a = Po(!1), {\n      stop: function stop() {\n        u.set(!0);\n      },\n      cut: function cut() {\n        a.set(!0);\n      },\n      isStopped: u.get,\n      isCut: a.get,\n      event: n,\n      setSource: r.set,\n      getSource: r.get\n    });\n    return c.fold(function () {\n      return i.logEventNoHandlers(o, e), ay.complete();\n    }, function (n) {\n      var e = n.descHandler;\n      return Wr(e)(s), s.isStopped() ? (i.logEventStopped(o, n.element, e.purpose), ay.stopped()) : s.isCut() ? (i.logEventCut(o, n.element, e.purpose), ay.complete()) : Yt(n.element).fold(function () {\n        return i.logNoParent(o, n.element, e.purpose), ay.complete();\n      }, function (t) {\n        return i.logEventResponse(o, n.element, e.purpose), ay.resume(t);\n      });\n    });\n  }\n\n  function ty() {\n    function r(t) {\n      Rr(t.element).each(function (t) {\n        delete a[t], i.unregisterId(t);\n      });\n    }\n\n    var u,\n        i = (u = {}, {\n      registerId: function registerId(r, i, t) {\n        J(t, function (t, n) {\n          var e,\n              o = void 0 !== u[n] ? u[n] : {};\n          o[i] = {\n            cHandler: C.apply(void 0, [(e = t).handler].concat(r)),\n            purpose: e.purpose\n          }, u[n] = o;\n        });\n      },\n      unregisterId: function unregisterId(e) {\n        J(u, function (t, n) {\n          Tt(t, e) && delete t[e];\n        });\n      },\n      filterByType: function filterByType(t) {\n        return tt(u, t).map(function (t) {\n          return $(t, function (t, n) {\n            return {\n              id: n,\n              descHandler: t\n            };\n          });\n        }).getOr([]);\n      },\n      find: function find(t, n, e) {\n        return tt(u, n).bind(function (o) {\n          return mr(e, function (t) {\n            return n = o, Rr(e = t).bind(function (t) {\n              return tt(n, t);\n            }).map(function (t) {\n              return {\n                element: e,\n                descHandler: t\n              };\n            });\n            var n, e;\n          }, t);\n        });\n      }\n    }),\n        a = {};\n    return {\n      find: function find(t, n, e) {\n        return i.find(t, n, e);\n      },\n      filter: function filter(t) {\n        return i.filterByType(t);\n      },\n      register: function register(t) {\n        var e,\n            o = Rr((e = t).element).getOrThunk(function () {\n          return t = e.element, n = Ir(du + \"uid-\"), gu(t, n), n;\n          var t, n;\n        });\n        nt(a, o) && function (t) {\n          var n = a[o];\n          if (n !== t) throw new Error('The tagId \"' + o + '\" is already used by: ' + Fr(n.element) + \"\\nCannot use it for: \" + Fr(t.element) + \"\\nThe conflicting element is\" + (ve(n.element) ? \" \" : \" not \") + \"already in the DOM\");\n          r(t);\n        }(t), i.registerId([t], o, t.events), a[o] = t;\n      },\n      unregister: r,\n      getById: function getById(t) {\n        return tt(a, t);\n      }\n    };\n  }\n\n  function ny(e) {\n    function o(n) {\n      return Yt(e.element).fold(D, function (t) {\n        return Lt(n, t);\n      });\n    }\n\n    function s(t, n) {\n      return i.find(o, t, n);\n    }\n\n    function r(n) {\n      var t = i.filter(Fi());\n      St(t, function (t) {\n        Wr(t.descHandler)(n);\n      });\n    }\n\n    var i = ty(),\n        t = $b(e.element, {\n      triggerEvent: function triggerEvent(n, e) {\n        return Lu(n, e.target, function (t) {\n          return sy(s, n, e, e.target, t);\n        });\n      }\n    }),\n        u = {\n      debugInfo: rt(\"real\"),\n      triggerEvent: function triggerEvent(n, e, o) {\n        Lu(n, e, function (t) {\n          return sy(s, n, o, e, t);\n        });\n      },\n      triggerFocus: function triggerFocus(a, c) {\n        Rr(a).fold(function () {\n          ka(a);\n        }, function (t) {\n          Lu(Bi(), a, function (t) {\n            var n,\n                e,\n                o = s,\n                r = Bi(),\n                i = t,\n                u = Qb(n = {\n              originator: c,\n              kill: st,\n              prevent: st,\n              target: a\n            }, e = a);\n            return Zb(o, r, n, e, u, i), !1;\n          });\n        });\n      },\n      triggerEscape: function triggerEscape(t, n) {\n        u.triggerEvent(\"keydown\", t.element, n.event);\n      },\n      getByUid: function getByUid(t) {\n        return g(t);\n      },\n      getByDom: function getByDom(t) {\n        return p(t);\n      },\n      build: Tu,\n      addToGui: function addToGui(t) {\n        c(t);\n      },\n      removeFromGui: function removeFromGui(t) {\n        l(t);\n      },\n      addToWorld: function addToWorld(t) {\n        n(t);\n      },\n      removeFromWorld: function removeFromWorld(t) {\n        a(t);\n      },\n      broadcast: function broadcast(t) {\n        f(t);\n      },\n      broadcastOn: function broadcastOn(t, n) {\n        d(t, n);\n      },\n      broadcastEvent: function broadcastEvent(t, n) {\n        m(t, n);\n      },\n      isConnected: D\n    },\n        n = function n(t) {\n      t.connect(u), Yn(t.element) || (i.register(t), St(t.components(), n), u.triggerEvent(Ni(), t.element, {\n        target: t.element\n      }));\n    },\n        a = function a(t) {\n      Yn(t.element) || (St(t.components(), a), i.unregister(t)), t.disconnect();\n    },\n        c = function c(t) {\n      Vs(e, t);\n    },\n        l = function l(t) {\n      Hs(t);\n    },\n        f = function f(t) {\n      r({\n        universal: !0,\n        data: t\n      });\n    },\n        d = function d(t, n) {\n      r({\n        universal: !1,\n        channels: t,\n        data: n\n      });\n    },\n        m = function m(t, n) {\n      var e,\n          o,\n          r = i.filter(t);\n      return o = {\n        stop: function stop() {\n          e.set(!0);\n        },\n        cut: st,\n        isStopped: (e = Po(!1)).get,\n        isCut: T,\n        event: n,\n        setSource: _(\"Cannot set source of a broadcasted event\"),\n        getSource: _(\"Cannot get source of a broadcasted event\")\n      }, St(r, function (t) {\n        Wr(t.descHandler)(o);\n      }), o.isStopped();\n    },\n        g = function g(t) {\n      return i.getById(t).fold(function () {\n        return Ve.error(new Error('Could not find component with uid: \"' + t + '\" in system.'));\n      }, Ve.value);\n    },\n        p = function p(t) {\n      var n = Rr(t).getOr(\"not found\");\n      return g(n);\n    };\n\n    return n(e), {\n      root: e,\n      element: e.element,\n      destroy: function destroy() {\n        t.unbind(), Ee(e.element);\n      },\n      add: c,\n      remove: l,\n      getByUid: g,\n      getByDom: p,\n      addToWorld: n,\n      removeFromWorld: a,\n      broadcast: f,\n      broadcastOn: d,\n      broadcastEvent: m\n    };\n  }\n\n  function ey(t, n, e, o) {\n    var r = vy(t, n, e, o);\n    return my.sketch(r);\n  }\n\n  function oy(t, n) {\n    return my.parts.label({\n      dom: {\n        tag: \"label\",\n        classes: [\"tox-label\"],\n        innerHtml: n.translate(t)\n      }\n    });\n  }\n\n  function ry(t) {\n    return nc([Hg.config({\n      onFocus: t.selectOnFocus ? function (t) {\n        var n = t.element,\n            e = Qr(n);\n        n.dom.setSelectionRange(0, e.length);\n      } : st\n    })]);\n  }\n\n  function iy(t) {\n    return {\n      tag: t.tag,\n      attributes: _lt({\n        type: \"text\"\n      }, t.inputAttributes),\n      styles: t.inputStyles,\n      classes: t.inputClasses\n    };\n  }\n\n  (Db = Eb = {})[Db.ContentFocus = 0] = \"ContentFocus\", Db[Db.UiFocus = 1] = \"UiFocus\";\n\n  function uy(f, c) {\n    function e() {\n      return r.get().isSome();\n    }\n\n    function s() {\n      e() && up.hide(d);\n    }\n\n    var o,\n        t,\n        r = gc(),\n        l = Po(!1),\n        d = Tu(up.sketch({\n      dom: {\n        tag: \"div\",\n        classes: [\"tox-autocompleter\"]\n      },\n      components: [],\n      fireDismissalEventInstead: {},\n      inlineBehaviours: nc([mm(\"dismissAutocompleter\", [Cr(Yi(), function () {\n        return m();\n      })])]),\n      lazySink: c.getSink\n    })),\n        m = function m() {\n      var t;\n      e() && (t = r.get().map(function (t) {\n        return t.element;\n      }), Mp(t.getOr(At.fromDom(f.selection.getNode()))).each(In), s(), r.clear(), l.set(!1));\n    },\n        u = Rt(function () {\n      return e = dt(f.ui.registry.getAll().popups, function (t) {\n        return ao(\"Autocompleter\", Pp, t).fold(function (t) {\n          throw new Error(ur(t));\n        }, h);\n      }), t = $(e, function (t) {\n        return t.ch;\n      }), n = {}, St(t, function (t) {\n        n[t] = {};\n      }), o = Ct(n), r = Z(e), {\n        dataset: e,\n        triggerChars: o,\n        lookupByChar: function lookupByChar(n) {\n          return F(r, function (t) {\n            return t.ch === n;\n          });\n        }\n      };\n      var t, n, e, o, r;\n    }),\n        g = function g(t) {\n      var n = t;\n      r.get().map(function (t) {\n        return kp(f.dom, f.selection.getRng(), t.triggerChar).bind(function (t) {\n          return Tp(f, u, t, n);\n        });\n      }).getOrThunk(function () {\n        return n = f, t = (e = u)(), o = n.selection.getRng(), r = n.dom, i = o, K(t.triggerChars, function (t) {\n          return kp(r, i, t);\n        }).bind(function (t) {\n          return Tp(n, e, t);\n        });\n        var n, e, t, o, r, i;\n      }).fold(m, function (a) {\n        var t,\n            n = a.context;\n        e() || (t = yp(f, n.range), r.set({\n          triggerChar: n.triggerChar,\n          element: t,\n          matchLength: n.text.length\n        }), l.set(!1)), a.lookupData.then(function (u) {\n          r.get().map(function (t) {\n            var n,\n                e,\n                o,\n                r,\n                i = a.context;\n            t.triggerChar === i.triggerChar && (e = i.triggerChar, r = K(o = u, function (t) {\n              return vt.from(t.columns);\n            }).getOr(1), 0 < (n = z(o, function (i) {\n              return jb(i.items, i.matchText, function (o, r) {\n                var t = f.selection.getRng();\n                kp(f.dom, t, e).fold(function () {\n                  return console.error(\"Lost context. Cursor probably moved\");\n                }, function (t) {\n                  var n = t.range,\n                      e = {\n                    hide: function hide() {\n                      m();\n                    },\n                    reload: function reload(t) {\n                      s(), g(t);\n                    }\n                  };\n                  l.set(!0), i.onAction(e, n, o, r), l.set(!1);\n                });\n              }, r, Sh.BUBBLE_TO_SANDBOX, c, i.highlightOn);\n            })).length ? function (t, n, e, o) {\n              t.matchLength = n.text.length;\n              var r,\n                  i,\n                  u,\n                  a,\n                  c,\n                  s,\n                  l = K(e, function (t) {\n                return vt.from(t.columns);\n              }).getOr(1);\n              up.showAt(d, tp.sketch((r = uh(\"autocompleter-value\", !0, o, l, \"normal\"), i = l, a = ((u = Eb.ContentFocus) === Eb.ContentFocus ? Ul : Wl)(), c = _b(i, \"normal\"), s = Qp(\"normal\"), {\n                dom: r.dom,\n                components: r.components,\n                items: r.items,\n                value: r.value,\n                markers: {\n                  selectedItem: s.selectedItem,\n                  item: s.item\n                },\n                movement: c,\n                fakeFocus: u === Eb.ContentFocus,\n                focusManager: a,\n                menuBehaviours: Kh(\"auto\" !== i ? [] : [ou(function (o, t) {\n                  ah(o, 4, s.item).each(function (t) {\n                    var n = t.numColumns,\n                        e = t.numRows;\n                    Fg.setGridSize(o, e, n);\n                  });\n                })])\n              })), {\n                anchor: {\n                  type: \"node\",\n                  root: At.fromDom(f.getBody()),\n                  node: vt.from(t.element)\n                }\n              }), up.getContent(d).each(hd.highlightFirst);\n            }(t, i, u, n) : (10 <= i.text.length - t.matchLength ? m : s)());\n          });\n        });\n      });\n    },\n        n = {\n      onKeypress: vp(function (t) {\n        27 !== t.which && g();\n      }, 50),\n      cancelIfNecessary: m,\n      isMenuOpen: function isMenuOpen() {\n        return up.isOpen(d);\n      },\n      isActive: e,\n      isProcessingAction: l.get,\n      getView: function getView() {\n        return up.getContent(d);\n      }\n    };\n\n    function i(t, n) {\n      br(t, xi(), {\n        raw: n\n      });\n    }\n\n    !1 === f.hasPlugin(\"rtc\") && (o = n, (t = f).on(\"keypress compositionend\", o.onKeypress.throttle), t.on(\"remove\", o.onKeypress.cancel), t.on(\"keydown\", function (n) {\n      function t() {\n        return o.getView().bind(hd.getHighlighted);\n      }\n\n      8 === n.which && o.onKeypress.throttle(n), o.isActive() && (27 === n.which && o.cancelIfNecessary(), o.isMenuOpen() ? 13 === n.which ? (t().each(yr), n.preventDefault()) : 40 === n.which ? (t().fold(function () {\n        o.getView().each(hd.highlightFirst);\n      }, function (t) {\n        i(t, n);\n      }), n.preventDefault(), n.stopImmediatePropagation()) : 37 !== n.which && 38 !== n.which && 39 !== n.which || t().each(function (t) {\n        i(t, n), n.preventDefault(), n.stopImmediatePropagation();\n      }) : 13 !== n.which && 38 !== n.which && 40 !== n.which || o.cancelIfNecessary());\n    }), t.on(\"NodeChange\", function (t) {\n      o.isActive() && !o.isProcessingAction() && Mp(At.fromDom(t.element)).isNone() && o.cancelIfNecessary();\n    }));\n  }\n\n  var ay = Ho([{\n    stopped: []\n  }, {\n    resume: [\"element\"]\n  }, {\n    complete: []\n  }]),\n      cy = function cy(n, e, o, t, r, i) {\n    return Zb(n, e, o, t, r, i).fold(D, function (t) {\n      return cy(n, e, o, t, r, i);\n    }, T);\n  },\n      sy = function sy(t, n, e, o, r) {\n    var i = Qb(e, o);\n    return cy(t, n, e, o, i, r);\n  },\n      ly = kl({\n    name: \"Container\",\n    factory: function factory(t) {\n      var n = t.dom,\n          e = n.attributes,\n          o = B(n, [\"attributes\"]);\n      return {\n        uid: t.uid,\n        dom: _lt({\n          tag: \"div\",\n          attributes: _lt({\n            role: \"presentation\"\n          }, e)\n        }, o),\n        components: t.components,\n        behaviours: tl(t.containerBehaviours),\n        events: t.events,\n        domModification: t.domModification,\n        eventOrder: t.eventOrder\n      };\n    },\n    configFields: [Eo(\"components\", []), Zs(\"containerBehaviours\", []), Eo(\"events\", {}), Eo(\"domModification\", {}), Eo(\"eventOrder\", {})]\n  }),\n      fy = rt([Eo(\"prefix\", \"form-field\"), Zs(\"fieldBehaviours\", [cd, Df])]),\n      dy = rt([Qf({\n    schema: [mo(\"dom\")],\n    name: \"label\"\n  }), Qf({\n    factory: {\n      sketch: function sketch(t) {\n        return {\n          uid: t.uid,\n          dom: {\n            tag: \"span\",\n            styles: {\n              display: \"none\"\n            },\n            attributes: {\n              \"aria-hidden\": \"true\"\n            },\n            innerHtml: t.text\n          }\n        };\n      }\n    },\n    schema: [mo(\"text\")],\n    name: \"aria-descriptor\"\n  }), Jf({\n    factory: {\n      sketch: function sketch(t) {\n        var e,\n            o,\n            n = (e = [\"factory\"], o = {}, J(t, function (t, n) {\n          wt(e, n) || (o[n] = t);\n        }), o);\n        return t.factory.sketch(n);\n      }\n    },\n    schema: [mo(\"factory\")],\n    name: \"field\"\n  })]),\n      my = Cl({\n    name: \"FormField\",\n    configFields: fy(),\n    partFields: dy(),\n    factory: function factory(r, t, n, e) {\n      var o = nl(r.fieldBehaviours, [cd.config({\n        find: function find(t) {\n          return ml(t, r, \"field\");\n        }\n      }), Df.config({\n        store: {\n          mode: \"manual\",\n          getValue: function getValue(t) {\n            return cd.getCurrent(t).bind(Df.getValue);\n          },\n          setValue: function setValue(t, n) {\n            cd.getCurrent(t).each(function (t) {\n              Df.setValue(t, n);\n            });\n          }\n        }\n      })]),\n          i = eu([ou(function (t, n) {\n        var o = pl(t, r, [\"label\", \"field\", \"aria-descriptor\"]);\n        o.field().each(function (e) {\n          var n = Ir(r.prefix);\n          o.label().each(function (t) {\n            on(t.element, \"for\", n), on(e.element, \"id\", n);\n          }), o[\"aria-descriptor\"]().each(function (t) {\n            var n = Ir(r.prefix);\n            on(t.element, \"id\", n), on(e.element, \"aria-describedby\", n);\n          });\n        });\n      })]);\n      return {\n        uid: r.uid,\n        dom: r.dom,\n        components: t,\n        behaviours: o,\n        events: i,\n        apis: {\n          getField: function getField(t) {\n            return ml(t, r, \"field\");\n          },\n          getLabel: function getLabel(t) {\n            return ml(t, r, \"label\");\n          }\n        }\n      };\n    },\n    apis: {\n      getField: function getField(t, n) {\n        return t.getField(n);\n      },\n      getLabel: function getLabel(t, n) {\n        return t.getLabel(n);\n      }\n    }\n  }),\n      gy = Object.freeze({\n    __proto__: null,\n    exhibit: function exhibit(t, n) {\n      return Lr({\n        attributes: lr([{\n          key: n.tabAttr,\n          value: \"true\"\n        }])\n      });\n    }\n  }),\n      py = xa({\n    fields: [Eo(\"tabAttr\", \"data-alloy-tabstop\")],\n    name: \"tabstopping\",\n    active: gy\n  }),\n      hy = tinymce.util.Tools.resolve(\"tinymce.html.Entities\"),\n      vy = function vy(t, n, e, o) {\n    return {\n      dom: by(e),\n      components: t.toArray().concat([n]),\n      fieldBehaviours: nc(o)\n    };\n  },\n      by = function by(t) {\n    return {\n      tag: \"div\",\n      classes: [\"tox-form__group\"].concat(t)\n    };\n  },\n      yy = Ir(\"form-component-change\"),\n      xy = Ir(\"form-close\"),\n      wy = Ir(\"form-cancel\"),\n      Sy = Ir(\"form-action\"),\n      ky = Ir(\"form-submit\"),\n      Cy = Ir(\"form-block\"),\n      Oy = Ir(\"form-unblock\"),\n      _y = Ir(\"form-tabchange\"),\n      Ty = Ir(\"form-resize\"),\n      Ey = rt([wo(\"data\"), Eo(\"inputAttributes\", {}), Eo(\"inputStyles\", {}), Eo(\"tag\", \"input\"), Eo(\"inputClasses\", []), Ju(\"onSetValue\"), Eo(\"styles\", {}), Eo(\"eventOrder\", {}), Zs(\"inputBehaviours\", [Df, Hg]), Eo(\"selectOnFocus\", !0)]),\n      Dy = kl({\n    name: \"Input\",\n    configFields: Ey(),\n    factory: function factory(t, n) {\n      return {\n        uid: t.uid,\n        dom: iy(t),\n        components: [],\n        behaviours: _lt(_lt({}, ry(e = t)), nl(e.inputBehaviours, [Df.config({\n          store: _lt(_lt({\n            mode: \"manual\"\n          }, e.data.map(function (t) {\n            return {\n              initialValue: t\n            };\n          }).getOr({})), {\n            getValue: function getValue(t) {\n              return Qr(t.element);\n            },\n            setValue: function setValue(t, n) {\n              Qr(t.element) !== n && Zr(t.element, n);\n            }\n          }),\n          onSetValue: e.onSetValue\n        })])),\n        eventOrder: t.eventOrder\n      };\n      var e;\n    }\n  }),\n      By = {},\n      My = {\n    exports: By\n  };\n\n  function Ay(t) {\n    setTimeout(function () {\n      throw t;\n    }, 0);\n  }\n\n  function Fy(t) {\n    var n = Ft(t);\n    return wt(Xy, n);\n  }\n\n  function Iy(t, n) {\n    qr(n.getRoot(t).getOr(t.element), n.invalidClass), n.notify.each(function (n) {\n      Fy(t.element) && on(t.element, \"aria-invalid\", !1), n.getContainer(t).each(function (t) {\n        Ar(t, n.validHtml);\n      }), n.onValid(t);\n    });\n  }\n\n  function Ry(n, t, e, o) {\n    Yr(t.getRoot(n).getOr(n.element), t.invalidClass), t.notify.each(function (t) {\n      Fy(n.element) && on(n.element, \"aria-invalid\", !0), t.getContainer(n).each(function (t) {\n        Ar(t, o);\n      }), t.onInvalid(n, o);\n    });\n  }\n\n  function Vy(n, t, e) {\n    return t.validator.fold(function () {\n      return Gy(Ve.value(!0));\n    }, function (t) {\n      return t.validate(n);\n    });\n  }\n\n  function Py(n, e, t) {\n    return e.notify.each(function (t) {\n      t.onValidate(n);\n    }), Vy(n, e).map(function (t) {\n      return n.getSystem().isConnected() ? t.fold(function (t) {\n        return Ry(n, e, 0, t), Ve.error(t);\n      }, function (t) {\n        return Iy(n, e), Ve.value(t);\n      }) : Ve.error(\"No longer in system\");\n    });\n  }\n\n  !function () {\n    var t = this,\n        n = function n() {\n      var t,\n          n,\n          e,\n          o = {\n        exports: {}\n      };\n\n      function r() {}\n\n      function i(t) {\n        if (\"object\" != _typeof(this)) throw new TypeError(\"Promises must be constructed via new\");\n        if (\"function\" != typeof t) throw new TypeError(\"not a function\");\n        this._state = 0, this._handled = !1, this._value = void 0, this._deferreds = [], f(t, this);\n      }\n\n      function u(e, o) {\n        for (; 3 === e._state;) {\n          e = e._value;\n        }\n\n        0 !== e._state ? (e._handled = !0, i._immediateFn(function () {\n          var t,\n              n = 1 === e._state ? o.onFulfilled : o.onRejected;\n\n          if (null !== n) {\n            try {\n              t = n(e._value);\n            } catch (t) {\n              return void c(o.promise, t);\n            }\n\n            a(o.promise, t);\n          } else (1 === e._state ? a : c)(o.promise, e._value);\n        })) : e._deferreds.push(o);\n      }\n\n      function a(n, t) {\n        try {\n          if (t === n) throw new TypeError(\"A promise cannot be resolved with itself.\");\n\n          if (t && (\"object\" == _typeof(t) || \"function\" == typeof t)) {\n            var e = t.then;\n            if (t instanceof i) return n._state = 3, n._value = t, void s(n);\n            if (\"function\" == typeof e) return void f((o = e, r = t, function () {\n              o.apply(r, arguments);\n            }), n);\n          }\n\n          n._state = 1, n._value = t, s(n);\n        } catch (t) {\n          c(n, t);\n        }\n\n        var o, r;\n      }\n\n      function c(t, n) {\n        t._state = 2, t._value = n, s(t);\n      }\n\n      function s(t) {\n        2 === t._state && 0 === t._deferreds.length && i._immediateFn(function () {\n          t._handled || i._unhandledRejectionFn(t._value);\n        });\n\n        for (var n = 0, e = t._deferreds.length; n < e; n++) {\n          u(t, t._deferreds[n]);\n        }\n\n        t._deferreds = null;\n      }\n\n      function l(t, n, e) {\n        this.onFulfilled = \"function\" == typeof t ? t : null, this.onRejected = \"function\" == typeof n ? n : null, this.promise = e;\n      }\n\n      function f(t, n) {\n        var e = !1;\n\n        try {\n          t(function (t) {\n            e || (e = !0, a(n, t));\n          }, function (t) {\n            e || (e = !0, c(n, t));\n          });\n        } catch (t) {\n          if (e) return;\n          e = !0, c(n, t);\n        }\n      }\n\n      t = o, n = \"undefined\" != typeof globalThis ? globalThis : \"undefined\" != typeof window ? window : \"undefined\" != typeof __webpack_require__.g ? __webpack_require__.g : \"undefined\" != typeof self ? self : {}, e = setTimeout, i.prototype[\"catch\"] = function (t) {\n        return this.then(null, t);\n      }, i.prototype.then = function (t, n) {\n        var e = new this.constructor(r);\n        return u(this, new l(t, n, e)), e;\n      }, i.all = function (t) {\n        var a = Array.prototype.slice.call(t);\n        return new i(function (r, i) {\n          if (0 === a.length) return r([]);\n\n          for (var u = a.length, t = 0; t < a.length; t++) {\n            !function n(e, t) {\n              try {\n                if (t && (\"object\" == _typeof(t) || \"function\" == typeof t)) {\n                  var o = t.then;\n                  if (\"function\" == typeof o) return o.call(t, function (t) {\n                    n(e, t);\n                  }, i), 0;\n                }\n\n                a[e] = t, 0 == --u && r(a);\n              } catch (t) {\n                i(t);\n              }\n            }(t, a[t]);\n          }\n        });\n      }, i.resolve = function (n) {\n        return n && \"object\" == _typeof(n) && n.constructor === i ? n : new i(function (t) {\n          t(n);\n        });\n      }, i.reject = function (e) {\n        return new i(function (t, n) {\n          n(e);\n        });\n      }, i.race = function (r) {\n        return new i(function (t, n) {\n          for (var e = 0, o = r.length; e < o; e++) {\n            r[e].then(t, n);\n          }\n        });\n      }, i._immediateFn = \"function\" == typeof setImmediate ? function (t) {\n        setImmediate(t);\n      } : function (t) {\n        e(t, 0);\n      }, i._unhandledRejectionFn = function (t) {\n        \"undefined\" != typeof console && console && console.warn(\"Possible Unhandled Promise Rejection:\", t);\n      }, i._setImmediateFn = function (t) {\n        i._immediateFn = t;\n      }, i._setUnhandledRejectionFn = function (t) {\n        i._unhandledRejectionFn = t;\n      }, t.exports ? t.exports = i : n.Promise || (n.Promise = i);\n      var d = o.exports;\n      return {\n        boltExport: (\"undefined\" != typeof window ? window : Function(\"return this;\")()).Promise || d\n      };\n    };\n\n    \"object\" == _typeof(By) && void 0 !== My ? My.exports = n() : (t = \"undefined\" != typeof globalThis ? globalThis : t || self).EphoxContactWrapper = n();\n  }();\n\n  var Hy,\n      zy,\n      Ny = My.exports.boltExport,\n      Ly = function Ly(t) {\n    function o(t) {\n      r() ? i(t) : n.push(t);\n    }\n\n    var e = vt.none(),\n        n = [],\n        r = function r() {\n      return e.isSome();\n    },\n        i = function i(n) {\n      e.each(function (t) {\n        setTimeout(function () {\n          n(t);\n        }, 0);\n      });\n    };\n\n    return t(function (t) {\n      r() || (e = vt.some(t), St(n, i), n = []);\n    }), {\n      get: o,\n      map: function map(e) {\n        return Ly(function (n) {\n          o(function (t) {\n            n(e(t));\n          });\n        });\n      },\n      isReady: r\n    };\n  },\n      Wy = {\n    nu: Ly,\n    pure: function pure(n) {\n      return Ly(function (t) {\n        t(n);\n      });\n    }\n  },\n      Uy = function Uy(e) {\n    function t(t) {\n      e().then(t, Ay);\n    }\n\n    return {\n      map: function map(t) {\n        return Uy(function () {\n          return e().then(t);\n        });\n      },\n      bind: function bind(n) {\n        return Uy(function () {\n          return e().then(function (t) {\n            return n(t).toPromise();\n          });\n        });\n      },\n      anonBind: function anonBind(t) {\n        return Uy(function () {\n          return e().then(function () {\n            return t.toPromise();\n          });\n        });\n      },\n      toLazy: function toLazy() {\n        return Wy.nu(t);\n      },\n      toCached: function toCached() {\n        var t = null;\n        return Uy(function () {\n          return t = null === t ? e() : t;\n        });\n      },\n      toPromise: e,\n      get: t\n    };\n  },\n      jy = function jy(t) {\n    return Uy(function () {\n      return new Ny(t);\n    });\n  },\n      Gy = function Gy(t) {\n    return Uy(function () {\n      return Ny.resolve(t);\n    });\n  },\n      Xy = [\"input\", \"textarea\"],\n      Yy = Object.freeze({\n    __proto__: null,\n    markValid: Iy,\n    markInvalid: Ry,\n    query: Vy,\n    run: Py,\n    isInvalid: function isInvalid(t, n) {\n      return Kr(n.getRoot(t).getOr(t.element), n.invalidClass);\n    }\n  }),\n      qy = Object.freeze({\n    __proto__: null,\n    events: function events(n, t) {\n      return n.validator.map(function (t) {\n        return eu([Cr(t.onEvent, function (t) {\n          Py(t, n).get(h);\n        })].concat(t.validateOnLoad ? [ou(function (t) {\n          Py(t, n).get(st);\n        })] : []));\n      }).getOr({});\n    }\n  }),\n      Ky = xa({\n    fields: [mo(\"invalidClass\"), Eo(\"getRoot\", vt.none), To(\"notify\", [Eo(\"aria\", \"alert\"), Eo(\"getContainer\", vt.none), Eo(\"validHtml\", \"\"), Ju(\"onValid\"), Ju(\"onInvalid\"), Ju(\"onValidate\")]), To(\"validator\", [mo(\"validate\"), Eo(\"onEvent\", \"input\"), Eo(\"validateOnLoad\", !0)])],\n    name: \"invalidating\",\n    active: qy,\n    apis: Yy,\n    extra: {\n      validation: function validation(e) {\n        return function (t) {\n          var n = Df.getValue(t);\n          return Gy(e(n));\n        };\n      }\n    }\n  }),\n      Jy = Object.freeze({\n    __proto__: null,\n    getCoupled: function getCoupled(t, n, e, o) {\n      return e.getOrCreate(t, n, o);\n    }\n  }),\n      $y = xa({\n    fields: [go(\"others\", uo(Ve.value, Zo()))],\n    name: \"coupling\",\n    apis: Jy,\n    state: Object.freeze({\n      __proto__: null,\n      init: function init() {\n        var i = {},\n            t = rt({});\n        return wu({\n          readState: t,\n          getOrCreate: function getOrCreate(e, o, r) {\n            var t = Ct(o.others);\n            if (t) return tt(i, r).getOrThunk(function () {\n              var t = tt(o.others, r).getOrDie(\"No information found for coupled component: \" + r)(e),\n                  n = e.getSystem().build(t);\n              return i[r] = n;\n            });\n            throw new Error(\"Cannot find coupled component: \" + r + \". Known coupled components: \" + JSON.stringify(t, null, 2));\n          }\n        });\n      }\n    })\n  }),\n      Qy = rt(\"sink\"),\n      Zy = rt(Qf({\n    name: Qy(),\n    overrides: rt({\n      dom: {\n        tag: \"div\"\n      },\n      behaviours: nc([ff.config({\n        useFixed: D\n      })]),\n      events: eu([Dr(xi()), Dr(mi()), Dr(Ci())])\n    })\n  }));\n\n  function tx(t, n) {\n    var e = t.getHotspot(n).getOr(n),\n        o = t.getAnchorOverrides();\n    return t.layouts.fold(function () {\n      return {\n        type: \"hotspot\",\n        hotspot: e,\n        overrides: o\n      };\n    }, function (t) {\n      return {\n        type: \"hotspot\",\n        hotspot: e,\n        overrides: o,\n        layouts: t\n      };\n    });\n  }\n\n  function nx(t, n, e, o, r, i, u) {\n    var a,\n        c = tx(t, e),\n        s = e,\n        l = o,\n        f = r,\n        d = u,\n        m = n,\n        g = (0, (a = t).fetch)(s).map(m),\n        p = mw(s, a);\n    return g.map(function (t) {\n      return t.bind(function (t) {\n        return vt.from(ip.sketch(_lt(_lt({}, f.menu()), {\n          uid: pu(\"\"),\n          data: t,\n          highlightImmediately: d === Hy.HighlightFirst,\n          onOpenMenu: function onOpenMenu(t, n) {\n            var e = p().getOrDie();\n            ff.position(e, n, {\n              anchor: c\n            }), bf.decloak(l);\n          },\n          onOpenSubmenu: function onOpenSubmenu(t, n, e) {\n            var o = p().getOrDie();\n            ff.position(o, e, {\n              anchor: {\n                type: \"submenu\",\n                item: n\n              }\n            }), bf.decloak(l);\n          },\n          onRepositionMenu: function onRepositionMenu(t, n, e) {\n            var o = p().getOrDie();\n            ff.position(o, n, {\n              anchor: c\n            }), St(e, function (t) {\n              ff.position(o, t.triggeredMenu, {\n                anchor: {\n                  type: \"submenu\",\n                  item: t.triggeringItem\n                }\n              });\n            });\n          },\n          onEscape: function onEscape() {\n            return Hg.focus(s), bf.close(l), vt.some(!0);\n          }\n        })));\n      });\n    }).map(function (t) {\n      return t.fold(function () {\n        bf.isOpen(o) && bf.close(o);\n      }, function (t) {\n        bf.cloak(o), bf.open(o, t), i(o);\n      }), o;\n    });\n  }\n\n  function ex(t, n, e, o, r, i) {\n    var u = $y.getCoupled(e, \"sandbox\");\n    return (bf.isOpen(u) ? function (t, n, e, o, r, i, u) {\n      return bf.close(o), Gy(o);\n    } : nx)(t, n, e, u, o, r, i);\n  }\n\n  function ox(t) {\n    bf.getState(t).each(function (t) {\n      ip.repositionMenus(t);\n    });\n  }\n\n  function rx(s, l, f) {\n    var d = Vu(),\n        t = mw(l, s);\n    return {\n      dom: {\n        tag: \"div\",\n        classes: s.sandboxClasses,\n        attributes: {\n          id: d.id,\n          role: \"listbox\"\n        }\n      },\n      behaviours: Mf(s.sandboxBehaviours, [Df.config({\n        store: {\n          mode: \"memory\",\n          initialValue: l\n        }\n      }), bf.config({\n        onOpen: function onOpen(t, n) {\n          var e,\n              o,\n              r,\n              i,\n              u,\n              a,\n              c = tx(s, l);\n          d.link(l.element), s.matchWidth && (e = c.hotspot, o = n, r = s.useMinWidth, u = cd.getCurrent(o).getOr(o), a = On(e.element), r ? dn(u.element, \"min-width\", a + \"px\") : (i = u.element, Oe.set(i, a))), s.onOpen(c, t, n), void 0 !== f && void 0 !== f.onOpen && f.onOpen(t, n);\n        },\n        onClose: function onClose(t, n) {\n          d.unlink(l.element), void 0 !== f && void 0 !== f.onClose && f.onClose(t, n);\n        },\n        isPartOf: function isPartOf(t, n, e) {\n          return zu(n, e) || zu(l, e);\n        },\n        getAttachPoint: function getAttachPoint() {\n          return t().getOrDie();\n        }\n      }), cd.config({\n        find: function find(t) {\n          return bf.getState(t).bind(function (t) {\n            return cd.getCurrent(t);\n          });\n        }\n      }), ic.config({\n        channels: _lt(_lt({}, Xs({\n          isExtraPart: T\n        })), Ys({\n          doReposition: ox\n        }))\n      })])\n    };\n  }\n\n  function ix(t) {\n    ox($y.getCoupled(t, \"sandbox\"));\n  }\n\n  function ux() {\n    return [Eo(\"sandboxClasses\", []), Bf(\"sandboxBehaviours\", [cd, ic, bf, Df])];\n  }\n\n  function ax(n) {\n    return Qf({\n      name: n + \"-edge\",\n      overrides: function overrides(t) {\n        return t.model.manager.edgeActions[n].fold(function () {\n          return {};\n        }, function (o) {\n          return {\n            events: eu([Or(si(), function (t, n, e) {\n              return o(t, e);\n            }, [t]), Or(mi(), function (t, n, e) {\n              return o(t, e);\n            }, [t]), Or(gi(), function (t, n, e) {\n              e.mouseIsDown.get() && o(t, e);\n            }, [t])])\n          };\n        });\n      }\n    });\n  }\n\n  function cx(t) {\n    var n = t.event.raw;\n    return -1 === n.type.indexOf(\"touch\") ? void 0 !== n.clientX ? vt.some(n).map(function (t) {\n      return ke(t.clientX, t.clientY);\n    }) : vt.none() : void 0 !== n.touches && 1 === n.touches.length ? vt.some(n.touches[0]).map(function (t) {\n      return ke(t.clientX, t.clientY);\n    }) : vt.none();\n  }\n\n  function sx(t) {\n    return t.model.minX;\n  }\n\n  function lx(t) {\n    return t.model.minY;\n  }\n\n  function fx(t) {\n    return t.model.minX - 1;\n  }\n\n  function dx(t) {\n    return t.model.minY - 1;\n  }\n\n  function mx(t) {\n    return t.model.maxX;\n  }\n\n  function gx(t) {\n    return t.model.maxY;\n  }\n\n  function px(t) {\n    return t.model.maxX + 1;\n  }\n\n  function hx(t) {\n    return t.model.maxY + 1;\n  }\n\n  function vx(t, n, e) {\n    return n(t) - e(t);\n  }\n\n  function bx(t) {\n    return vx(t, mx, sx);\n  }\n\n  function yx(t) {\n    return vx(t, gx, lx);\n  }\n\n  function xx(t) {\n    return bx(t) / 2;\n  }\n\n  function wx(t) {\n    return yx(t) / 2;\n  }\n\n  function Sx(t) {\n    return t.stepSize;\n  }\n\n  function kx(t) {\n    return t.snapToGrid;\n  }\n\n  function Cx(t) {\n    return t.snapStart;\n  }\n\n  function Ox(t) {\n    return t.rounded;\n  }\n\n  function _x(t, n) {\n    return void 0 !== t[n + \"-edge\"];\n  }\n\n  function Tx(t) {\n    return _x(t, \"left\");\n  }\n\n  function Ex(t) {\n    return _x(t, \"right\");\n  }\n\n  function Dx(t) {\n    return _x(t, \"top\");\n  }\n\n  function Bx(t) {\n    return _x(t, \"bottom\");\n  }\n\n  function Mx(t) {\n    return t.model.value.get();\n  }\n\n  function Ax(t, n) {\n    return {\n      x: t,\n      y: n\n    };\n  }\n\n  function Fx(t, n) {\n    br(t, Bw(), {\n      value: n\n    });\n  }\n\n  function Ix(t, n, e, o) {\n    return t < n ? t : e < t ? e : t === n ? n - 1 : Math.max(n, t - o);\n  }\n\n  function Rx(t, n, e, o) {\n    return e < t ? t : t < n ? n : t === e ? e + 1 : Math.min(e, t + o);\n  }\n\n  function Vx(t, n, e) {\n    return Math.max(n, Math.min(e, t));\n  }\n\n  function Px(t) {\n    var n = t.min,\n        e = t.max,\n        o = t.range,\n        r = t.value,\n        i = t.step,\n        u = t.snap,\n        a = t.snapStart,\n        c = t.rounded,\n        s = t.hasMinEdge,\n        l = t.hasMaxEdge,\n        f = t.minBound,\n        d = t.maxBound,\n        m = t.screenRange,\n        g = s ? n - 1 : n,\n        p = l ? e + 1 : e;\n    if (r < f) return g;\n    if (d < r) return p;\n    var h,\n        v,\n        b,\n        y,\n        x,\n        w = Vx((x = f, Math.min(d, Math.max(r, x)) - x) / m * o + n, g, p);\n    return u && n <= w && w <= e ? (h = w, v = n, b = e, y = i, a.fold(function () {\n      var t = Math.round((h - v) / y) * y;\n      return Vx(v + t, v - 1, b + 1);\n    }, function (t) {\n      var n = Math.round((h - t) % y / y),\n          e = Math.floor((h - t) / y),\n          o = Math.floor((b - t) / y),\n          r = Math.min(o, e + n);\n      return Math.max(t, t + r * y);\n    })) : c ? Math.round(w) : w;\n  }\n\n  function Hx(t) {\n    var n = t.min,\n        e = t.max,\n        o = t.range,\n        r = t.value,\n        i = t.hasMinEdge,\n        u = t.hasMaxEdge,\n        a = t.maxBound,\n        c = t.maxOffset,\n        s = t.centerMinEdge,\n        l = t.centerMaxEdge;\n    return r < n ? i ? 0 : s : e < r ? u ? a : l : (r - n) / o * c;\n  }\n\n  function zx(t) {\n    return t.element.dom.getBoundingClientRect();\n  }\n\n  function Nx(t) {\n    return zx(t)[Mw];\n  }\n\n  function Lx(t) {\n    return zx(t).right;\n  }\n\n  function Wx(t) {\n    return zx(t).top;\n  }\n\n  function Ux(t) {\n    return zx(t).bottom;\n  }\n\n  function jx(t) {\n    return zx(t).width;\n  }\n\n  function Gx(t) {\n    return zx(t).height;\n  }\n\n  function Xx(t, n) {\n    var e = zx(t),\n        o = zx(n);\n    return (e[Mw] + e.right) / 2 - o[Mw];\n  }\n\n  function Yx(t, n) {\n    var e = zx(t),\n        o = zx(n);\n    return (e.top + e.bottom) / 2 - o.top;\n  }\n\n  function qx(t, n) {\n    br(t, Bw(), {\n      value: n\n    });\n  }\n\n  function Kx(t, n, e) {\n    return Px({\n      min: sx(n),\n      max: mx(n),\n      range: bx(n),\n      value: e,\n      step: Sx(n),\n      snap: kx(n),\n      snapStart: Cx(n),\n      rounded: Ox(n),\n      hasMinEdge: Tx(n),\n      hasMaxEdge: Ex(n),\n      minBound: Nx(t),\n      maxBound: Lx(t),\n      screenRange: jx(t)\n    });\n  }\n\n  function Jx(r) {\n    return function (t, n) {\n      return qx(t, {\n        x: o = (0 < r ? Rx : Ix)(Mx(e = n).x, sx(e), mx(e), Sx(e))\n      }), vt.some(o).map(D);\n      var e, o;\n    };\n  }\n\n  function $x(t, n, e, o, r, i) {\n    var u,\n        a,\n        c,\n        s,\n        l,\n        f,\n        d,\n        m,\n        g = (a = i, c = e, s = o, l = r, f = jx(u = n), d = s.bind(function (t) {\n      return vt.some(Xx(t, u));\n    }).getOr(0), m = l.bind(function (t) {\n      return vt.some(Xx(t, u));\n    }).getOr(f), Hx({\n      min: sx(a),\n      max: mx(a),\n      range: bx(a),\n      value: c,\n      hasMinEdge: Tx(a),\n      hasMaxEdge: Ex(a),\n      minBound: Nx(u),\n      minOffset: 0,\n      maxBound: Lx(u),\n      maxOffset: f,\n      centerMinEdge: d,\n      centerMaxEdge: m\n    }));\n    return Nx(n) - Nx(t) + g;\n  }\n\n  function Qx(t, n) {\n    br(t, Bw(), {\n      value: n\n    });\n  }\n\n  function Zx(t, n, e) {\n    return Px({\n      min: lx(n),\n      max: gx(n),\n      range: yx(n),\n      value: e,\n      step: Sx(n),\n      snap: kx(n),\n      snapStart: Cx(n),\n      rounded: Ox(n),\n      hasMinEdge: Dx(n),\n      hasMaxEdge: Bx(n),\n      minBound: Wx(t),\n      maxBound: Ux(t),\n      screenRange: Gx(t)\n    });\n  }\n\n  function t0(r) {\n    return function (t, n) {\n      return Qx(t, {\n        y: o = (0 < r ? Rx : Ix)(Mx(e = n).y, lx(e), gx(e), Sx(e))\n      }), vt.some(o).map(D);\n      var e, o;\n    };\n  }\n\n  function n0(t, n, e, o, r, i) {\n    var u,\n        a,\n        c,\n        s,\n        l,\n        f,\n        d,\n        m,\n        g = (a = i, c = e, s = o, l = r, f = Gx(u = n), d = s.bind(function (t) {\n      return vt.some(Yx(t, u));\n    }).getOr(0), m = l.bind(function (t) {\n      return vt.some(Yx(t, u));\n    }).getOr(f), Hx({\n      min: lx(a),\n      max: gx(a),\n      range: yx(a),\n      value: c,\n      hasMinEdge: Dx(a),\n      hasMaxEdge: Bx(a),\n      minBound: Wx(u),\n      minOffset: 0,\n      maxBound: Ux(u),\n      maxOffset: f,\n      centerMinEdge: d,\n      centerMaxEdge: m\n    }));\n    return Wx(n) - Wx(t) + g;\n  }\n\n  function e0(t, n) {\n    br(t, Bw(), {\n      value: n\n    });\n  }\n\n  function o0(t, n) {\n    return {\n      x: t,\n      y: n\n    };\n  }\n\n  function r0(u, a) {\n    return function (t, n) {\n      return o = n, r = 0 < u ? Rx : Ix, e0(t, o0(i = (e = a) ? Mx(o).x : r(Mx(o).x, sx(o), mx(o), Sx(o)), e ? r(Mx(o).y, lx(o), gx(o), Sx(o)) : Mx(o).y)), vt.some(i).map(D);\n      var e, o, r, i;\n    };\n  }\n\n  function i0(t) {\n    return \"<alloy.field.\" + t + \">\";\n  }\n\n  function u0(f, d, m, g) {\n    function p(t, n, e, o, r) {\n      var i,\n          u,\n          a = f(uS + \"range\"),\n          c = [my.parts.label({\n        dom: {\n          tag: \"label\",\n          innerHtml: e,\n          attributes: {\n            \"aria-label\": o\n          }\n        }\n      }), my.parts.field({\n        data: r,\n        factory: Dy,\n        inputAttributes: _lt({\n          type: \"text\"\n        }, \"hex\" === n ? {\n          \"aria-live\": \"polite\"\n        } : {}),\n        inputClasses: [d(\"textfield\")],\n        inputBehaviours: nc([(i = n, u = t, Ky.config({\n          invalidClass: d(\"invalid\"),\n          notify: {\n            onValidate: function onValidate(t) {\n              br(t, iS, {\n                type: i\n              });\n            },\n            onValid: function onValid(t) {\n              br(t, oS, {\n                type: i,\n                value: Df.getValue(t)\n              });\n            },\n            onInvalid: function onInvalid(t) {\n              br(t, rS, {\n                type: i,\n                value: Df.getValue(t)\n              });\n            }\n          },\n          validator: {\n            validate: function validate(t) {\n              var n = Df.getValue(t),\n                  e = u(n) ? Ve.value(!0) : Ve.error(f(\"aria.input.invalid\"));\n              return Gy(e);\n            },\n            validateOnLoad: !1\n          }\n        })), py.config({})]),\n        onSetValue: function onSetValue(t) {\n          Ky.isInvalid(t) && Ky.run(t).get(st);\n        }\n      })],\n          s = \"hex\" !== n ? [my.parts[\"aria-descriptor\"]({\n        text: a\n      })] : [];\n      return {\n        dom: {\n          tag: \"div\",\n          attributes: {\n            role: \"presentation\"\n          }\n        },\n        components: c.concat(s)\n      };\n    }\n\n    function h(t, n) {\n      var e = n.red,\n          o = n.green,\n          r = n.blue;\n      Df.setValue(t, {\n        red: e,\n        green: o,\n        blue: r\n      });\n    }\n\n    function v(t, n) {\n      b.getOpt(t).each(function (t) {\n        dn(t.element, \"background-color\", \"#\" + n.value);\n      });\n    }\n\n    var b = zm({\n      dom: {\n        tag: \"div\",\n        classes: [d(\"rgba-preview\")],\n        styles: {\n          \"background-color\": \"white\"\n        },\n        attributes: {\n          role: \"presentation\"\n        }\n      }\n    });\n    return kl({\n      factory: function factory() {\n        function a(t) {\n          return o[t].get();\n        }\n\n        function c(t, n) {\n          o[t].set(n);\n        }\n\n        function n(t, n) {\n          var e = n.event;\n          \"hex\" !== e.type ? c(e.type, vt.none()) : g(t);\n        }\n\n        function e(t, n) {\n          var r,\n              e,\n              o,\n              i,\n              u = n.event;\n          \"hex\" === u.type ? function (t, n) {\n            m(t);\n            var e = Mv(n);\n            c(\"hex\", vt.some(n));\n            var o = Hv(e);\n            h(t, o), s(o), br(t, Qw, {\n              hex: e\n            }), v(t, e);\n          }(t, u.value) : (r = t, e = u.type, o = u.value, i = parseInt(o, 10), c(e, vt.some(i)), a(\"red\").bind(function (e) {\n            return a(\"green\").bind(function (n) {\n              return a(\"blue\").map(function (t) {\n                return Rv(e, n, t, 1);\n              });\n            });\n          }).each(function (t) {\n            var n,\n                e,\n                o = (n = r, e = Iv(t), eS.getField(n, \"hex\").each(function (t) {\n              Hg.isFocused(t) || Df.setValue(n, {\n                hex: e.value\n              });\n            }), e);\n            br(r, Qw, {\n              hex: o\n            }), v(r, o);\n          }));\n        }\n\n        function t(t) {\n          return {\n            label: f(uS + t + \".label\"),\n            description: f(uS + t + \".description\")\n          };\n        }\n\n        function s(t) {\n          var n = t.red,\n              e = t.green,\n              o = t.blue;\n          c(\"red\", vt.some(n)), c(\"green\", vt.some(e)), c(\"blue\", vt.some(o));\n        }\n\n        var o = {\n          red: Po(vt.some(255)),\n          green: Po(vt.some(255)),\n          blue: Po(vt.some(255)),\n          hex: Po(vt.some(\"ffffff\"))\n        },\n            r = t(\"red\"),\n            i = t(\"green\"),\n            u = t(\"blue\"),\n            l = t(\"hex\");\n        return Yo(eS.sketch(function (t) {\n          return {\n            dom: {\n              tag: \"form\",\n              classes: [d(\"rgb-form\")],\n              attributes: {\n                \"aria-label\": f(\"aria.color.picker\")\n              }\n            },\n            components: [t.field(\"red\", my.sketch(p(Vv, \"red\", r.label, r.description, 255))), t.field(\"green\", my.sketch(p(Vv, \"green\", i.label, i.description, 255))), t.field(\"blue\", my.sketch(p(Vv, \"blue\", u.label, u.description, 255))), t.field(\"hex\", my.sketch(p(Av, \"hex\", l.label, l.description, \"ffffff\"))), b.asSpec()],\n            formBehaviours: nc([Ky.config({\n              invalidClass: d(\"form-invalid\")\n            }), mm(\"rgb-form-events\", [Cr(oS, e), Cr(rS, n), Cr(iS, n)])])\n          };\n        }), {\n          apis: {\n            updateHex: function updateHex(t, n) {\n              var e;\n              Df.setValue(t, {\n                hex: n.value\n              }), h(t, e = Hv(n)), s(e), v(t, n);\n            }\n          }\n        });\n      },\n      name: \"RgbForm\",\n      configFields: [],\n      apis: {\n        updateHex: function updateHex(t, n, e) {\n          t.updateHex(n, e);\n        }\n      },\n      extraApis: {}\n    });\n  }\n\n  function a0(x, w) {\n    return kl({\n      name: \"ColourPicker\",\n      configFields: [mo(\"dom\"), Eo(\"onValidHex\", st), Eo(\"onInvalidHex\", st)],\n      factory: function factory(t) {\n        function n(t, n, e) {\n          v.getOpt(t).each(function (t) {\n            g.setHue(t, e);\n          });\n        }\n\n        function e(t, n) {\n          b.getOpt(t).each(function (t) {\n            m.updateHex(t, n);\n          });\n        }\n\n        function r(n, e, o, t) {\n          var r = o,\n              i = Hv(e);\n          p.paletteRgba.set(i), p.paletteHue.set(r), St(t, function (t) {\n            t(n, e, o);\n          });\n        }\n\n        var o,\n            i,\n            u,\n            a,\n            c,\n            s,\n            l,\n            f,\n            d,\n            m = u0(x, w, t.onValidHex, t.onInvalidHex),\n            g = (l = w, f = $w.parts.spectrum({\n          dom: {\n            tag: \"canvas\",\n            attributes: {\n              role: \"presentation\"\n            },\n            classes: [l(\"sv-palette-spectrum\")]\n          }\n        }), d = $w.parts.thumb({\n          dom: {\n            tag: \"div\",\n            attributes: {\n              role: \"presentation\"\n            },\n            classes: [l(\"sv-palette-thumb\")],\n            innerHtml: \"<div class=\" + l(\"sv-palette-inner-thumb\") + ' role=\"presentation\"></div>'\n          }\n        }), kl({\n          factory: function factory(t) {\n            var n = rt({\n              x: 0,\n              y: 0\n            }),\n                e = nc([cd.config({\n              find: vt.some\n            }), Hg.config({})]);\n            return $w.sketch({\n              dom: {\n                tag: \"div\",\n                attributes: {\n                  role: \"presentation\"\n                },\n                classes: [l(\"sv-palette\")]\n              },\n              model: {\n                mode: \"xy\",\n                getInitialValue: n\n              },\n              rounded: !1,\n              components: [f, d],\n              onChange: function onChange(t, n, e) {\n                br(t, tS, {\n                  value: e\n                });\n              },\n              onInit: function onInit(t, n, e, o) {\n                y(e.element.dom, Lv(fb));\n              },\n              sliderBehaviours: e\n            });\n          },\n          name: \"SaturationBrightnessPalette\",\n          configFields: [],\n          apis: {\n            setHue: function setHue(t, n, e) {\n              var o = e;\n              y(n.components()[0].element.dom, Lv(Pv(Uv(o, 100, 100))));\n            },\n            setThumb: function setThumb(t, n, e) {\n              var o = n,\n                  r = jv(Hv(e));\n              $w.setValue(o, {\n                x: r.saturation,\n                y: 100 - r.value\n              });\n            }\n          },\n          extraApis: {}\n        })),\n            p = {\n          paletteRgba: Po(fb),\n          paletteHue: Po(0)\n        },\n            h = zm((i = $w.parts.spectrum({\n          dom: {\n            tag: \"div\",\n            classes: [(o = w)(\"hue-slider-spectrum\")],\n            attributes: {\n              role: \"presentation\"\n            }\n          }\n        }), u = $w.parts.thumb({\n          dom: {\n            tag: \"div\",\n            classes: [o(\"hue-slider-thumb\")],\n            attributes: {\n              role: \"presentation\"\n            }\n          }\n        }), $w.sketch({\n          dom: {\n            tag: \"div\",\n            classes: [o(\"hue-slider\")],\n            attributes: {\n              role: \"presentation\"\n            }\n          },\n          rounded: !1,\n          model: {\n            mode: \"y\",\n            getInitialValue: rt({\n              y: 0\n            })\n          },\n          components: [i, u],\n          sliderBehaviours: nc([Hg.config({})]),\n          onChange: function onChange(t, n, e) {\n            br(t, Zw, {\n              value: e\n            });\n          }\n        }))),\n            v = zm(g.sketch({})),\n            b = zm(m.sketch({}));\n\n        function y(t, n) {\n          var e,\n              o,\n              r = t.width,\n              i = t.height,\n              u = t.getContext(\"2d\");\n          null !== u && (u.fillStyle = n, u.fillRect(0, 0, r, i), (e = u.createLinearGradient(0, 0, r, 0)).addColorStop(0, \"rgba(255,255,255,1)\"), e.addColorStop(1, \"rgba(255,255,255,0)\"), u.fillStyle = e, u.fillRect(0, 0, r, i), (o = u.createLinearGradient(0, 0, 0, i)).addColorStop(0, \"rgba(0,0,0,0)\"), o.addColorStop(1, \"rgba(0,0,0,1)\"), u.fillStyle = o, u.fillRect(0, 0, r, i));\n        }\n\n        return {\n          uid: t.uid,\n          dom: t.dom,\n          components: [v.asSpec(), h.asSpec(), b.asSpec()],\n          behaviours: nc([mm(\"colour-picker-events\", [Cr(Qw, (s = [n, function (t, n, e) {\n            h.getOpt(t).each(function (t) {\n              $w.setValue(t, {\n                y: 100 - e / 360 * 100\n              });\n            });\n          }, function (t, n) {\n            v.getOpt(t).each(function (t) {\n              g.setThumb(t, n);\n            });\n          }], function (t, n) {\n            var e = n.event.hex;\n            r(t, e, jv(Hv(e)).hue, s);\n          })), Cr(tS, (c = [e], function (t, n) {\n            var e = n.event.value,\n                o = p.paletteHue.get();\n            r(t, Gv(Uv(o, e.x, 100 - e.y)), o, c);\n          })), Cr(Zw, (a = [n, e], function (t, n) {\n            var e = (100 - n.event.value.y) / 100 * 360,\n                o = jv(p.paletteRgba.get());\n            r(t, Gv(Uv(e, o.saturation, o.value)), e, a);\n          }))]), cd.config({\n            find: function find(t) {\n              return b.getOpt(t);\n            }\n          }), Fg.config({\n            mode: \"acyclic\"\n          })])\n        };\n      }\n    });\n  }\n\n  function c0(t) {\n    return sS[t];\n  }\n\n  function s0(t, n, e) {\n    return Df.config(Yo({\n      store: {\n        mode: \"manual\",\n        getValue: n,\n        setValue: e\n      }\n    }, t.map(function (t) {\n      return {\n        store: {\n          initialValue: t\n        }\n      };\n    }).getOr({})));\n  }\n\n  function l0(r, i) {\n    function n(t, n) {\n      n.stop();\n    }\n\n    function e(t) {\n      return function (n, e) {\n        St(t, function (t) {\n          t(n, e);\n        });\n      };\n    }\n\n    function o(t, n) {\n      var e;\n      gd.isDisabled(t) || (e = n.event.raw, a(t, e.dataTransfer.files));\n    }\n\n    function u(t, n) {\n      var e = n.event.raw.target;\n      a(t, e.files);\n    }\n\n    function a(t, n) {\n      var e, o;\n      Df.setValue(t, (e = n, o = fS.explode(i.getSetting(\"images_file_types\", \"jpeg,jpg,jpe,jfi,jif,jfif,png,gif,bmp,webp\", \"string\")), F(kt(e), function (n) {\n        return d(o, function (t) {\n          return Bt(n.name.toLowerCase(), \".\" + t.toLowerCase());\n        });\n      }))), br(t, yy, {\n        name: r.name\n      });\n    }\n\n    var c = zm({\n      dom: {\n        tag: \"input\",\n        attributes: {\n          type: \"file\",\n          accept: \"image/*\"\n        },\n        styles: {\n          display: \"none\"\n        }\n      },\n      behaviours: nc([mm(\"input-file-events\", [Dr(Ci()), Dr(Vi())])])\n    });\n    return ey(r.label.map(function (t) {\n      return oy(t, i);\n    }), my.parts.field({\n      factory: {\n        sketch: function sketch(t) {\n          return {\n            uid: t.uid,\n            dom: {\n              tag: \"div\",\n              classes: [\"tox-dropzone-container\"]\n            },\n            behaviours: nc([pS([]), aw(), gd.config({}), Lg.config({\n              toggleClass: \"dragenter\",\n              toggleOnExecute: !1\n            }), mm(\"dropzone-events\", [Cr(\"dragenter\", e([n, Lg.toggle])), Cr(\"dragleave\", e([n, Lg.toggle])), Cr(\"dragover\", n), Cr(\"drop\", e([n, o])), Cr(ki(), u)])]),\n            components: [{\n              dom: {\n                tag: \"div\",\n                classes: [\"tox-dropzone\"],\n                styles: {}\n              },\n              components: [{\n                dom: {\n                  tag: \"p\",\n                  innerHtml: i.translate(\"Drop an image here\")\n                }\n              }, fp.sketch({\n                dom: {\n                  tag: \"button\",\n                  innerHtml: i.translate(\"Browse for an image\"),\n                  styles: {\n                    position: \"relative\"\n                  },\n                  classes: [\"tox-button\", \"tox-button--secondary\"]\n                },\n                components: [c.asSpec()],\n                action: function action(t) {\n                  c.get(t).element.dom.click();\n                },\n                buttonBehaviours: nc([py.config({}), $v(i.isDisabled), pv()])\n              })]\n            }]\n          };\n        }\n      }\n    }), [\"tox-form__group--stretched\"], []);\n  }\n\n  function f0(t) {\n    return {\n      dom: {\n        tag: \"div\",\n        styles: {\n          width: \"1px\",\n          height: \"1px\",\n          outline: \"none\"\n        },\n        attributes: {\n          tabindex: \"0\"\n        },\n        classes: t\n      },\n      behaviours: nc([Hg.config({\n        ignore: !0\n      }), py.config({})])\n    };\n  }\n\n  function d0(t) {\n    return {\n      dom: {\n        tag: \"div\",\n        classes: [\"tox-navobj\"]\n      },\n      components: [f0([hS]), t, f0([vS])],\n      behaviours: nc([cS(1)])\n    };\n  }\n\n  function m0(t, n) {\n    br(t, xi(), {\n      raw: {\n        which: 9,\n        shiftKey: n\n      }\n    });\n  }\n\n  function g0(t, n) {\n    var e = n.element;\n    Kr(e, hS) ? m0(t, !0) : Kr(e, vS) && m0(t, !1);\n  }\n\n  function p0(t) {\n    return Yb(t, [\".\" + hS, \".\" + vS].join(\",\"), T);\n  }\n\n  function h0(t, n) {\n    return xS(document.createElement(\"canvas\"), t, n);\n  }\n\n  function v0(t) {\n    var n = h0(t.width, t.height);\n    return yS(n).drawImage(t, 0, 0), n;\n  }\n\n  function b0(t) {\n    return t.naturalWidth || t.width;\n  }\n\n  function y0(t) {\n    return t.naturalHeight || t.height;\n  }\n\n  function x0(t, o, r) {\n    return o = o || \"image/png\", S(HTMLCanvasElement.prototype.toBlob) ? new Ny(function (n, e) {\n      t.toBlob(function (t) {\n        t ? n(t) : e();\n      }, o, r);\n    }) : (g = t.toDataURL(o, r), new Ny(function (t, n) {\n      !function () {\n        var t = g.split(\",\"),\n            n = /data:([^;]+)/.exec(t[0]);\n        if (!n) return vt.none();\n\n        for (var e = n[1], o = t[1], r = atob(o), i = r.length, u = Math.ceil(i / 1024), a = new Array(u), c = 0; c < u; ++c) {\n          for (var s = 1024 * c, l = Math.min(1024 + s, i), f = new Array(l - s), d = s, m = 0; d < l; ++m, ++d) {\n            f[m] = r[d].charCodeAt(0);\n          }\n\n          a[c] = new Uint8Array(f);\n        }\n\n        return vt.some(new Blob(a, {\n          type: e\n        }));\n      }().fold(function () {\n        n(\"uri is not base64: \" + g);\n      }, t);\n    }));\n    var g;\n  }\n\n  function w0(t, n, e) {\n    function o(n, e) {\n      return t.then(function (t) {\n        return t.toDataURL(n || \"image/png\", e);\n      });\n    }\n\n    return {\n      getType: rt(n.type),\n      toBlob: function toBlob() {\n        return Ny.resolve(n);\n      },\n      toDataURL: rt(e),\n      toBase64: function toBase64() {\n        return e.split(\",\")[1];\n      },\n      toAdjustedBlob: function toAdjustedBlob(n, e) {\n        return t.then(function (t) {\n          return x0(t, n, e);\n        });\n      },\n      toAdjustedDataURL: o,\n      toAdjustedBase64: function toAdjustedBase64(t, n) {\n        return o(t, n).then(function (t) {\n          return t.split(\",\")[1];\n        });\n      },\n      toCanvas: function toCanvas() {\n        return t.then(v0);\n      }\n    };\n  }\n\n  function S0(n, t) {\n    return x0(n, t).then(function (t) {\n      return w0(Ny.resolve(n), t, n.toDataURL());\n    });\n  }\n\n  function k0(n) {\n    return e = n, new Ny(function (t) {\n      var n = new FileReader();\n      n.onloadend = function () {\n        t(n.result);\n      }, n.readAsDataURL(e);\n    }).then(function (t) {\n      return w0((a = n, new Ny(function (t, n) {\n        function e() {\n          r.removeEventListener(\"load\", i), r.removeEventListener(\"error\", u);\n        }\n\n        var o = URL.createObjectURL(a),\n            r = new Image(),\n            i = function i() {\n          e(), t(r);\n        },\n            u = function u() {\n          e(), n(\"Unable to load data of type \" + a.type + \": \" + o);\n        };\n\n        r.addEventListener(\"load\", i), r.addEventListener(\"error\", u), r.src = o, r.complete && setTimeout(i, 0);\n      }).then(function (t) {\n        wS(t);\n        var n = h0(b0(t), y0(t));\n        return yS(n).drawImage(t, 0, 0), n;\n      })), n, t);\n      var a;\n    });\n    var e;\n  }\n\n  function C0(t, n, e) {\n    var o = \"string\" == typeof t ? parseFloat(t) : t;\n    return e < o ? o = e : o < n && (o = n), o;\n  }\n\n  function O0() {\n    return [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1];\n  }\n\n  function _0(t, n) {\n    for (var e = [], o = new Array(25), r = 0; r < 5; r++) {\n      for (var i = 0; i < 5; i++) {\n        e[i] = n[i + 5 * r];\n      }\n\n      for (i = 0; i < 5; i++) {\n        for (var u = 0, a = 0; a < 5; a++) {\n          u += t[i + 5 * a] * e[a];\n        }\n\n        o[i + 5 * r] = u;\n      }\n    }\n\n    return o;\n  }\n\n  function T0(n, e) {\n    return n.toCanvas().then(function (t) {\n      return kS(t, n.getType(), e);\n    });\n  }\n\n  function E0(e) {\n    return function (t, n) {\n      return T0(t, e(O0(), n));\n    };\n  }\n\n  function D0(t, n) {\n    void 0 === n && (n = 2);\n    var e = Math.pow(10, n),\n        o = Math.round(t * e);\n    return Math.ceil(o / e);\n  }\n\n  function B0(t) {\n    return CS(t);\n  }\n\n  function M0(t) {\n    return TS(t);\n  }\n\n  function A0(t, n) {\n    return ES(t, n);\n  }\n\n  function F0(t, n) {\n    return OS(t, n);\n  }\n\n  function I0(t, n) {\n    return _S(t, n);\n  }\n\n  function R0(t, n) {\n    return o = n, (e = t).toCanvas().then(function (t) {\n      return AS(t, e.getType(), o);\n    });\n    var e, o;\n  }\n\n  function V0(t, n) {\n    return o = n, (e = t).toCanvas().then(function (t) {\n      return MS(t, e.getType(), o);\n    });\n    var e, o;\n  }\n\n  function P0(t, n, e) {\n    return Xm(t, {\n      tag: \"span\",\n      classes: [\"tox-icon\", \"tox-tbtn__icon-wrap\"],\n      behaviours: e\n    }, n);\n  }\n\n  function H0(t, n) {\n    return P0(t, n, []);\n  }\n\n  function z0(t, n) {\n    return P0(t, n, [Rg.config({})]);\n  }\n\n  function N0(t, n, e) {\n    return {\n      dom: {\n        tag: \"span\",\n        innerHtml: e.translate(t),\n        classes: [n + \"__select-label\"]\n      },\n      behaviours: nc([Rg.config({})])\n    };\n  }\n\n  function L0(n, e, o) {\n    function t(t, n) {\n      var e = Df.getValue(t);\n      return Hg.focus(e), br(e, \"keydown\", {\n        raw: n.event.raw\n      }), hw.close(e), vt.some(!0);\n    }\n\n    var r = Po(st),\n        i = n.text.map(function (t) {\n      return zm(N0(t, e, o.providers));\n    }),\n        u = n.icon.map(function (t) {\n      return zm(z0(t, o.providers.icons));\n    }),\n        a = n.role.fold(function () {\n      return {};\n    }, function (t) {\n      return {\n        role: t\n      };\n    }),\n        c = n.tooltip.fold(function () {\n      return {};\n    }, function (t) {\n      var n = o.providers.translate(t);\n      return {\n        title: n,\n        \"aria-label\": n\n      };\n    }),\n        s = Xm(\"chevron-down\", {\n      tag: \"div\",\n      classes: [e + \"__select-chevron\"]\n    }, o.providers.icons);\n    return zm(hw.sketch(_lt(_lt(_lt({}, n.uid ? {\n      uid: n.uid\n    } : {}), a), {\n      dom: {\n        tag: \"button\",\n        classes: [e, e + \"--select\"].concat(M(n.classes, function (t) {\n          return e + \"--\" + t;\n        })),\n        attributes: _lt({}, c)\n      },\n      components: tb([u.map(function (t) {\n        return t.asSpec();\n      }), i.map(function (t) {\n        return t.asSpec();\n      }), vt.some(s)]),\n      matchWidth: !0,\n      useMinWidth: !0,\n      dropdownBehaviours: nc(H(H([], n.dropdownBehaviours, !0), [$v(function () {\n        return n.disabled || o.providers.isDisabled();\n      }), pv(), vw.config({}), Rg.config({}), mm(\"dropdown-events\", [vv(n, r), bv(n, r)]), mm(\"menubutton-update-display-text\", [Cr(VS, function (n, e) {\n        i.bind(function (t) {\n          return t.getOpt(n);\n        }).each(function (t) {\n          Rg.set(t, [ri(o.providers.translate(e.event.text))]);\n        });\n      }), Cr(PS, function (n, e) {\n        u.bind(function (t) {\n          return t.getOpt(n);\n        }).each(function (t) {\n          Rg.set(t, [z0(e.event.icon, o.providers.icons)]);\n        });\n      })])], !1)),\n      eventOrder: Yo(RS, {\n        mousedown: [\"focusing\", \"alloy.base.behaviour\", \"item-type-events\", \"normal-dropdown-events\"]\n      }),\n      sandboxBehaviours: nc([Fg.config({\n        mode: \"special\",\n        onLeft: t,\n        onRight: t\n      })]),\n      lazySink: o.getSink,\n      toggleClass: e + \"--active\",\n      parts: {\n        menu: Zp(0, n.columns, n.presets)\n      },\n      fetch: function fetch(t) {\n        return jy(C(n.fetch, t));\n      }\n    }))).asSpec();\n  }\n\n  function W0(t) {\n    return \"separator\" === t.type;\n  }\n\n  function U0(t, e, o, n) {\n    var r = Ir(\"primary-menu\"),\n        i = zS(t, o.shared.providers.menuItems());\n    if (0 === i.items.length) return vt.none();\n    var u = Gb(r, i.items, e, o, n),\n        a = dt(i.menus, function (t, n) {\n      return Gb(n, t, e, o, !1);\n    }),\n        c = Yo(a, sr(r, u));\n    return vt.from(ip.tieredData(r, c, i.expansions));\n  }\n\n  function j0(e) {\n    return {\n      isDisabled: function isDisabled() {\n        return gd.isDisabled(e);\n      },\n      setDisabled: function setDisabled(t) {\n        return gd.set(e, t);\n      },\n      setActive: function setActive(t) {\n        var n = e.element;\n        t ? (Yr(n, \"tox-tbtn--enabled\"), on(n, \"aria-pressed\", !0)) : (qr(n, \"tox-tbtn--enabled\"), sn(n, \"aria-pressed\"));\n      },\n      isActive: function isActive() {\n        return Kr(e.element, \"tox-tbtn--enabled\");\n      }\n    };\n  }\n\n  function G0(e, t, o, n) {\n    return L0({\n      text: e.text,\n      icon: e.icon,\n      tooltip: e.tooltip,\n      role: n,\n      fetch: function fetch(t, n) {\n        e.fetch(function (t) {\n          n(U0(t, Sh.CLOSE_ON_EXECUTE, o, !1));\n        });\n      },\n      onSetup: e.onSetup,\n      getApi: j0,\n      columns: 1,\n      presets: \"normal\",\n      classes: [],\n      dropdownBehaviours: [py.config({})]\n    }, t, o.shared);\n  }\n\n  function X0(t, n, e, o, r, i) {\n    void 0 === e && (e = []);\n\n    var u = n.fold(function () {\n      return {};\n    }, function (t) {\n      return {\n        action: t\n      };\n    }),\n        a = _lt({\n      buttonBehaviours: nc([$v(function () {\n        return t.disabled || i.isDisabled();\n      }), pv(), py.config({}), mm(\"button press\", [kr(\"click\"), kr(\"mousedown\")])].concat(e)),\n      eventOrder: {\n        click: [\"button press\", \"alloy.base.behaviour\"],\n        mousedown: [\"button press\", \"alloy.base.behaviour\"]\n      }\n    }, u),\n        c = Yo(a, {\n      dom: o\n    });\n\n    return Yo(c, {\n      components: r\n    });\n  }\n\n  function Y0(t, n, e, o) {\n    void 0 === o && (o = []);\n    var r = {\n      tag: \"button\",\n      classes: [\"tox-tbtn\"],\n      attributes: t.tooltip.map(function (t) {\n        return {\n          \"aria-label\": e.translate(t),\n          title: e.translate(t)\n        };\n      }).getOr({})\n    },\n        i = t.icon.map(function (t) {\n      return H0(t, e.icons);\n    });\n    return X0(t, n, o, r, tb([i]), e);\n  }\n\n  function q0(t, n, e, o) {\n    void 0 === o && (o = []);\n    var r = Y0(t, vt.some(n), e, o);\n    return fp.sketch(r);\n  }\n\n  function K0(t, n, e, o, r) {\n    void 0 === o && (o = []), void 0 === r && (r = []);\n    var i = e.translate(t.text),\n        u = t.icon ? t.icon.map(function (t) {\n      return H0(t, e.icons);\n    }) : vt.none(),\n        a = u.isSome() ? tb([u]) : [],\n        c = u.isSome() ? {} : {\n      innerHtml: i\n    },\n        s = H(H(H(H([], t.primary || t.borderless ? [\"tox-button\"] : [\"tox-button\", \"tox-button--secondary\"], !0), u.isSome() ? [\"tox-button--icon\"] : [], !0), t.borderless ? [\"tox-button--naked\"] : [], !0), r, !0);\n    return X0(t, n, o, _lt(_lt({\n      tag: \"button\",\n      classes: s\n    }, c), {\n      attributes: {\n        title: i\n      }\n    }), a, e);\n  }\n\n  function J0(t, n, e, o, r) {\n    void 0 === o && (o = []), void 0 === r && (r = []);\n    var i = K0(t, vt.some(n), e, o, r);\n    return fp.sketch(i);\n  }\n\n  function $0(n, e) {\n    return function (t) {\n      \"custom\" === e ? br(t, Sy, {\n        name: n,\n        value: {}\n      }) : \"submit\" === e ? vr(t, ky) : \"cancel\" === e ? vr(t, wy) : console.error(\"Unknown button type: \", e);\n    };\n  }\n\n  function Q0(n, t, e) {\n    if (\"menu\" === t) {\n      var o = n,\n          r = zm(G0(_lt(_lt({}, n), {\n        onSetup: function onSetup(t) {\n          return t.setDisabled(n.disabled), st;\n        },\n        fetch: (i = o.items, u = function u() {\n          return r;\n        }, a = e, function (t) {\n          t(M(i, function (t) {\n            var n,\n                e,\n                o = t.text.fold(function () {\n              return {};\n            }, function (t) {\n              return {\n                text: t\n              };\n            });\n            return _lt(_lt({\n              type: t.type,\n              active: !1\n            }, o), {\n              onAction: function onAction(t) {\n                var n = !t.isActive();\n                t.setActive(n), e.storage.set(n), a.shared.getSink().each(function (t) {\n                  u().getOpt(t).each(function (t) {\n                    ka(t.element), br(t, Sy, {\n                      name: e.name,\n                      value: e.storage.get()\n                    });\n                  });\n                });\n              },\n              onSetup: (n = e = t, function (t) {\n                t.setActive(n.storage.get());\n              })\n            });\n          }));\n        })\n      }), \"tox-tbtn\", e, vt.none()));\n      return r.asSpec();\n    }\n\n    var i, u, a;\n\n    if (\"custom\" === t || \"cancel\" === t || \"submit\" === t) {\n      var c = $0(n.name, t);\n      return J0(_lt(_lt({}, n), {\n        borderless: !1\n      }), c, e.shared.providers, []);\n    }\n\n    console.error(\"Unknown footer button type: \", t);\n  }\n\n  function Z0(t, n) {\n    return Jf({\n      factory: my,\n      name: t,\n      overrides: function overrides(o) {\n        return {\n          fieldBehaviours: nc([mm(\"coupled-input-behaviour\", [Cr(Si(), function (e) {\n            ml(e, o, n).bind(cd.getCurrent).each(function (n) {\n              ml(e, o, \"lock\").each(function (t) {\n                Lg.isOn(t) && o.onLockedChange(e, n, t);\n              });\n            });\n          })])])\n        };\n      }\n    });\n  }\n\n  function tw(t) {\n    var n = /^\\s*(\\d+(?:\\.\\d+)?)\\s*(|cm|mm|in|px|pt|pc|em|ex|ch|rem|vw|vh|vmin|vmax|%)\\s*$/.exec(t);\n    if (null === n) return Ve.error(t);\n    var e = parseFloat(n[1]),\n        o = n[2];\n    return Ve.value({\n      value: e,\n      unit: o\n    });\n  }\n\n  function nw(t, n) {\n    function e(t) {\n      return Tt(o, t);\n    }\n\n    var o = {\n      \"\": 96,\n      px: 96,\n      pt: 72,\n      cm: 2.54,\n      pc: 12,\n      mm: 25.4,\n      \"in\": 1\n    };\n    return t.unit === n ? vt.some(t.value) : e(t.unit) && e(n) ? o[t.unit] === o[n] ? vt.some(t.value) : vt.some(t.value / o[t.unit] * o[n]) : vt.none();\n  }\n\n  function ew(t) {\n    return vt.none();\n  }\n\n  function ow(o, n) {\n    function t(t) {\n      return Xm(t, {\n        tag: \"span\",\n        classes: [\"tox-icon\", \"tox-lock-icon__\" + t]\n      }, n.icons);\n    }\n\n    function e(t) {\n      return {\n        dom: {\n          tag: \"div\",\n          classes: [\"tox-form__group\"]\n        },\n        components: t\n      };\n    }\n\n    function r(e) {\n      return my.parts.field({\n        factory: Dy,\n        inputClasses: [\"tox-textfield\"],\n        inputBehaviours: nc([gd.config({\n          disabled: function disabled() {\n            return o.disabled || n.isDisabled();\n          }\n        }), pv(), py.config({}), mm(\"size-input-events\", [Cr(bi(), function (t, n) {\n          br(t, u, {\n            isField1: e\n          });\n        }), Cr(ki(), function (t, n) {\n          br(t, yy, {\n            name: o.name\n          });\n        })])]),\n        selectOnFocus: !1\n      });\n    }\n\n    function i(t) {\n      return {\n        dom: {\n          tag: \"label\",\n          classes: [\"tox-label\"],\n          innerHtml: n.translate(t)\n        }\n      };\n    }\n\n    var l = ew,\n        u = Ir(\"ratio-event\"),\n        a = WS.parts.lock({\n      dom: {\n        tag: \"button\",\n        classes: [\"tox-lock\", \"tox-button\", \"tox-button--naked\", \"tox-button--icon\"],\n        attributes: {\n          title: n.translate(o.label.getOr(\"Constrain proportions\"))\n        }\n      },\n      components: [t(\"lock\"), t(\"unlock\")],\n      buttonBehaviours: nc([gd.config({\n        disabled: function disabled() {\n          return o.disabled || n.isDisabled();\n        }\n      }), pv(), py.config({})])\n    }),\n        c = WS.parts.field1(e([my.parts.label(i(\"Width\")), r(!0)])),\n        s = WS.parts.field2(e([my.parts.label(i(\"Height\")), r(!1)]));\n    return WS.sketch({\n      dom: {\n        tag: \"div\",\n        classes: [\"tox-form__group\"]\n      },\n      components: [{\n        dom: {\n          tag: \"div\",\n          classes: [\"tox-form__controls-h-stack\"]\n        },\n        components: [c, s, e([i(\"&nbsp;\"), a])]\n      }],\n      field1Name: \"width\",\n      field2Name: \"height\",\n      locked: !0,\n      markers: {\n        lockClass: \"tox-locked\"\n      },\n      onLockedChange: function onLockedChange(t, i, n) {\n        tw(Df.getValue(t)).each(function (t) {\n          l(t).each(function (t) {\n            var n, e, o, r;\n            Df.setValue(i, (r = -1 !== (r = (n = t).value.toFixed((e = n.unit) in (o = {\n              \"\": 0,\n              px: 0,\n              pt: 1,\n              mm: 1,\n              pc: 2,\n              ex: 2,\n              em: 2,\n              ch: 2,\n              rem: 2,\n              cm: 3,\n              \"in\": 4,\n              \"%\": 4\n            }) ? o[e] : 1)).indexOf(\".\") ? r.replace(/\\.?0*$/, \"\") : r) + n.unit);\n          });\n        });\n      },\n      coupledFieldBehaviours: nc([gd.config({\n        disabled: function disabled() {\n          return o.disabled || n.isDisabled();\n        },\n        onDisabled: function onDisabled(t) {\n          WS.getField1(t).bind(my.getField).each(gd.disable), WS.getField2(t).bind(my.getField).each(gd.disable), WS.getLock(t).each(gd.disable);\n        },\n        onEnabled: function onEnabled(t) {\n          WS.getField1(t).bind(my.getField).each(gd.enable), WS.getField2(t).bind(my.getField).each(gd.enable), WS.getLock(t).each(gd.enable);\n        }\n      }), pv(), mm(\"size-input-events2\", [Cr(u, function (t, n) {\n        var e,\n            o,\n            r,\n            i = n.event.isField1,\n            u = i ? WS.getField1(t) : WS.getField2(t),\n            a = i ? WS.getField2(t) : WS.getField1(t),\n            c = u.map(Df.getValue).getOr(\"\"),\n            s = a.map(Df.getValue).getOr(\"\");\n        e = s, o = tw(c).toOptional(), r = tw(e).toOptional(), l = Et(o, r, function (t, o) {\n          return nw(t, o.unit).map(function (t) {\n            return o.value / t;\n          }).map(function (t) {\n            return n = t, e = o.unit, function (t) {\n              return nw(t, e).map(function (t) {\n                return {\n                  value: t * n,\n                  unit: e\n                };\n              });\n            };\n            var n, e;\n          }).getOr(ew);\n        }).getOr(ew);\n      })])])\n    });\n  }\n\n  function rw(f, c) {\n    function t(t, n, e, o) {\n      return zm(J0({\n        name: t,\n        text: t,\n        disabled: e,\n        primary: o,\n        icon: vt.none(),\n        borderless: !1\n      }, n, c));\n    }\n\n    function n(t, n, e, o) {\n      return zm(q0({\n        name: t,\n        icon: vt.some(t),\n        tooltip: vt.some(n),\n        disabled: o,\n        primary: !1,\n        borderless: !1\n      }, e, c));\n    }\n\n    function d(t, e) {\n      t.map(function (t) {\n        var n = t.get(e);\n        n.hasConfigured(gd) && gd.disable(n);\n      });\n    }\n\n    function m(t, e) {\n      t.map(function (t) {\n        var n = t.get(e);\n        n.hasConfigured(gd) && gd.enable(n);\n      });\n    }\n\n    function r(t, n, e) {\n      br(t, n, e);\n    }\n\n    function i(t) {\n      return vr(t, YS.disable()), 0;\n    }\n\n    function u(t) {\n      return vr(t, YS.enable()), 0;\n    }\n\n    function g(t, n) {\n      i(t), r(t, US.transform(), {\n        transform: n\n      }), u(t);\n    }\n\n    function e(t) {\n      return function () {\n        q.getOpt(t).each(function (t) {\n          Rg.set(t, [Y]);\n        });\n      };\n    }\n\n    function s(t, n) {\n      i(t), r(t, US.transformApply(), {\n        transform: n,\n        swap: e(t)\n      }), u(t);\n    }\n\n    function p() {\n      return t(\"Back\", function (t) {\n        return r(t, US.back(), {\n          swap: e(t)\n        });\n      }, !1, !1);\n    }\n\n    function o() {\n      return zm({\n        dom: {\n          tag: \"div\",\n          classes: [\"tox-spacer\"]\n        },\n        behaviours: nc([gd.config({})])\n      });\n    }\n\n    function h() {\n      return t(\"Apply\", function (t) {\n        return r(t, US.apply(), {\n          swap: e(t)\n        });\n      }, !0, !0);\n    }\n\n    function v(n, e) {\n      return function (t) {\n        return n(t, e);\n      };\n    }\n\n    function a(t, n) {\n      var e,\n          o = n;\n      i(e = t), r(e, US.tempTransform(), {\n        transform: o\n      }), u(e);\n    }\n\n    function b(t, n, e, o, r) {\n      var i = $w.parts.label({\n        dom: {\n          tag: \"label\",\n          classes: [\"tox-label\"],\n          innerHtml: c.translate(t)\n        }\n      }),\n          u = $w.parts.spectrum({\n        dom: {\n          tag: \"div\",\n          classes: [\"tox-slider__rail\"],\n          attributes: {\n            role: \"presentation\"\n          }\n        }\n      }),\n          a = $w.parts.thumb({\n        dom: {\n          tag: \"div\",\n          classes: [\"tox-slider__handle\"],\n          attributes: {\n            role: \"presentation\"\n          }\n        }\n      });\n      return zm($w.sketch({\n        dom: {\n          tag: \"div\",\n          classes: [\"tox-slider\"],\n          attributes: {\n            role: \"presentation\"\n          }\n        },\n        model: {\n          mode: \"x\",\n          minX: e,\n          maxX: r,\n          getInitialValue: rt({\n            x: o\n          })\n        },\n        components: [i, u, a],\n        sliderBehaviours: nc([Hg.config({})]),\n        onChoose: n\n      }));\n    }\n\n    function l(t, n, e, o, r) {\n      var i,\n          u,\n          a,\n          c,\n          s,\n          l,\n          f = (i = t, u = n, a = e, c = o, s = r, [p(), (l = u, b(i, function (t, n, e) {\n        g(t, v(l, e.x / 100));\n      }, a, c, s)), h()]);\n      return ly.sketch({\n        dom: w,\n        components: f.map(function (t) {\n          return t.asSpec();\n        }),\n        containerBehaviours: nc([mm(\"image-tools-filter-panel-buttons-events\", [Cr(YS.disable(), function (t, n) {\n          d(f, t);\n        }), Cr(YS.enable(), function (t, n) {\n          m(f, t);\n        })])])\n      });\n    }\n\n    function y(t) {\n      return b(t, function (l, t, n) {\n        var e = z.getOpt(l),\n            o = L.getOpt(l),\n            r = N.getOpt(l);\n        e.each(function (s) {\n          o.each(function (c) {\n            r.each(function (t) {\n              var o,\n                  r,\n                  i,\n                  n = Df.getValue(s).x / 100,\n                  e = Df.getValue(t).x / 100,\n                  u = Df.getValue(c).x / 100,\n                  a = (o = n, r = e, i = u, function (t) {\n                return T0(t, (n = r, e = i, _0(O0(), [C0(o, 0, 2), 0, 0, 0, 0, 0, C0(n, 0, 2), 0, 0, 0, 0, 0, C0(e, 0, 2), 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1])));\n                var n, e;\n              });\n              g(l, a);\n            });\n          });\n        });\n      }, 0, 100, 200);\n    }\n\n    function x(n, e, o) {\n      return function (t) {\n        r(t, US.swap(), {\n          transform: e,\n          swap: function swap() {\n            q.getOpt(t).each(function (t) {\n              Rg.set(t, [n]), o(t);\n            });\n          }\n        });\n      };\n    }\n\n    var w = {\n      tag: \"div\",\n      classes: [\"tox-image-tools__toolbar\", \"tox-image-tools-edit-panel\"]\n    },\n        S = st,\n        k = [p(), o(), t(\"Apply\", function (t) {\n      s(t, function (t) {\n        var n,\n            e,\n            o,\n            r,\n            i,\n            u,\n            a,\n            c,\n            s,\n            l = f.getRect();\n        return n = l.x, e = l.y, o = l.w, r = l.h, u = n, a = e, c = o, s = r, (i = t).toCanvas().then(function (t) {\n          return FS(t, i.getType(), u, a, c, s);\n        });\n      }), f.hideCrop();\n    }, !1, !0)],\n        C = ly.sketch({\n      dom: w,\n      components: k.map(function (t) {\n        return t.asSpec();\n      }),\n      containerBehaviours: nc([mm(\"image-tools-crop-buttons-events\", [Cr(YS.disable(), function (t, n) {\n        d(k, t);\n      }), Cr(YS.enable(), function (t, n) {\n        m(k, t);\n      })])])\n    }),\n        O = zm(ow({\n      name: \"size\",\n      label: vt.none(),\n      constrain: !0,\n      disabled: !1\n    }, c)),\n        _ = [p(), o(), O, o(), t(\"Apply\", function (a) {\n      O.getOpt(a).each(function (t) {\n        var r,\n            i,\n            n = Df.getValue(t),\n            e = parseInt(n.width, 10),\n            o = parseInt(n.height, 10),\n            u = (r = e, i = o, function (t) {\n          return e = r, o = i, (n = t).toCanvas().then(function (t) {\n            return DS(t, e, o).then(function (t) {\n              return S0(t, n.getType());\n            });\n          });\n          var n, e, o;\n        });\n        s(a, u);\n      });\n    }, !1, !0)],\n        T = ly.sketch({\n      dom: w,\n      components: _.map(function (t) {\n        return t.asSpec();\n      }),\n      containerBehaviours: nc([mm(\"image-tools-resize-buttons-events\", [Cr(YS.disable(), function (t, n) {\n        d(_, t);\n      }), Cr(YS.enable(), function (t, n) {\n        m(_, t);\n      })])])\n    }),\n        E = v(R0, \"h\"),\n        D = v(R0, \"v\"),\n        B = v(V0, -90),\n        M = v(V0, 90),\n        A = [p(), o(), n(\"flip-horizontally\", \"Flip horizontally\", function (t) {\n      a(t, E);\n    }, !1), n(\"flip-vertically\", \"Flip vertically\", function (t) {\n      a(t, D);\n    }, !1), n(\"rotate-left\", \"Rotate counterclockwise\", function (t) {\n      a(t, B);\n    }, !1), n(\"rotate-right\", \"Rotate clockwise\", function (t) {\n      a(t, M);\n    }, !1), o(), h()],\n        F = ly.sketch({\n      dom: w,\n      components: A.map(function (t) {\n        return t.asSpec();\n      }),\n      containerBehaviours: nc([mm(\"image-tools-fliprotate-buttons-events\", [Cr(YS.disable(), function (t, n) {\n        d(A, t);\n      }), Cr(YS.enable(), function (t, n) {\n        m(A, t);\n      })])])\n    }),\n        I = [p(), o(), h()],\n        R = ly.sketch({\n      dom: w,\n      components: I.map(function (t) {\n        return t.asSpec();\n      })\n    }),\n        V = l(\"Brightness\", F0, -100, 0, 100),\n        P = l(\"Contrast\", I0, -100, 0, 100),\n        H = l(\"Gamma\", A0, -100, 0, 100),\n        z = y(\"R\"),\n        N = y(\"G\"),\n        L = y(\"B\"),\n        W = [p(), z, N, L, h()],\n        U = ly.sketch({\n      dom: w,\n      components: W.map(function (t) {\n        return t.asSpec();\n      })\n    }),\n        j = vt.some(M0),\n        G = vt.some(B0),\n        X = [n(\"crop\", \"Crop\", x(C, vt.none(), function (t) {\n      f.showCrop();\n    }), !1), n(\"resize\", \"Resize\", x(T, vt.none(), function (t) {\n      O.getOpt(t).each(function (t) {\n        var n = f.getMeasurements(),\n            e = n.width,\n            o = n.height;\n        Df.setValue(t, {\n          width: e,\n          height: o\n        });\n      });\n    }), !1), n(\"orientation\", \"Orientation\", x(F, vt.none(), S), !1), n(\"brightness\", \"Brightness\", x(V, vt.none(), S), !1), n(\"sharpen\", \"Sharpen\", x(R, j, S), !1), n(\"contrast\", \"Contrast\", x(P, vt.none(), S), !1), n(\"color-levels\", \"Color levels\", x(U, vt.none(), S), !1), n(\"gamma\", \"Gamma\", x(H, vt.none(), S), !1), n(\"invert\", \"Invert\", x(R, G, S), !1)],\n        Y = ly.sketch({\n      dom: w,\n      components: X.map(function (t) {\n        return t.asSpec();\n      })\n    }),\n        q = zm(ly.sketch({\n      dom: {\n        tag: \"div\"\n      },\n      components: [Y],\n      containerBehaviours: nc([Rg.config({})])\n    }));\n    return {\n      memContainer: q,\n      getApplyButton: function getApplyButton(t) {\n        return q.getOpt(t).map(function (t) {\n          var n = t.components()[0];\n          return n.components()[n.components().length - 1];\n        });\n      }\n    };\n  }\n\n  function iw(t) {\n    if (k(t.changedTouches)) for (var n = \"screenX screenY pageX pageY clientX clientY\".split(\" \"), e = 0; e < n.length; e++) {\n      t[n[e]] = t.changedTouches[0][n[e]];\n    }\n  }\n\n  (zy = Hy = Hy || {})[zy.HighlightFirst = 0] = \"HighlightFirst\", zy[zy.HighlightNone = 1] = \"HighlightNone\";\n\n  function uw(o, t) {\n    return {\n      uid: o.uid,\n      dom: o.dom,\n      components: t,\n      behaviours: nl(o.formBehaviours, [Df.config({\n        store: {\n          mode: \"manual\",\n          getValue: function getValue(t) {\n            return dt(hl(t, o), function (t, o) {\n              return t().bind(function (t) {\n                var n = cd.getCurrent(t),\n                    e = new Error(\"Cannot find a current component to extract the value from for form part '\" + o + \"': \" + Fr(t.element));\n                return n.fold(function () {\n                  return Ve.error(e);\n                }, Ve.value);\n              }).map(Df.getValue);\n            });\n          },\n          setValue: function setValue(e, t) {\n            J(t, function (n, t) {\n              ml(e, o, t).each(function (t) {\n                cd.getCurrent(t).each(function (t) {\n                  Df.setValue(t, n);\n                });\n              });\n            });\n          }\n        }\n      })]),\n      apis: {\n        getField: function getField(t, n) {\n          return ml(t, o, n).bind(cd.getCurrent);\n        }\n      }\n    };\n  }\n\n  function aw() {\n    return cd.config({\n      find: vt.some\n    });\n  }\n\n  function cw(t) {\n    return n = Mr, e = Ar, s0(t, function (t) {\n      return n(t.element);\n    }, function (t, n) {\n      return e(t.element, n);\n    });\n    var n, e;\n  }\n\n  var sw,\n      lw,\n      fw,\n      dw,\n      mw = function mw(n, t) {\n    return n.getSystem().getByUid(t.uid + \"-\" + Qy()).map(function (t) {\n      return function () {\n        return Ve.value(t);\n      };\n    }).getOrThunk(function () {\n      return t.lazySink.fold(function () {\n        return function () {\n          return Ve.error(new Error(\"No internal sink is specified, nor could an external sink be found\"));\n        };\n      }, function (t) {\n        return function () {\n          return t(n);\n        };\n      });\n    });\n  },\n      gw = rt([mo(\"dom\"), mo(\"fetch\"), Ju(\"onOpen\"), $u(\"onExecute\"), Eo(\"getHotspot\", vt.some), Eo(\"getAnchorOverrides\", rt({})), Wc(), Zs(\"dropdownBehaviours\", [Lg, $y, Fg, Hg]), mo(\"toggleClass\"), Eo(\"eventOrder\", {}), wo(\"lazySink\"), Eo(\"matchWidth\", !1), Eo(\"useMinWidth\", !1), wo(\"role\")].concat(ux())),\n      pw = rt([$f({\n    schema: [Yu()],\n    name: \"menu\",\n    defaults: function defaults(t) {\n      return {\n        onExecute: t.onExecute\n      };\n    }\n  }), Zy()]),\n      hw = Cl({\n    name: \"Dropdown\",\n    configFields: gw(),\n    partFields: pw(),\n    factory: function factory(n, t, e, o) {\n      function r(t) {\n        bf.getState(t).each(function (t) {\n          ip.highlightPrimary(t);\n        });\n      }\n\n      function i(t, n) {\n        return yr(t), vt.some(!0);\n      }\n\n      var u,\n          a = {\n        expand: function expand(t) {\n          Lg.isOn(t) || ex(n, h, t, o, st, Hy.HighlightNone).get(st);\n        },\n        open: function open(t) {\n          Lg.isOn(t) || ex(n, h, t, o, st, Hy.HighlightFirst).get(st);\n        },\n        isOpen: Lg.isOn,\n        close: function close(t) {\n          Lg.isOn(t) && ex(n, h, t, o, st, Hy.HighlightFirst).get(st);\n        },\n        repositionMenus: function repositionMenus(t) {\n          Lg.isOn(t) && ix(t);\n        }\n      };\n      return {\n        uid: n.uid,\n        dom: n.dom,\n        components: t,\n        behaviours: nl(n.dropdownBehaviours, [Lg.config({\n          toggleClass: n.toggleClass,\n          aria: {\n            mode: \"expanded\"\n          }\n        }), $y.config({\n          others: {\n            sandbox: function sandbox(t) {\n              return rx(n, t, {\n                onOpen: function onOpen() {\n                  return Lg.on(t);\n                },\n                onClose: function onClose() {\n                  return Lg.off(t);\n                }\n              });\n            }\n          }\n        }), Fg.config({\n          mode: \"special\",\n          onSpace: i,\n          onEnter: i,\n          onDown: function onDown(t, n) {\n            return hw.isOpen(t) ? r($y.getCoupled(t, \"sandbox\")) : hw.open(t), vt.some(!0);\n          },\n          onEscape: function onEscape(t, n) {\n            return hw.isOpen(t) ? (hw.close(t), vt.some(!0)) : vt.none();\n          }\n        }), Hg.config({})]),\n        events: Sm(vt.some(function (t) {\n          ex(n, h, t, o, r, Hy.HighlightFirst).get(st);\n        })),\n        eventOrder: _lt(_lt({}, n.eventOrder), ((u = {})[Ii()] = [\"disabling\", \"toggling\", \"alloy.base.behaviour\"], u)),\n        apis: a,\n        domModification: {\n          attributes: _lt(_lt({\n            \"aria-haspopup\": \"true\"\n          }, n.role.fold(function () {\n            return {};\n          }, function (t) {\n            return {\n              role: t\n            };\n          })), \"button\" === n.dom.tag ? {\n            type: tt(n.dom, \"attributes\").bind(function (t) {\n              return tt(t, \"type\");\n            }).getOr(\"button\")\n          } : {})\n        }\n      };\n    },\n    apis: {\n      open: function open(t, n) {\n        return t.open(n);\n      },\n      expand: function expand(t, n) {\n        return t.expand(n);\n      },\n      close: function close(t, n) {\n        return t.close(n);\n      },\n      isOpen: function isOpen(t, n) {\n        return t.isOpen(n);\n      },\n      repositionMenus: function repositionMenus(t, n) {\n        return t.repositionMenus(n);\n      }\n    }\n  }),\n      vw = xa({\n    fields: [],\n    name: \"unselecting\",\n    active: Object.freeze({\n      __proto__: null,\n      events: function events() {\n        return eu([Sr(Ei(), D)]);\n      },\n      exhibit: function exhibit() {\n        return Lr({\n          styles: {\n            \"-webkit-user-select\": \"none\",\n            \"user-select\": \"none\",\n            \"-ms-user-select\": \"none\",\n            \"-moz-user-select\": \"-moz-none\"\n          },\n          attributes: {\n            unselectable: \"on\"\n          }\n        });\n      }\n    })\n  }),\n      bw = Ir(\"color-input-change\"),\n      yw = Ir(\"color-swatch-change\"),\n      xw = Ir(\"color-picker-cancel\"),\n      ww = Qf({\n    schema: [mo(\"dom\")],\n    name: \"label\"\n  }),\n      Sw = ax(\"top-left\"),\n      kw = ax(\"top\"),\n      Cw = ax(\"top-right\"),\n      Ow = ax(\"right\"),\n      _w = ax(\"bottom-right\"),\n      Tw = ax(\"bottom\"),\n      Ew = ax(\"bottom-left\"),\n      Dw = [ww, ax(\"left\"), Ow, kw, Tw, Sw, Cw, Ew, _w, Jf({\n    name: \"thumb\",\n    defaults: rt({\n      dom: {\n        styles: {\n          position: \"absolute\"\n        }\n      }\n    }),\n    overrides: function overrides(t) {\n      return {\n        events: eu([Tr(si(), t, \"spectrum\"), Tr(li(), t, \"spectrum\"), Tr(fi(), t, \"spectrum\"), Tr(mi(), t, \"spectrum\"), Tr(gi(), t, \"spectrum\"), Tr(hi(), t, \"spectrum\")])\n      };\n    }\n  }), Jf({\n    schema: [cr(\"mouseIsDown\", function () {\n      return Po(!1);\n    })],\n    name: \"spectrum\",\n    overrides: function overrides(e) {\n      function o(n, t) {\n        return r.getValueFromEvent(t).map(function (t) {\n          return r.setValueFrom(n, e, t);\n        });\n      }\n\n      var r = e.model.manager;\n      return {\n        behaviours: nc([Fg.config({\n          mode: \"special\",\n          onLeft: function onLeft(t) {\n            return r.onLeft(t, e);\n          },\n          onRight: function onRight(t) {\n            return r.onRight(t, e);\n          },\n          onUp: function onUp(t) {\n            return r.onUp(t, e);\n          },\n          onDown: function onDown(t) {\n            return r.onDown(t, e);\n          }\n        }), Hg.config({})]),\n        events: eu([Cr(si(), o), Cr(li(), o), Cr(mi(), o), Cr(gi(), function (t, n) {\n          e.mouseIsDown.get() && o(t, n);\n        })])\n      };\n    }\n  })],\n      Bw = rt(\"slider.change.value\"),\n      Mw = \"left\",\n      Aw = Jx(-1),\n      Fw = Jx(1),\n      Iw = vt.none,\n      Rw = vt.none,\n      Vw = {\n    \"top-left\": vt.none(),\n    top: vt.none(),\n    \"top-right\": vt.none(),\n    right: vt.some(function (t, n) {\n      Fx(t, {\n        x: px(n)\n      });\n    }),\n    \"bottom-right\": vt.none(),\n    bottom: vt.none(),\n    \"bottom-left\": vt.none(),\n    left: vt.some(function (t, n) {\n      Fx(t, {\n        x: fx(n)\n      });\n    })\n  },\n      Pw = Object.freeze({\n    __proto__: null,\n    setValueFrom: function setValueFrom(t, n, e) {\n      var o = Kx(t, n, e);\n      return qx(t, {\n        x: o\n      }), o;\n    },\n    setToMin: function setToMin(t, n) {\n      qx(t, {\n        x: sx(n)\n      });\n    },\n    setToMax: function setToMax(t, n) {\n      qx(t, {\n        x: mx(n)\n      });\n    },\n    findValueOfOffset: Kx,\n    getValueFromEvent: function getValueFromEvent(t) {\n      return cx(t).map(function (t) {\n        return t.left;\n      });\n    },\n    findPositionOfValue: $x,\n    setPositionFromValue: function setPositionFromValue(t, n, e, o) {\n      var r = Mx(e),\n          i = $x(t, o.getSpectrum(t), r.x, o.getLeftEdge(t), o.getRightEdge(t), e),\n          u = On(n.element) / 2;\n      dn(n.element, \"left\", i - u + \"px\");\n    },\n    onLeft: Aw,\n    onRight: Fw,\n    onUp: Iw,\n    onDown: Rw,\n    edgeActions: Vw\n  }),\n      Hw = vt.none,\n      zw = vt.none,\n      Nw = t0(-1),\n      Lw = t0(1),\n      Ww = {\n    \"top-left\": vt.none(),\n    top: vt.some(function (t, n) {\n      Fx(t, {\n        y: dx(n)\n      });\n    }),\n    \"top-right\": vt.none(),\n    right: vt.none(),\n    \"bottom-right\": vt.none(),\n    bottom: vt.some(function (t, n) {\n      Fx(t, {\n        y: hx(n)\n      });\n    }),\n    \"bottom-left\": vt.none(),\n    left: vt.none()\n  },\n      Uw = Object.freeze({\n    __proto__: null,\n    setValueFrom: function setValueFrom(t, n, e) {\n      var o = Zx(t, n, e);\n      return Qx(t, {\n        y: o\n      }), o;\n    },\n    setToMin: function setToMin(t, n) {\n      Qx(t, {\n        y: lx(n)\n      });\n    },\n    setToMax: function setToMax(t, n) {\n      Qx(t, {\n        y: gx(n)\n      });\n    },\n    findValueOfOffset: Zx,\n    getValueFromEvent: function getValueFromEvent(t) {\n      return cx(t).map(function (t) {\n        return t.top;\n      });\n    },\n    findPositionOfValue: n0,\n    setPositionFromValue: function setPositionFromValue(t, n, e, o) {\n      var r = Mx(e),\n          i = n0(t, o.getSpectrum(t), r.y, o.getTopEdge(t), o.getBottomEdge(t), e),\n          u = wn(n.element) / 2;\n      dn(n.element, \"top\", i - u + \"px\");\n    },\n    onLeft: Hw,\n    onRight: zw,\n    onUp: Nw,\n    onDown: Lw,\n    edgeActions: Ww\n  }),\n      jw = cx,\n      Gw = r0(-1, !1),\n      Xw = r0(1, !1),\n      Yw = r0(-1, !0),\n      qw = r0(1, !0),\n      Kw = {\n    \"top-left\": vt.some(function (t, n) {\n      Fx(t, Ax(fx(n), dx(n)));\n    }),\n    top: vt.some(function (t, n) {\n      Fx(t, Ax(xx(n), dx(n)));\n    }),\n    \"top-right\": vt.some(function (t, n) {\n      Fx(t, Ax(px(n), dx(n)));\n    }),\n    right: vt.some(function (t, n) {\n      Fx(t, Ax(px(n), wx(n)));\n    }),\n    \"bottom-right\": vt.some(function (t, n) {\n      Fx(t, Ax(px(n), hx(n)));\n    }),\n    bottom: vt.some(function (t, n) {\n      Fx(t, Ax(xx(n), hx(n)));\n    }),\n    \"bottom-left\": vt.some(function (t, n) {\n      Fx(t, Ax(fx(n), hx(n)));\n    }),\n    left: vt.some(function (t, n) {\n      Fx(t, Ax(fx(n), wx(n)));\n    })\n  },\n      Jw = Object.freeze({\n    __proto__: null,\n    setValueFrom: function setValueFrom(t, n, e) {\n      var o = o0(Kx(t, n, e.left), Zx(t, n, e.top));\n      return e0(t, o), o;\n    },\n    setToMin: function setToMin(t, n) {\n      e0(t, o0(sx(n), lx(n)));\n    },\n    setToMax: function setToMax(t, n) {\n      e0(t, o0(mx(n), gx(n)));\n    },\n    getValueFromEvent: jw,\n    setPositionFromValue: function setPositionFromValue(t, n, e, o) {\n      var r = Mx(e),\n          i = $x(t, o.getSpectrum(t), r.x, o.getLeftEdge(t), o.getRightEdge(t), e),\n          u = n0(t, o.getSpectrum(t), r.y, o.getTopEdge(t), o.getBottomEdge(t), e),\n          a = On(n.element) / 2,\n          c = wn(n.element) / 2;\n      dn(n.element, \"left\", i - a + \"px\"), dn(n.element, \"top\", u - c + \"px\");\n    },\n    onLeft: Gw,\n    onRight: Xw,\n    onUp: Yw,\n    onDown: qw,\n    edgeActions: Kw\n  }),\n      $w = Cl({\n    name: \"Slider\",\n    configFields: [Eo(\"stepSize\", 1), Eo(\"onChange\", st), Eo(\"onChoose\", st), Eo(\"onInit\", st), Eo(\"onDragStart\", st), Eo(\"onDragEnd\", st), Eo(\"snapToGrid\", !1), Eo(\"rounded\", !0), wo(\"snapStart\"), go(\"model\", lo(\"mode\", {\n      x: [Eo(\"minX\", 0), Eo(\"maxX\", 100), cr(\"value\", function (t) {\n        return Po(t.mode.minX);\n      }), mo(\"getInitialValue\"), ta(\"manager\", Pw)],\n      y: [Eo(\"minY\", 0), Eo(\"maxY\", 100), cr(\"value\", function (t) {\n        return Po(t.mode.minY);\n      }), mo(\"getInitialValue\"), ta(\"manager\", Uw)],\n      xy: [Eo(\"minX\", 0), Eo(\"maxX\", 100), Eo(\"minY\", 0), Eo(\"maxY\", 100), cr(\"value\", function (t) {\n        return Po({\n          x: t.mode.minX,\n          y: t.mode.minY\n        });\n      }), mo(\"getInitialValue\"), ta(\"manager\", Jw)]\n    })), Zs(\"sliderBehaviours\", [Fg, Df]), cr(\"mouseIsDown\", function () {\n      return Po(!1);\n    })],\n    partFields: Dw,\n    factory: function factory(i, t, n, e) {\n      function u(t) {\n        return gl(t, i, \"thumb\");\n      }\n\n      function a(t) {\n        return gl(t, i, \"spectrum\");\n      }\n\n      function o(t) {\n        return ml(t, i, \"left-edge\");\n      }\n\n      function r(t) {\n        return ml(t, i, \"right-edge\");\n      }\n\n      function c(t) {\n        return ml(t, i, \"top-edge\");\n      }\n\n      function s(t) {\n        return ml(t, i, \"bottom-edge\");\n      }\n\n      function l(t, n) {\n        v.setPositionFromValue(t, n, i, {\n          getLeftEdge: o,\n          getRightEdge: r,\n          getTopEdge: c,\n          getBottomEdge: s,\n          getSpectrum: a\n        });\n      }\n\n      function f(t, n) {\n        h.value.set(n), l(t, u(t));\n      }\n\n      function d(e) {\n        var t = i.mouseIsDown.get();\n        i.mouseIsDown.set(!1), t && ml(e, i, \"thumb\").each(function (t) {\n          var n = h.value.get();\n          i.onChoose(e, t, n);\n        });\n      }\n\n      function m(t, n) {\n        n.stop(), i.mouseIsDown.set(!0), i.onDragStart(t, u(t));\n      }\n\n      function g(t, n) {\n        n.stop(), i.onDragEnd(t, u(t)), d(t);\n      }\n\n      var p,\n          h = i.model,\n          v = h.manager;\n      return {\n        uid: i.uid,\n        dom: i.dom,\n        components: t,\n        behaviours: nl(i.sliderBehaviours, [Fg.config({\n          mode: \"special\",\n          focusIn: function focusIn(t) {\n            return ml(t, i, \"spectrum\").map(Fg.focusIn).map(D);\n          }\n        }), Df.config({\n          store: {\n            mode: \"manual\",\n            getValue: function getValue(t) {\n              return h.value.get();\n            }\n          }\n        }), ic.config({\n          channels: ((p = {})[wf()] = {\n            onReceive: d\n          }, p)\n        })]),\n        events: eu([Cr(Bw(), function (t, n) {\n          !function (t, n) {\n            f(t, n);\n            var e = u(t);\n            i.onChange(t, e, n), vt.some(!0);\n          }(t, n.event.value);\n        }), ou(function (t, n) {\n          var e = h.getInitialValue();\n          h.value.set(e);\n          var o = u(t);\n          l(t, o);\n          var r = a(t);\n          i.onInit(t, o, r, h.value.get());\n        }), Cr(si(), m), Cr(fi(), g), Cr(mi(), m), Cr(hi(), g)]),\n        apis: {\n          resetToMin: function resetToMin(t) {\n            v.setToMin(t, i);\n          },\n          resetToMax: function resetToMax(t) {\n            v.setToMax(t, i);\n          },\n          setValue: f,\n          refresh: l\n        },\n        domModification: {\n          styles: {\n            position: \"relative\"\n          }\n        }\n      };\n    },\n    apis: {\n      setValue: function setValue(t, n, e) {\n        t.setValue(n, e);\n      },\n      resetToMin: function resetToMin(t, n) {\n        t.resetToMin(n);\n      },\n      resetToMax: function resetToMax(t, n) {\n        t.resetToMax(n);\n      },\n      refresh: function refresh(t, n) {\n        t.refresh(n);\n      }\n    }\n  }),\n      Qw = Ir(\"rgb-hex-update\"),\n      Zw = Ir(\"slider-update\"),\n      tS = Ir(\"palette-update\"),\n      nS = [Zs(\"formBehaviours\", [Df])],\n      eS = {\n    getField: zr(function (t, n, e) {\n      return t.getField(n, e);\n    }),\n    sketch: function sketch(t) {\n      var e,\n          n = {\n        field: function field(t, n) {\n          return e.push(t), cl(\"form\", i0(t), n);\n        },\n        record: rt(e = [])\n      },\n          o = t(n),\n          r = M(n.record(), function (t) {\n        return Jf({\n          name: t,\n          pname: i0(t)\n        });\n      });\n      return Sl(\"form\", nS, r, uw, o);\n    }\n  },\n      oS = Ir(\"valid-input\"),\n      rS = Ir(\"invalid-input\"),\n      iS = Ir(\"validating-input\"),\n      uS = \"colorcustom.rgb.\",\n      aS = function aS(t) {\n    return cd.config({\n      find: t.getOpt\n    });\n  },\n      cS = function cS(t) {\n    return cd.config({\n      find: function find(n) {\n        return Jt(n.element, t).bind(function (t) {\n          return n.getSystem().getByDom(t).toOptional();\n        });\n      }\n    });\n  },\n      sS = {\n    \"colorcustom.rgb.red.label\": \"R\",\n    \"colorcustom.rgb.red.description\": \"Red component\",\n    \"colorcustom.rgb.green.label\": \"G\",\n    \"colorcustom.rgb.green.description\": \"Green component\",\n    \"colorcustom.rgb.blue.label\": \"B\",\n    \"colorcustom.rgb.blue.description\": \"Blue component\",\n    \"colorcustom.rgb.hex.label\": \"#\",\n    \"colorcustom.rgb.hex.description\": \"Hex color code\",\n    \"colorcustom.rgb.range\": \"Range 0 to 255\",\n    \"colorcustom.sb.saturation\": \"Saturation\",\n    \"colorcustom.sb.brightness\": \"Brightness\",\n    \"colorcustom.sb.picker\": \"Saturation and Brightness Picker\",\n    \"colorcustom.sb.palette\": \"Saturation and Brightness Palette\",\n    \"colorcustom.sb.instructions\": \"Use arrow keys to select saturation and brightness, on x and y axes\",\n    \"colorcustom.hue.hue\": \"Hue\",\n    \"colorcustom.hue.slider\": \"Hue Slider\",\n    \"colorcustom.hue.palette\": \"Hue Palette\",\n    \"colorcustom.hue.instructions\": \"Use arrow keys to select a hue\",\n    \"aria.color.picker\": \"Color Picker\",\n    \"aria.input.invalid\": \"Invalid input\"\n  },\n      lS = tinymce.util.Tools.resolve(\"tinymce.Resource\"),\n      fS = tinymce.util.Tools.resolve(\"tinymce.util.Tools\"),\n      dS = $o([Eo(\"preprocess\", h), Eo(\"postprocess\", h)]),\n      mS = function mS(r, t) {\n    var i = so(\"RepresentingConfigs.memento processors\", dS, t);\n    return Df.config({\n      store: {\n        mode: \"manual\",\n        getValue: function getValue(t) {\n          var n = r.get(t),\n              e = Df.getValue(n);\n          return i.postprocess(e);\n        },\n        setValue: function setValue(t, n) {\n          var e = i.preprocess(n),\n              o = r.get(t);\n          Df.setValue(o, e);\n        }\n      }\n    });\n  },\n      gS = s0,\n      pS = function pS(t) {\n    return Df.config({\n      store: {\n        mode: \"memory\",\n        initialValue: t\n      }\n    });\n  },\n      hS = Ir(\"alloy-fake-before-tabstop\"),\n      vS = Ir(\"alloy-fake-after-tabstop\"),\n      bS = !(le().browser.isIE() || le().browser.isEdge()),\n      yS = function yS(t) {\n    return t.getContext(\"2d\");\n  },\n      xS = function xS(t, n, e) {\n    return t.width = n, t.height = e, t;\n  },\n      wS = function wS(t) {\n    URL.revokeObjectURL(t.src);\n  },\n      SS = [0, .01, .02, .04, .05, .06, .07, .08, .1, .11, .12, .14, .15, .16, .17, .18, .2, .21, .22, .24, .25, .27, .28, .3, .32, .34, .36, .38, .4, .42, .44, .46, .48, .5, .53, .56, .59, .62, .65, .68, .71, .74, .77, .8, .83, .86, .89, .92, .95, .98, 1, 1.06, 1.12, 1.18, 1.24, 1.3, 1.36, 1.42, 1.48, 1.54, 1.6, 1.66, 1.72, 1.78, 1.84, 1.9, 1.96, 2, 2.12, 2.25, 2.37, 2.5, 2.62, 2.75, 2.87, 3, 3.2, 3.4, 3.6, 3.8, 4, 4.3, 4.7, 4.9, 5, 5.5, 6, 6.5, 6.8, 7, 7.3, 7.5, 7.8, 8, 8.4, 8.7, 9, 9.4, 9.6, 9.8, 10],\n      kS = function kS(t, n, T) {\n    var e = yS(t),\n        o = function (t) {\n      for (var n, e, o, r, i = t.data, u = T[0], a = T[1], c = T[2], s = T[3], l = T[4], f = T[5], d = T[6], m = T[7], g = T[8], p = T[9], h = T[10], v = T[11], b = T[12], y = T[13], x = T[14], w = T[15], S = T[16], k = T[17], C = T[18], O = T[19], _ = 0; _ < i.length; _ += 4) {\n        n = i[_], e = i[_ + 1], o = i[_ + 2], r = i[_ + 3], i[_] = n * u + e * a + o * c + r * s + l, i[_ + 1] = n * f + e * d + o * m + r * g + p, i[_ + 2] = n * h + e * v + o * b + r * y + x, i[_ + 3] = n * w + e * S + o * k + r * C + O;\n      }\n\n      return t;\n    }(e.getImageData(0, 0, t.width, t.height));\n\n    return e.putImageData(o, 0, 0), S0(t, n);\n  },\n      CS = (sw = [-1, 0, 0, 0, 255, 0, -1, 0, 0, 255, 0, 0, -1, 0, 255, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], function (t) {\n    return T0(t, sw);\n  }),\n      OS = E0(function (t, n) {\n    return _0(t, [1, 0, 0, 0, n = C0(255 * n, -255, 255), 0, 1, 0, 0, n, 0, 0, 1, 0, n, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1]);\n  }),\n      _S = E0(function (t, n) {\n    var e;\n    return n = C0(n, -1, 1), _0(t, [(e = (n *= 100) < 0 ? 127 + n / 100 * 127 : 127 * (0 == (e = n % 1) ? SS[n] : SS[Math.floor(n)] * (1 - e) + SS[Math.floor(n) + 1] * e) + 127) / 127, 0, 0, 0, .5 * (127 - e), 0, e / 127, 0, 0, .5 * (127 - e), 0, 0, e / 127, 0, .5 * (127 - e), 0, 0, 0, 1, 0, 0, 0, 0, 0, 1]);\n  }),\n      TS = (lw = [0, -1, 0, -1, 5, -1, 0, -1, 0], function (t) {\n    return a = lw, (u = t).toCanvas().then(function (t) {\n      return n = t, e = u.getType(), o = a, r = yS(n), i = function (t, n, e) {\n        for (var o = function o(t, n, e) {\n          return e < t ? t = e : t < n && (t = n), t;\n        }, r = Math.round(Math.sqrt(e.length)), i = Math.floor(r / 2), u = t.data, a = n.data, c = t.width, s = t.height, l = 0; l < s; l++) {\n          for (var f = 0; f < c; f++) {\n            for (var d = 0, m = 0, g = 0, p = 0; p < r; p++) {\n              for (var h = 0; h < r; h++) {\n                var v = o(f + h - i, 0, c - 1),\n                    b = 4 * (o(l + p - i, 0, s - 1) * c + v),\n                    y = e[p * r + h];\n                d += u[b] * y, m += u[1 + b] * y, g += u[2 + b] * y;\n              }\n            }\n\n            var x = 4 * (l * c + f);\n            a[x] = o(d, 0, 255), a[1 + x] = o(m, 0, 255), a[2 + x] = o(g, 0, 255);\n          }\n        }\n\n        return n;\n      }(r.getImageData(0, 0, n.width, n.height), r.getImageData(0, 0, n.width, n.height), o), r.putImageData(i, 0, 0), S0(n, e);\n      var n, e, o, r, i;\n    });\n    var u, a;\n  }),\n      ES = (fw = function fw(t, n) {\n    return 255 * Math.pow(t / 255, 1 - n);\n  }, function (n, e) {\n    return n.toCanvas().then(function (t) {\n      return function (t, n, e) {\n        for (var o = yS(t), r = new Array(256), i = 0; i < r.length; i++) {\n          r[i] = fw(i, e);\n        }\n\n        var u = function (t, n) {\n          for (var e = t.data, o = 0; o < e.length; o += 4) {\n            e[o] = n[e[o]], e[o + 1] = n[e[o + 1]], e[o + 2] = n[e[o + 2]];\n          }\n\n          return t;\n        }(o.getImageData(0, 0, t.width, t.height), r);\n\n        return o.putImageData(u, 0, 0), S0(t, n);\n      }(t, n.getType(), e);\n    });\n  }),\n      DS = function DS(t, n, e) {\n    var o = b0(t),\n        r = y0(t),\n        i = n / o,\n        u = e / r,\n        a = !1;\n    (i < .5 || 2 < i) && (i = i < .5 ? .5 : 2, a = !0), (u < .5 || 2 < u) && (u = u < .5 ? .5 : 2, a = !0);\n    var c = BS(t, i, u);\n    return a ? c.then(function (t) {\n      return DS(t, n, e);\n    }) : c;\n  },\n      BS = function BS(u, a, c) {\n    return new Ny(function (t) {\n      var n = b0(u),\n          e = y0(u),\n          o = Math.floor(n * a),\n          r = Math.floor(e * c),\n          i = h0(o, r);\n      yS(i).drawImage(u, 0, 0, n, e, 0, 0, o, r), t(i);\n    });\n  },\n      MS = function MS(t, n, e) {\n    var o = (e < 0 ? 360 + e : e) * Math.PI / 180,\n        r = t.width,\n        i = t.height,\n        u = Math.sin(o),\n        a = Math.cos(o),\n        c = D0(Math.abs(r * a) + Math.abs(i * u)),\n        s = D0(Math.abs(r * u) + Math.abs(i * a)),\n        l = h0(c, s),\n        f = yS(l);\n    return f.translate(c / 2, s / 2), f.rotate(o), f.drawImage(t, -r / 2, -i / 2), S0(l, n);\n  },\n      AS = function AS(t, n, e) {\n    var o = h0(t.width, t.height),\n        r = yS(o);\n    return \"v\" === e ? (r.scale(1, -1), r.drawImage(t, 0, -o.height)) : (r.scale(-1, 1), r.drawImage(t, -o.width, 0)), S0(o, n);\n  },\n      FS = function FS(t, n, e, o, r, i) {\n    var u = h0(r, i);\n    return yS(u).drawImage(t, -e, -o), S0(u, n);\n  },\n      IS = Ir(\"toolbar.button.execute\"),\n      RS = ((dw = {})[Ii()] = [\"disabling\", \"alloy.base.behaviour\", \"toggling\", \"toolbar-button-events\"], dw),\n      VS = Ir(\"update-menu-text\"),\n      PS = Ir(\"update-menu-icon\"),\n      HS = {\n    type: \"separator\"\n  },\n      zS = function zS(t, l) {\n    var n, e, o;\n    return I((n = y(t) ? t.split(\" \") : t, e = l, 0 < (o = R(n, function (t, n) {\n      return y(n) ? \"\" === n ? t : \"|\" === n ? 0 < t.length && !W0(t[t.length - 1]) ? t.concat([HS]) : t : Tt(e, n.toLowerCase()) ? t.concat([e[n.toLowerCase()]]) : t : t.concat([n]);\n    }, [])).length && W0(o[o.length - 1]) && o.pop(), o), function (t, n) {\n      var e,\n          o,\n          r,\n          i,\n          u,\n          a,\n          c = function (t) {\n        if (W0(t)) return t;\n        var n = tt(t, \"value\").getOrThunk(function () {\n          return Ir(\"generated-menu-item\");\n        });\n        return Yo({\n          value: n\n        }, t);\n      }(n),\n          s = (o = l, Tt(e = c, \"getSubmenuItems\") ? (i = o, u = (r = e).getSubmenuItems(), a = zS(u, i), {\n        item: r,\n        menus: Yo(a.menus, sr(r.value, a.items)),\n        expansions: Yo(a.expansions, sr(r.value, r.value))\n      }) : {\n        item: e,\n        menus: {},\n        expansions: {}\n      });\n\n      return {\n        menus: Yo(t.menus, s.menus),\n        items: [s.item].concat(t.items),\n        expansions: Yo(t.expansions, s.expansions)\n      };\n    }, {\n      menus: {},\n      expansions: {},\n      items: []\n    });\n  },\n      NS = rt([Eo(\"field1Name\", \"field1\"), Eo(\"field2Name\", \"field2\"), Qu(\"onLockedChange\"), qu([\"lockClass\"]), Eo(\"locked\", !1), Bf(\"coupledFieldBehaviours\", [cd, Df])]),\n      LS = rt([Z0(\"field1\", \"field2\"), Z0(\"field2\", \"field1\"), Jf({\n    factory: fp,\n    schema: [mo(\"dom\")],\n    name: \"lock\",\n    overrides: function overrides(t) {\n      return {\n        buttonBehaviours: nc([Lg.config({\n          selected: t.locked,\n          toggleClass: t.markers.lockClass,\n          aria: {\n            mode: \"pressed\"\n          }\n        })])\n      };\n    }\n  })]),\n      WS = Cl({\n    name: \"FormCoupledInputs\",\n    configFields: NS(),\n    partFields: LS(),\n    factory: function factory(o, t, n, e) {\n      return {\n        uid: o.uid,\n        dom: o.dom,\n        components: t,\n        behaviours: Mf(o.coupledFieldBehaviours, [cd.config({\n          find: vt.some\n        }), Df.config({\n          store: {\n            mode: \"manual\",\n            getValue: function getValue(t) {\n              var n = bl(t, o, [\"field1\", \"field2\"]),\n                  e = {};\n              return e[o.field1Name] = Df.getValue(n.field1()), e[o.field2Name] = Df.getValue(n.field2()), e;\n            },\n            setValue: function setValue(t, n) {\n              var e = bl(t, o, [\"field1\", \"field2\"]);\n              nt(n, o.field1Name) && Df.setValue(e.field1(), n[o.field1Name]), nt(n, o.field2Name) && Df.setValue(e.field2(), n[o.field2Name]);\n            }\n          }\n        })]),\n        apis: {\n          getField1: function getField1(t) {\n            return ml(t, o, \"field1\");\n          },\n          getField2: function getField2(t) {\n            return ml(t, o, \"field2\");\n          },\n          getLock: function getLock(t) {\n            return ml(t, o, \"lock\");\n          }\n        }\n      };\n    },\n    apis: {\n      getField1: function getField1(t, n) {\n        return t.getField1(n);\n      },\n      getField2: function getField2(t, n) {\n        return t.getField2(n);\n      },\n      getLock: function getLock(t, n) {\n        return t.getLock(n);\n      }\n    }\n  }),\n      US = {\n    undo: rt(Ir(\"undo\")),\n    redo: rt(Ir(\"redo\")),\n    zoom: rt(Ir(\"zoom\")),\n    back: rt(Ir(\"back\")),\n    apply: rt(Ir(\"apply\")),\n    swap: rt(Ir(\"swap\")),\n    transform: rt(Ir(\"transform\")),\n    tempTransform: rt(Ir(\"temp-transform\")),\n    transformApply: rt(Ir(\"transform-apply\"))\n  },\n      jS = rt(\"save-state\"),\n      GS = rt(\"disable\"),\n      XS = rt(\"enable\"),\n      YS = {\n    formActionEvent: Sy,\n    saveState: jS,\n    disable: GS,\n    enable: XS\n  },\n      qS = tinymce.util.Tools.resolve(\"tinymce.geom.Rect\"),\n      KS = tinymce.util.Tools.resolve(\"tinymce.util.Observable\"),\n      JS = tinymce.util.Tools.resolve(\"tinymce.util.VK\");\n\n  function $S(t, d) {\n    function n(t) {\n      var n,\n          e,\n          o,\n          r,\n          i,\n          u,\n          a,\n          c,\n          s = t.raw,\n          l = (n = Math.max, e = y.documentElement, o = y.body, r = n(e.scrollWidth, o.scrollWidth), i = n(e.clientWidth, o.clientWidth), u = n(e.offsetWidth, o.offsetWidth), a = n(e.scrollHeight, o.scrollHeight), c = n(e.clientHeight, o.clientHeight), {\n        width: r < u ? i : r,\n        height: a < n(e.offsetHeight, o.offsetHeight) ? c : a\n      });\n      iw(s), t.prevent(), p = s.button, h = s.screenX, v = s.screenY;\n      var f = pn(w, \"cursor\");\n      mn(g = At.fromTag(\"div\", y), {\n        position: \"absolute\",\n        top: \"0\",\n        left: \"0\",\n        width: l.width + \"px\",\n        height: l.height + \"px\",\n        \"z-index\": \"2147483647\",\n        opacity: \"0.0001\",\n        cursor: f\n      }), Te(ye(x), g), b.push(pc(x, \"mousemove\", m), pc(x, \"touchmove\", m), pc(x, \"mouseup\", S), pc(x, \"touchend\", S)), d.start(s);\n    }\n\n    function m(t) {\n      var n = t.raw;\n      if (iw(n), n.button !== p) return S(t);\n      n.deltaX = n.screenX - h, n.deltaY = n.screenY - v, t.prevent(), d.drag(n);\n    }\n\n    var e,\n        o,\n        r,\n        g,\n        p,\n        h,\n        v,\n        i = [],\n        b = [],\n        y = null !== (e = d.document) && void 0 !== e ? e : document,\n        u = null !== (o = d.root) && void 0 !== o ? o : y,\n        x = At.fromDom(y),\n        w = At.fromDom(u.getElementById(null !== (r = d.handle) && void 0 !== r ? r : t)),\n        S = function S(t) {\n      iw(t.raw), St(b, function (t) {\n        return t.unbind();\n      }), b = [], Ee(g), d.stop && d.stop(t.raw);\n    };\n\n    return i.push(pc(w, \"mousedown\", n), pc(w, \"touchstart\", n)), {\n      destroy: function destroy() {\n        St(b.concat(i), function (t) {\n          return t.unbind();\n        }), b = [], i = [], k(g) && Ee(g);\n      }\n    };\n  }\n\n  function QS(t, n, e, o, r) {\n    return q0({\n      name: t,\n      icon: vt.some(n),\n      disabled: e,\n      tooltip: vt.some(t),\n      primary: !1,\n      borderless: !1\n    }, o, r);\n  }\n\n  function ZS(t, n) {\n    n ? gd.enable(t) : gd.disable(t);\n  }\n\n  var tk = 0,\n      nk = function nk(s, n, l, t, e) {\n    function f(t, n) {\n      return {\n        x: n.x - t.x,\n        y: n.y - t.y,\n        w: n.w,\n        h: n.h\n      };\n    }\n\n    function u(t, n, e, o) {\n      var r = n.x + e * t.deltaX,\n          i = n.y + o * t.deltaY,\n          u = Math.max(20, n.w + e * t.deltaW),\n          a = Math.max(20, n.h + o * t.deltaH),\n          c = (s = qS.clamp({\n        x: r,\n        y: i,\n        w: u,\n        h: a\n      }, l, \"move\" === t.name), f(l, s));\n      b.fire(\"updateRect\", {\n        rect: c\n      }), h(c);\n    }\n\n    function o(t) {\n      r(s = t);\n    }\n\n    function r(e) {\n      function t(t, n) {\n        Iu(m, \"#\" + d + \"-\" + t).each(function (t) {\n          mn(t, {\n            left: n.x + \"px\",\n            top: n.y + \"px\",\n            width: Math.max(0, n.w) + \"px\",\n            height: Math.max(0, n.h) + \"px\"\n          });\n        });\n      }\n\n      St(g, function (n) {\n        Iu(m, \"#\" + d + \"-\" + n.name).each(function (t) {\n          mn(t, {\n            left: e.w * n.xMul + e.x + \"px\",\n            top: e.h * n.yMul + e.y + \"px\"\n          });\n        });\n      }), t(\"top\", {\n        x: n.x,\n        y: n.y,\n        w: n.w,\n        h: e.y - n.y\n      }), t(\"right\", {\n        x: e.x + e.w,\n        y: e.y,\n        w: n.w - e.x - e.w + n.x,\n        h: e.h\n      }), t(\"bottom\", {\n        x: n.x,\n        y: e.y + e.h,\n        w: n.w,\n        h: n.h - e.y - e.h + n.y\n      }), t(\"left\", {\n        x: n.x,\n        y: e.y,\n        w: e.x - n.x,\n        h: e.h\n      }), t(\"move\", e);\n    }\n\n    var i,\n        a,\n        c = [],\n        d = \"tox-crid-\" + tk++,\n        m = At.fromDom(t),\n        g = [{\n      name: \"move\",\n      xMul: 0,\n      yMul: 0,\n      deltaX: 1,\n      deltaY: 1,\n      deltaW: 0,\n      deltaH: 0,\n      label: \"Crop Mask\"\n    }, {\n      name: \"nw\",\n      xMul: 0,\n      yMul: 0,\n      deltaX: 1,\n      deltaY: 1,\n      deltaW: -1,\n      deltaH: -1,\n      label: \"Top Left Crop Handle\"\n    }, {\n      name: \"ne\",\n      xMul: 1,\n      yMul: 0,\n      deltaX: 0,\n      deltaY: 1,\n      deltaW: 1,\n      deltaH: -1,\n      label: \"Top Right Crop Handle\"\n    }, {\n      name: \"sw\",\n      xMul: 0,\n      yMul: 1,\n      deltaX: 1,\n      deltaY: 0,\n      deltaW: -1,\n      deltaH: 1,\n      label: \"Bottom Left Crop Handle\"\n    }, {\n      name: \"se\",\n      xMul: 1,\n      yMul: 1,\n      deltaX: 0,\n      deltaY: 0,\n      deltaW: 1,\n      deltaH: 1,\n      label: \"Bottom Right Crop Handle\"\n    }],\n        p = [\"top\", \"right\", \"bottom\", \"left\"],\n        h = function h(t) {\n      var n;\n      o((n = l, {\n        x: t.x + n.x,\n        y: t.y + n.y,\n        w: t.w,\n        h: t.h\n      }));\n    };\n\n    function v(t) {\n      on(t.target, \"aria-grabbed\", \"focus\" === t.raw.type ? \"true\" : \"false\");\n    }\n\n    rn(a = At.fromTag(\"div\"), {\n      id: d,\n      \"class\": \"tox-croprect-container\",\n      role: \"grid\",\n      \"aria-dropeffect\": \"execute\"\n    }), Te(m, a), St(p, function (e) {\n      Iu(m, \"#\" + d).each(function (t) {\n        var n = At.fromTag(\"div\");\n        rn(n, {\n          id: d + \"-\" + e,\n          \"class\": \"tox-croprect-block\",\n          \"data-mce-bogus\": \"all\"\n        }), dn(n, \"display\", \"none\"), Te(t, n);\n      });\n    }), St(g, function (e) {\n      Iu(m, \"#\" + d).each(function (t) {\n        var n = At.fromTag(\"div\");\n        rn(n, {\n          id: d + \"-\" + e.name,\n          \"aria-label\": e.label,\n          \"aria-grabbed\": \"false\",\n          \"data-mce-bogus\": \"all\",\n          role: \"gridcell\",\n          tabindex: \"-1\",\n          title: e.label\n        }), Jr(n, [\"tox-croprect-handle\", \"tox-croprect-handle-\" + e.name]), dn(n, \"display\", \"none\"), Te(t, n);\n      });\n    }), i = M(g, function (n) {\n      var e;\n      return $S(d, {\n        document: t.ownerDocument,\n        root: ge(m).dom,\n        handle: d + \"-\" + n.name,\n        start: function start() {\n          e = s;\n        },\n        drag: function drag(t) {\n          u(n, e, t.deltaX, t.deltaY);\n        }\n      });\n    }), r(s), c.push(pc(m, \"focusin\", v), pc(m, \"focusout\", v), pc(m, \"keydown\", function (n) {\n      var i;\n\n      function t(t, n, e, o, r) {\n        t.stopPropagation(), t.preventDefault(), u(i, e, o, r);\n      }\n\n      switch (St(g, function (t) {\n        if (un(n.target, \"id\") === d + \"-\" + t.name) return i = t, !1;\n      }), n.raw.keyCode) {\n        case JS.LEFT:\n          t(n, 0, s, -10, 0);\n          break;\n\n        case JS.RIGHT:\n          t(n, 0, s, 10, 0);\n          break;\n\n        case JS.UP:\n          t(n, 0, s, 0, -10);\n          break;\n\n        case JS.DOWN:\n          t(n, 0, s, 0, 10);\n          break;\n\n        case JS.ENTER:\n        case JS.SPACEBAR:\n          n.prevent(), e();\n      }\n    }));\n\n    var b = _lt(_lt({}, KS), {\n      toggleVisibility: function toggleVisibility(t) {\n        var n = H(H([], M(g, function (t) {\n          return \"#\" + d + \"-\" + t.name;\n        }), !0), M(p, function (t) {\n          return \"#\" + d + \"-\" + t;\n        }), !0).join(\",\"),\n            e = vs(m, n);\n        St(e, t ? function (t) {\n          return bn(t, \"display\");\n        } : function (t) {\n          return dn(t, \"display\", \"none\");\n        });\n      },\n      setClampRect: function setClampRect(t) {\n        l = t, r(s);\n      },\n      setRect: o,\n      getInnerRect: function getInnerRect() {\n        return f(l, s);\n      },\n      setInnerRect: h,\n      setViewPortRect: function setViewPortRect(t) {\n        n = t, r(s);\n      },\n      destroy: function destroy() {\n        St(i, function (t) {\n          return t.destroy();\n        }), i = [], St(c, function (t) {\n          return t.unbind();\n        }), c = [];\n      }\n    });\n\n    return b;\n  };\n\n  function ek(t) {\n    var e,\n        o,\n        n,\n        r,\n        i = Po(t),\n        u = gc(),\n        a = (o = -1, {\n      data: e = [],\n      add: function add(t) {\n        var n = e.splice(++o);\n        return e.push(t), {\n          state: t,\n          removed: n\n        };\n      },\n      undo: function undo() {\n        if (n()) return e[--o];\n      },\n      redo: function redo() {\n        if (r()) return e[++o];\n      },\n      canUndo: n = function n() {\n        return 0 < o;\n      },\n      canRedo: r = function r() {\n        return -1 !== o && o < e.length - 1;\n      }\n    });\n\n    function c(t) {\n      i.set(t);\n    }\n\n    function s(t) {\n      URL.revokeObjectURL(t.url);\n    }\n\n    function l(t) {\n      var n = f(t);\n      c(n);\n      var e = a.add(n).removed;\n      return fS.each(e, s), n.url;\n    }\n\n    a.add(t);\n\n    function f(t) {\n      return {\n        blob: t,\n        url: URL.createObjectURL(t)\n      };\n    }\n\n    function d() {\n      u.on(s), u.clear();\n    }\n\n    return {\n      getBlobState: function getBlobState() {\n        return i.get();\n      },\n      setBlobState: c,\n      addBlobState: l,\n      getTempState: function getTempState() {\n        return u.get().getOrThunk(i.get);\n      },\n      updateTempState: function updateTempState(t) {\n        var n = f(t);\n        return d(), u.set(n), n.url;\n      },\n      addTempState: function addTempState(t) {\n        var n = f(t);\n        return u.set(n), n.url;\n      },\n      applyTempState: function applyTempState(n) {\n        return u.get().fold(st, function (t) {\n          l(t.blob), n();\n        });\n      },\n      destroyTempState: d,\n      undo: function undo() {\n        var t = a.undo();\n        return c(t), t.url;\n      },\n      redo: function redo() {\n        var t = a.redo();\n        return c(t), t.url;\n      },\n      getHistoryStates: function getHistoryStates() {\n        return {\n          undoEnabled: a.canUndo(),\n          redoEnabled: a.canRedo()\n        };\n      }\n    };\n  }\n\n  function ok(t, n) {\n    function i(t) {\n      var n = y.getHistoryStates();\n      k.updateButtonUndoStates(t, n.undoEnabled, n.redoEnabled), br(t, YS.formActionEvent, {\n        name: YS.saveState(),\n        value: n.undoEnabled\n      });\n    }\n\n    function u(t) {\n      return t.toBlob();\n    }\n\n    function a(t) {\n      br(t, YS.formActionEvent, {\n        name: YS.disable(),\n        value: {}\n      });\n    }\n\n    function c(n, t, e, o, r) {\n      a(n), k0(t).then(e).then(u).then(o).then(function (t) {\n        return w(n, t);\n      }).then(function () {\n        i(n), r(), x(n);\n      })[\"catch\"](function (t) {\n        console.log(t), n.getSystem().isConnected() && x(n);\n      });\n    }\n\n    function r(t, n, e) {\n      c(t, y.getBlobState().blob, n, function (t) {\n        return y.updateTempState(t);\n      }, e);\n    }\n\n    function s(t) {\n      var n = y.getBlobState().url;\n      return y.destroyTempState(), i(t), n;\n    }\n\n    var e,\n        o,\n        l,\n        f,\n        d,\n        m,\n        g,\n        p,\n        h,\n        v,\n        b,\n        y = ek(t.currentState),\n        x = function x(t) {\n      C.getApplyButton(t).each(function (t) {\n        gd.enable(t);\n      }), br(t, YS.formActionEvent, {\n        name: YS.enable(),\n        value: {}\n      });\n    },\n        w = function w(t, n) {\n      return a(t), S.updateSrc(t, n);\n    },\n        S = (f = t.currentState.url, m = zm({\n      dom: {\n        tag: \"div\",\n        classes: [\"tox-image-tools__image-bg\"],\n        attributes: {\n          role: \"presentation\"\n        }\n      }\n    }), g = Po(1), d = dc(), p = _lt(_lt({}, d), {\n      run: function run(t) {\n        return d.get().each(t);\n      }\n    }), h = Po({\n      x: 0,\n      y: 0,\n      w: 1,\n      h: 1\n    }), v = Po({\n      x: 0,\n      y: 0,\n      w: 1,\n      h: 1\n    }), {\n      memContainer: b = zm(ly.sketch({\n        dom: {\n          tag: \"div\",\n          classes: [\"tox-image-tools__image\"]\n        },\n        components: [m.asSpec(), {\n          dom: {\n            tag: \"img\",\n            attributes: {\n              src: f\n            }\n          }\n        }, {\n          dom: {\n            tag: \"div\"\n          },\n          behaviours: nc([mm(\"image-panel-crop-events\", [ou(function (t) {\n            b.getOpt(t).each(function (t) {\n              var n = t.element.dom,\n                  e = nk({\n                x: 10,\n                y: 10,\n                w: 100,\n                h: 100\n              }, {\n                x: 0,\n                y: 0,\n                w: 200,\n                h: 200\n              }, {\n                x: 0,\n                y: 0,\n                w: 200,\n                h: 200\n              }, n, st);\n              e.toggleVisibility(!1), e.on(\"updateRect\", function (t) {\n                var n = t.rect,\n                    e = g.get(),\n                    o = {\n                  x: Math.round(n.x / e),\n                  y: Math.round(n.y / e),\n                  w: Math.round(n.w / e),\n                  h: Math.round(n.h / e)\n                };\n                h.set(o);\n              }), p.set(e);\n            });\n          }), ru(function () {\n            p.clear();\n          })])])\n        }],\n        containerBehaviours: nc([Rg.config({}), mm(\"image-panel-events\", [ou(function (t) {\n          _(t, f);\n        })])])\n      })),\n      updateSrc: _,\n      zoom: function zoom(t, n) {\n        var e = g.get(),\n            o = 0 < n ? Math.min(2, e + .1) : Math.max(.1, e - .1);\n        g.set(o), b.getOpt(t).each(function (t) {\n          var n = t.components()[1].element;\n          O(t, n);\n        });\n      },\n      showCrop: function showCrop() {\n        p.run(function (t) {\n          t.toggleVisibility(!0);\n        });\n      },\n      hideCrop: function hideCrop() {\n        p.run(function (t) {\n          t.toggleVisibility(!1);\n        });\n      },\n      getRect: function getRect() {\n        return h.get();\n      },\n      getMeasurements: function getMeasurements() {\n        var t = v.get();\n        return {\n          width: t.w,\n          height: t.h\n        };\n      }\n    }),\n        k = (o = zm(QS(\"Undo\", \"undo\", !0, function (t) {\n      br(t, US.undo(), {\n        direction: 1\n      });\n    }, e = n)), l = zm(QS(\"Redo\", \"redo\", !0, function (t) {\n      br(t, US.redo(), {\n        direction: 1\n      });\n    }, e)), {\n      container: ly.sketch({\n        dom: {\n          tag: \"div\",\n          classes: [\"tox-image-tools__toolbar\", \"tox-image-tools__sidebar\"]\n        },\n        components: [o.asSpec(), l.asSpec(), QS(\"Zoom in\", \"zoom-in\", !1, function (t) {\n          br(t, US.zoom(), {\n            direction: 1\n          });\n        }, e), QS(\"Zoom out\", \"zoom-out\", !1, function (t) {\n          br(t, US.zoom(), {\n            direction: -1\n          });\n        }, e)]\n      }),\n      updateButtonUndoStates: function updateButtonUndoStates(t, n, e) {\n        o.getOpt(t).each(function (t) {\n          ZS(t, n);\n        }), l.getOpt(t).each(function (t) {\n          ZS(t, e);\n        });\n      }\n    }),\n        C = rw(S, n);\n\n    function O(t, s) {\n      b.getOpt(t).each(function (t) {\n        var e = g.get(),\n            o = On(t.element),\n            r = wn(t.element),\n            i = s.dom.naturalWidth * e,\n            u = s.dom.naturalHeight * e,\n            a = Math.max(0, o / 2 - i / 2),\n            c = Math.max(0, r / 2 - u / 2),\n            n = {\n          left: a.toString() + \"px\",\n          top: c.toString() + \"px\",\n          width: i.toString() + \"px\",\n          height: u.toString() + \"px\",\n          position: \"absolute\"\n        };\n        mn(s, n), m.getOpt(t).each(function (t) {\n          mn(t.element, n);\n        }), p.run(function (t) {\n          var n = h.get();\n          t.setRect({\n            x: n.x * e + a,\n            y: n.y * e + c,\n            w: n.w * e,\n            h: n.h * e\n          }), t.setClampRect({\n            x: a,\n            y: c,\n            w: i,\n            h: u\n          }), t.setViewPortRect({\n            x: 0,\n            y: 0,\n            w: o,\n            h: r\n          });\n        });\n      });\n    }\n\n    function _(t, n) {\n      var e,\n          i = At.fromTag(\"img\");\n      return on(i, \"src\", n), e = i.dom, new Ap(function (t) {\n        var n = function n() {\n          e.removeEventListener(\"load\", n), t(e);\n        };\n\n        e.complete ? t(e) : e.addEventListener(\"load\", n);\n      }).then(function () {\n        t.getSystem().isConnected() && b.getOpt(t).map(function (t) {\n          var n = Ou({\n            element: i\n          });\n          Rg.replaceAt(t, 1, vt.some(n));\n          var e = v.get(),\n              o = {\n            x: 0,\n            y: 0,\n            w: i.dom.naturalWidth,\n            h: i.dom.naturalHeight\n          };\n          v.set(o);\n          var u,\n              r = qS.inflate(o, -20, -20);\n          h.set(r), e.w === o.w && e.h === o.h || (u = i, b.getOpt(t).each(function (t) {\n            var n = On(t.element),\n                e = wn(t.element),\n                o = u.dom.naturalWidth,\n                r = u.dom.naturalHeight,\n                i = Math.min(n / o, e / r);\n            1 <= i ? g.set(1) : g.set(i);\n          })), O(t, i);\n        });\n      });\n    }\n\n    return {\n      dom: {\n        tag: \"div\",\n        attributes: {\n          role: \"presentation\"\n        }\n      },\n      components: [C.memContainer.asSpec(), S.memContainer.asSpec(), k.container],\n      behaviours: nc([Df.config({\n        store: {\n          mode: \"manual\",\n          getValue: function getValue() {\n            return y.getBlobState();\n          }\n        }\n      }), mm(\"image-tools-events\", [Cr(US.undo(), function (n, t) {\n        var e = y.undo();\n        w(n, e).then(function (t) {\n          x(n), i(n);\n        });\n      }), Cr(US.redo(), function (n, t) {\n        var e = y.redo();\n        w(n, e).then(function (t) {\n          x(n), i(n);\n        });\n      }), Cr(US.zoom(), function (t, n) {\n        var e = n.event.direction;\n        S.zoom(t, e);\n      }), Cr(US.back(), function (t, n) {\n        var e,\n            o = s(e = t);\n        w(e, o).then(function (t) {\n          x(e);\n        }), (0, n.event.swap)(), S.hideCrop();\n      }), Cr(US.apply(), function (t, n) {\n        y.applyTempState(function () {\n          s(t), (0, n.event.swap)();\n        });\n      }), Cr(US.transform(), function (t, n) {\n        return r(t, n.event.transform, st);\n      }), Cr(US.tempTransform(), function (t, n) {\n        var e = n.event.transform;\n        c(t, y.getTempState().blob, e, function (t) {\n          return y.addTempState(t);\n        }, st);\n      }), Cr(US.transformApply(), function (t, n) {\n        var e = t,\n            o = n.event.transform,\n            r = n.event.swap,\n            i = y.getBlobState().blob;\n        c(e, i, o, function (t) {\n          var n = y.addBlobState(t);\n          return s(e), n;\n        }, r);\n      }), Cr(US.swap(), function (n, t) {\n        k.updateButtonUndoStates(n, !1, !1);\n        var e = t.event.transform,\n            o = t.event.swap;\n        e.fold(function () {\n          o();\n        }, function (t) {\n          r(n, t, o);\n        });\n      })]), aw()])\n    };\n  }\n\n  function rk(t) {\n    return !Tt(t, \"items\");\n  }\n\n  function ik(t, n) {\n    function e(t) {\n      return {\n        dom: {\n          tag: \"td\",\n          innerHtml: n.translate(t)\n        }\n      };\n    }\n\n    return {\n      dom: {\n        tag: \"table\",\n        classes: [\"tox-dialog__table\"]\n      },\n      components: [{\n        dom: {\n          tag: \"thead\"\n        },\n        components: [{\n          dom: {\n            tag: \"tr\"\n          },\n          components: M(t.header, function (t) {\n            return {\n              dom: {\n                tag: \"th\",\n                innerHtml: n.translate(t)\n              }\n            };\n          })\n        }]\n      }, {\n        dom: {\n          tag: \"tbody\"\n        },\n        components: M(t.cells, function (t) {\n          return {\n            dom: {\n              tag: \"tr\"\n            },\n            components: M(t, e)\n          };\n        })\n      }],\n      behaviours: nc([py.config({}), Hg.config({})])\n    };\n  }\n\n  function uk(e, n) {\n    var t = e.label.map(function (t) {\n      return oy(t, n);\n    }),\n        o = [gd.config({\n      disabled: function disabled() {\n        return e.disabled || n.isDisabled();\n      }\n    }), pv(), Fg.config({\n      mode: \"execution\",\n      useEnter: !0 !== e.multiline,\n      useControlEnter: !0 === e.multiline,\n      execute: function execute(t) {\n        return vr(t, ky), vt.some(!0);\n      }\n    }), mm(\"textfield-change\", [Cr(Si(), function (t, n) {\n      br(t, yy, {\n        name: e.name\n      });\n    }), Cr(Ai(), function (t, n) {\n      br(t, yy, {\n        name: e.name\n      });\n    })]), py.config({})],\n        r = e.validation.map(function (o) {\n      return Ky.config({\n        getRoot: function getRoot(t) {\n          return Yt(t.element);\n        },\n        invalidClass: \"tox-invalid\",\n        validator: {\n          validate: function validate(t) {\n            var n = Df.getValue(t),\n                e = o.validator(n);\n            return Gy(!0 === e ? Ve.value(n) : Ve.error(e));\n          },\n          validateOnLoad: o.validateOnLoad\n        }\n      });\n    }).toArray(),\n        i = e.placeholder.fold(rt({}), function (t) {\n      return {\n        placeholder: n.translate(t)\n      };\n    }),\n        u = e.inputMode.fold(rt({}), function (t) {\n      return {\n        inputmode: t\n      };\n    }),\n        a = _lt(_lt({}, i), u);\n\n    return ey(t, my.parts.field({\n      tag: !0 === e.multiline ? \"textarea\" : \"input\",\n      inputAttributes: a,\n      inputClasses: [e.classname],\n      inputBehaviours: nc(ft([o, r])),\n      selectOnFocus: !1,\n      factory: Dy\n    }), (e.flex ? [\"tox-form__group--stretched\"] : []).concat(e.maximized ? [\"tox-form-group--maximize\"] : []), [gd.config({\n      disabled: function disabled() {\n        return e.disabled || n.isDisabled();\n      },\n      onDisabled: function onDisabled(t) {\n        my.getField(t).each(gd.disable);\n      },\n      onEnabled: function onEnabled(t) {\n        my.getField(t).each(gd.enable);\n      }\n    }), pv()]);\n  }\n\n  function ak(t) {\n    var n = Po(null);\n    return wu({\n      readState: function readState() {\n        return {\n          timer: null !== n.get() ? \"set\" : \"unset\"\n        };\n      },\n      setTimer: function setTimer(t) {\n        n.set(t);\n      },\n      cancel: function cancel() {\n        var t = n.get();\n        null !== t && t.cancel();\n      }\n    });\n  }\n\n  function ck(t, n, e) {\n    var o = Df.getValue(e);\n    Df.setValue(n, o), s1(n);\n  }\n\n  function sk(t, n) {\n    var e = t.element,\n        o = Qr(e),\n        r = e.dom;\n    \"number\" !== un(e, \"type\") && n(r, o);\n  }\n\n  function lk(t) {\n    return {\n      type: \"menuitem\",\n      value: t.url,\n      text: t.title,\n      meta: {\n        attach: t.attach\n      },\n      onAction: st\n    };\n  }\n\n  function fk(t, n) {\n    return {\n      type: \"menuitem\",\n      value: n,\n      text: t,\n      meta: {\n        attach: void 0\n      },\n      onAction: st\n    };\n  }\n\n  function dk(t, n) {\n    return e = t, M(F(n, function (t) {\n      return t.type === e;\n    }), lk);\n    var e;\n  }\n\n  function mk(t, n) {\n    var e = t.toLowerCase();\n    return F(n, function (t) {\n      return ut((void 0 !== t.meta && void 0 !== t.meta.text ? t.meta : t).text.toLowerCase(), e) || ut(t.value.toLowerCase(), e);\n    });\n  }\n\n  function gk(u, a, c) {\n    function r(t) {\n      var n = Df.getValue(t);\n      c.addToHistory(n.value, u.filetype);\n    }\n\n    var t,\n        n,\n        e,\n        o,\n        i = a.shared.providers,\n        s = my.parts.field({\n      factory: m1,\n      dismissOnBlur: !0,\n      inputClasses: [\"tox-textfield\"],\n      sandboxClasses: [\"tox-dialog__popups\"],\n      inputAttributes: {\n        \"aria-errormessage\": v1,\n        type: \"url\"\n      },\n      minChars: 0,\n      responseTime: 0,\n      fetch: function fetch(t) {\n        var e,\n            o,\n            n,\n            r,\n            i = U0((e = u.filetype, o = c, n = Df.getValue(t), r = void 0 !== n.meta.text ? n.meta.text : n.value, o.getLinkInformation().fold(function () {\n          return [];\n        }, function (t) {\n          var n = mk(r, M(o.getHistory(e), function (t) {\n            return fk(t, t);\n          }));\n          return \"file\" === e ? R([n, mk(r, dk(\"header\", t.targets)), mk(r, ft([vt.from(t.anchorTop).map(function (t) {\n            return fk(\"<top>\", t);\n          }).toArray(), dk(\"anchor\", t.targets), vt.from(t.anchorBottom).map(function (t) {\n            return fk(\"<bottom>\", t);\n          }).toArray()]))], function (t, n) {\n            return 0 === t.length || 0 === n.length ? t.concat(n) : t.concat(h1, n);\n          }, []) : n;\n        })), Sh.BUBBLE_TO_SANDBOX, a, !1);\n        return Gy(i);\n      },\n      getHotspot: function getHotspot(t) {\n        return p.getOpt(t);\n      },\n      onSetValue: function onSetValue(t, n) {\n        t.hasConfigured(Ky) && Ky.run(t).get(st);\n      },\n      typeaheadBehaviours: nc(ft([c.getValidationHandler().map(function (e) {\n        return Ky.config({\n          getRoot: function getRoot(t) {\n            return Yt(t.element);\n          },\n          invalidClass: \"tox-control-wrap--status-invalid\",\n          notify: {\n            onInvalid: function onInvalid(t, n) {\n              f.getOpt(t).each(function (t) {\n                on(t.element, \"title\", i.translate(n));\n              });\n            }\n          },\n          validator: {\n            validate: function validate(t) {\n              var n = Df.getValue(t);\n              return p1(function (o) {\n                e({\n                  type: u.filetype,\n                  url: n.value\n                }, function (t) {\n                  var n, e;\n                  \"invalid\" === t.status ? (n = Ve.error(t.message), o(n)) : (e = Ve.value(t.message), o(e));\n                });\n              });\n            },\n            validateOnLoad: !1\n          }\n        });\n      }).toArray(), [gd.config({\n        disabled: function disabled() {\n          return u.disabled || i.isDisabled();\n        }\n      }), py.config({}), mm(\"urlinput-events\", ft([\"file\" === u.filetype ? [Cr(Si(), function (t) {\n        br(t, yy, {\n          name: u.name\n        });\n      })] : [], [Cr(ki(), function (t) {\n        br(t, yy, {\n          name: u.name\n        }), r(t);\n      }), Cr(Ai(), function (t) {\n        br(t, yy, {\n          name: u.name\n        }), r(t);\n      })]]))]])),\n      eventOrder: ((t = {})[Si()] = [\"streaming\", \"urlinput-events\", \"invalidating\"], t),\n      model: {\n        getDisplayText: function getDisplayText(t) {\n          return t.value;\n        },\n        selectsOver: !1,\n        populateFromBrowse: !1\n      },\n      markers: {\n        openClass: \"tox-textfield--popup-open\"\n      },\n      lazySink: a.shared.getSink,\n      parts: {\n        menu: Zp(0, 0, \"normal\")\n      },\n      onExecute: function onExecute(t, n, e) {\n        br(n, ky, {});\n      },\n      onItemExecute: function onItemExecute(t, n, e, o) {\n        r(t), br(t, yy, {\n          name: u.name\n        });\n      }\n    }),\n        l = u.label.map(function (t) {\n      return oy(t, i);\n    }),\n        f = zm((n = \"invalid\", e = vt.some(v1), Xm(\"warning\", {\n      tag: \"div\",\n      classes: [\"tox-icon\", \"tox-control-wrap__status-icon-\" + n],\n      attributes: _lt({\n        title: i.translate(o = void 0 === o ? n : o),\n        \"aria-live\": \"polite\"\n      }, e.fold(function () {\n        return {};\n      }, function (t) {\n        return {\n          id: t\n        };\n      }))\n    }, i.icons))),\n        d = zm({\n      dom: {\n        tag: \"div\",\n        classes: [\"tox-control-wrap__status-icon-wrap\"]\n      },\n      components: [f.asSpec()]\n    }),\n        m = c.getUrlPicker(u.filetype),\n        g = Ir(\"browser.url.event\"),\n        p = zm({\n      dom: {\n        tag: \"div\",\n        classes: [\"tox-control-wrap\"]\n      },\n      components: [s, d.asSpec()],\n      behaviours: nc([gd.config({\n        disabled: function disabled() {\n          return u.disabled || i.isDisabled();\n        }\n      })])\n    }),\n        h = zm(J0({\n      name: u.name,\n      icon: vt.some(\"browse\"),\n      text: u.label.getOr(\"\"),\n      disabled: u.disabled,\n      primary: !1,\n      borderless: !0\n    }, function (t) {\n      return vr(t, g);\n    }, i, [], [\"tox-browse-url\"]));\n    return my.sketch({\n      dom: by([]),\n      components: l.toArray().concat([{\n        dom: {\n          tag: \"div\",\n          classes: [\"tox-form__controls-h-stack\"]\n        },\n        components: ft([[p.asSpec()], m.map(function () {\n          return h.asSpec();\n        }).toArray()])\n      }]),\n      fieldBehaviours: nc([gd.config({\n        disabled: function disabled() {\n          return u.disabled || i.isDisabled();\n        },\n        onDisabled: function onDisabled(t) {\n          my.getField(t).each(gd.disable), h.getOpt(t).each(gd.disable);\n        },\n        onEnabled: function onEnabled(t) {\n          my.getField(t).each(gd.enable), h.getOpt(t).each(gd.enable);\n        }\n      }), pv(), mm(\"url-input-events\", [Cr(g, function (o) {\n        cd.getCurrent(o).each(function (n) {\n          var t = Df.getValue(n),\n              e = _lt({\n            fieldname: u.name\n          }, t);\n\n          m.each(function (t) {\n            t(e).get(function (t) {\n              Df.setValue(n, t), br(o, yy, {\n                name: u.name\n              });\n            });\n          });\n        });\n      })])])\n    });\n  }\n\n  function pk(r) {\n    return function (n, e, o) {\n      return tt(e, \"name\").fold(function () {\n        return r(e, o);\n      }, function (t) {\n        return n.field(t, r(e, o));\n      });\n    };\n  }\n\n  function hk(n, t, e) {\n    var o = Yo(e, {\n      shared: {\n        interpreter: function interpreter(t) {\n          return x1(n, t, o);\n        }\n      }\n    });\n    return x1(n, t, o);\n  }\n\n  function vk(t, n, e) {\n    function o() {\n      return At.fromDom(t.getContentAreaContainer());\n    }\n\n    function r() {\n      return p || !e();\n    }\n\n    var i,\n        u,\n        a,\n        c,\n        s,\n        l,\n        f,\n        d,\n        m,\n        g,\n        p = sv(t);\n    return {\n      inlineDialog: (f = o, d = n, m = r, g = {\n        maxHeightFunction: Vc()\n      }, function () {\n        return m() ? {\n          type: \"node\",\n          root: tn(f()),\n          node: vt.from(f()),\n          bubble: Sc(12, 12, w1),\n          layouts: {\n            onRtl: function onRtl() {\n              return [Am];\n            },\n            onLtr: function onLtr() {\n              return [Mm];\n            }\n          },\n          overrides: g\n        } : {\n          type: \"hotspot\",\n          hotspot: d(),\n          bubble: Sc(-12, 12, w1),\n          layouts: {\n            onRtl: function onRtl() {\n              return [Xa];\n            },\n            onLtr: function onLtr() {\n              return [Ya];\n            }\n          },\n          overrides: g\n        };\n      }),\n      banner: (c = o, s = n, l = r, function () {\n        return l() ? {\n          type: \"node\",\n          root: tn(c()),\n          node: vt.from(c()),\n          layouts: {\n            onRtl: function onRtl() {\n              return [cp];\n            },\n            onLtr: function onLtr() {\n              return [cp];\n            }\n          }\n        } : {\n          type: \"hotspot\",\n          hotspot: s(),\n          layouts: {\n            onRtl: function onRtl() {\n              return [$a];\n            },\n            onLtr: function onLtr() {\n              return [$a];\n            }\n          }\n        };\n      }),\n      cursor: (u = t, function () {\n        return {\n          type: \"selection\",\n          root: a(),\n          getSelection: function getSelection() {\n            var t = u.selection.getRng();\n            return vt.some(ms.range(At.fromDom(t.startContainer), t.startOffset, At.fromDom(t.endContainer), t.endOffset));\n          }\n        };\n      }),\n      node: (i = a = function a() {\n        return At.fromDom(t.getBody());\n      }, function (t) {\n        return {\n          type: \"node\",\n          root: i(),\n          node: t\n        };\n      })\n    };\n  }\n\n  function bk(i) {\n    return vt.from(i.getParam(\"style_formats\")).filter(c).map(function (t) {\n      var n,\n          e,\n          o = (n = i, e = k1(t), n.formatter ? r(e.customFormats) : n.on(\"init\", function () {\n        r(e.customFormats);\n      }), e.formats);\n\n      function r(t) {\n        St(t, function (t) {\n          n.formatter.has(t.name) || n.formatter.register(t.name, t.format);\n        });\n      }\n\n      return i.getParam(\"style_formats_merge\", !1, \"boolean\") ? S1.concat(o) : o;\n    }).getOr(S1);\n  }\n\n  function yk(t, n, e) {\n    var o = {\n      type: \"formatter\",\n      isSelected: n(t.format),\n      getStylePreview: e(t.format)\n    };\n    return Yo(t, o);\n  }\n\n  function xk(c, t, s, l) {\n    var f = function f(t) {\n      return M(t, function (t) {\n        var n,\n            e,\n            o,\n            r,\n            i,\n            u = Ct(t);\n\n        if (nt(t, \"items\")) {\n          var a = f(t.items);\n          return Yo(Yo(t, {\n            type: \"submenu\"\n          }), {\n            getStyleItems: rt(a)\n          });\n        }\n\n        return nt(t, \"format\") ? yk(t, s, l) : 1 === u.length && wt(u, \"title\") ? Yo(t, {\n          type: \"separator\"\n        }) : (r = {\n          type: \"formatter\",\n          format: o = \"custom-\" + (e = y((n = t).name) ? n.name : Ir(n.title)),\n          isSelected: s(o),\n          getStylePreview: l(o)\n        }, i = Yo(n, r), c.formatter.register(e, i), i);\n      });\n    };\n\n    return f(t);\n  }\n\n  function wk(e) {\n    return function (t) {\n      if (k(n = t) && 1 === n.nodeType) {\n        if (t.contentEditable === e) return !0;\n        if (t.getAttribute(\"data-mce-contenteditable\") === e) return !0;\n      }\n\n      var n;\n      return !1;\n    };\n  }\n\n  function Sk(t, n, e, o, r) {\n    return {\n      type: t,\n      title: n,\n      url: e,\n      level: o,\n      attach: r\n    };\n  }\n\n  function kk(t) {\n    return t.innerText || t.textContent;\n  }\n\n  function Ck(t) {\n    return t && \"A\" === t.nodeName && void 0 !== (t.id || t.name) && JC(t);\n  }\n\n  function Ok(t) {\n    return t && /^(H[1-6])$/.test(t.nodeName);\n  }\n\n  function _k(t) {\n    return Ok(t) && JC(t);\n  }\n\n  function Tk(t) {\n    var n,\n        e = t.id || Ir(\"h\");\n    return Sk(\"header\", kk(t), \"#\" + e, Ok(n = t) ? parseInt(n.nodeName.substr(1), 10) : 0, function () {\n      t.id = e;\n    });\n  }\n\n  function Ek(t) {\n    var n = t.id || t.name;\n    return Sk(\"anchor\", kk(t) || \"#\" + n, \"#\" + n, 0, st);\n  }\n\n  function Dk(t) {\n    return 0 < C1(t.title).length;\n  }\n\n  function Bk(t) {\n    return y(t) && /^https?/.test(t);\n  }\n\n  function Mk(t) {\n    return x(t) && Q(t, function (t) {\n      return !(c(n = t) && n.length <= 5 && N(n, Bk));\n      var n;\n    }).isNone();\n  }\n\n  function Ak() {\n    var t,\n        n = db.getItem(E1);\n    if (null === n) return {};\n\n    try {\n      t = JSON.parse(n);\n    } catch (t) {\n      if (t instanceof SyntaxError) return console.log(\"Local storage \" + E1 + \" was not valid JSON\", t), {};\n      throw t;\n    }\n\n    return Mk(t) ? t : (console.log(\"Local storage \" + E1 + \" was not valid format\", t), {});\n  }\n\n  function Fk(t) {\n    return tt(Ak(), t).getOr([]);\n  }\n\n  function Ik(n, t) {\n    var e, o;\n    Bk(n) && (o = F(tt(e = Ak(), t).getOr([]), function (t) {\n      return t !== n;\n    }), e[t] = [n].concat(o).slice(0, 5), function (t) {\n      if (!Mk(t)) throw new Error(\"Bad format for history:\\n\" + JSON.stringify(t));\n      db.setItem(E1, JSON.stringify(t));\n    }(e));\n  }\n\n  function Rk(t) {\n    return !!t;\n  }\n\n  function Vk(t) {\n    return dt(fS.makeMap(t, /[, ]/), Rk);\n  }\n\n  function Pk(t) {\n    return vt.from(t.getParam(\"file_picker_callback\")).filter(S);\n  }\n\n  function Hk(t) {\n    return vt.from(t).filter(y).getOrUndefined();\n  }\n\n  function zk(l) {\n    return {\n      getHistory: Fk,\n      addToHistory: Ik,\n      getLinkInformation: function getLinkInformation() {\n        return !1 === (t = l).getParam(\"typeahead_urls\") ? vt.none() : vt.some({\n          targets: T1(t.getBody()),\n          anchorTop: Hk(t.getParam(\"anchor_top\", \"#top\")),\n          anchorBottom: Hk(t.getParam(\"anchor_bottom\", \"#bottom\"))\n        });\n        var t;\n      },\n      getValidationHandler: function getValidationHandler() {\n        return vt.from(void 0 === (n = (t = l).getParam(\"file_picker_validator_handler\", void 0, \"function\")) ? t.getParam(\"filepicker_validator_handler\", void 0, \"function\") : n);\n        var t, n;\n      },\n      getUrlPicker: function getUrlPicker(t) {\n        return n = c = l, e = s = t, r = vt.some((o = n).getParam(\"file_picker_types\")).filter(Rk), i = vt.some(o.getParam(\"file_browser_callback_types\")).filter(Rk), u = r.or(i).map(Vk), a = Pk(o).fold(T, function (t) {\n          return u.fold(D, function (t) {\n            return 0 < Ct(t).length && t;\n          });\n        }), (w(a) ? a ? Pk(n) : vt.none() : a[e] ? Pk(n) : vt.none()).map(function (o) {\n          return function (n) {\n            return jy(function (e) {\n              var t = _lt({\n                filetype: s,\n                fieldname: n.fieldname\n              }, vt.from(n.meta).getOr({}));\n\n              o.call(c, function (t, n) {\n                if (!y(t)) throw new Error(\"Expected value to be string\");\n                if (void 0 !== n && !x(n)) throw new Error(\"Expected meta to be a object\");\n                e({\n                  value: t,\n                  meta: n\n                });\n              }, n.value, t);\n            });\n          };\n        });\n        var n, e, o, r, i, u, a, c, s;\n      }\n    };\n  }\n\n  function Nk(t, n, e) {\n    var o,\n        r,\n        i,\n        u,\n        a,\n        c,\n        s,\n        _l2,\n        f,\n        d,\n        m,\n        g,\n        p,\n        h = Po(!1),\n        v = {\n      isPositionedAtTop: function isPositionedAtTop() {\n        return \"top\" === o.get();\n      },\n      getDockingMode: (o = Po(av(n) ? \"bottom\" : \"top\")).get,\n      setDockingMode: o.set\n    },\n        b = {\n      shared: {\n        providers: {\n          icons: function icons() {\n            return n.ui.registry.getAll().icons;\n          },\n          menuItems: function menuItems() {\n            return n.ui.registry.getAll().menuItems;\n          },\n          translate: dp.translate,\n          isDisabled: function isDisabled() {\n            return n.mode.isReadOnly() || n.ui.isDisabled();\n          },\n          getSetting: n.getParam.bind(n)\n        },\n        interpreter: function interpreter(t) {\n          return x1(y1, t, b);\n        },\n        anchors: vk(n, e, v.isPositionedAtTop),\n        header: v,\n        getSink: function getSink() {\n          return Ve.value(t);\n        }\n      },\n      urlinput: zk(n),\n      styleselect: (f = Po([]), d = Po([]), m = Po([]), g = Po([]), p = Po(!(_l2 = function l(t) {\n        var n = t.items;\n        return void 0 !== n && 0 < n.length ? z(n, _l2) : [t.format];\n      })), (s = n).on(\"PreInit\", function (t) {\n        var n = bk(s),\n            e = xk(s, n, y, x);\n        f.set(e), d.set(z(e, _l2));\n      }), s.on(\"addStyleModifications\", function (t) {\n        var n = xk(s, t.items, y, x);\n        m.set(n), p.set(t.replace), g.set(z(n, _l2));\n      }), {\n        getData: function getData() {\n          var t = p.get() ? [] : f.get(),\n              n = m.get();\n          return t.concat(n);\n        },\n        getFlattenedKeys: function getFlattenedKeys() {\n          var t = p.get() ? [] : d.get(),\n              n = g.get();\n          return t.concat(n);\n        }\n      }),\n      colorinput: {\n        colorPicker: function colorPicker(t, n) {\n          Ib(c)(t, n);\n        },\n        hasCustomColors: function hasCustomColors() {\n          return gb(a);\n        },\n        getColors: function getColors() {\n          return pb(u);\n        },\n        getColorCols: (i = u = a = c = n, function () {\n          return vb(i);\n        })\n      },\n      dialog: {\n        isDraggableModal: (r = n, function () {\n          return r.getParam(\"draggable_modal\", !1, \"boolean\");\n        })\n      },\n      isContextMenuOpen: function isContextMenuOpen() {\n        return h.get();\n      },\n      setContextMenuState: function setContextMenuState(t) {\n        return h.set(t);\n      }\n    };\n\n    function y(t) {\n      return function () {\n        return s.formatter.match(t);\n      };\n    }\n\n    function x(n) {\n      return function () {\n        var t = s.formatter.get(n);\n        return void 0 !== t ? vt.some({\n          tag: 0 < t.length && (t[0].inline || t[0].block) || \"div\",\n          styles: s.dom.parseStyle(s.formatter.getCssText(n))\n        }) : vt.none();\n      };\n    }\n\n    return b;\n  }\n\n  function Lk(t) {\n    return (mt(hn(t, \"position\"), \"fixed\") ? vt.none() : qt(t)).orThunk(function () {\n      var e = At.fromTag(\"span\");\n      return Yt(t).bind(function (t) {\n        Te(t, e);\n        var n = qt(e);\n        return Ee(e), n;\n      });\n    });\n  }\n\n  function Wk(t) {\n    return Lk(t).map(Cn).getOrThunk(function () {\n      return ke(0, 0);\n    });\n  }\n\n  function Uk(t, n) {\n    var e = t.element;\n    Yr(e, n.transitionClass), qr(e, n.fadeOutClass), Yr(e, n.fadeInClass), n.onShow(t);\n  }\n\n  function jk(t, n) {\n    var e = t.element;\n    Yr(e, n.transitionClass), qr(e, n.fadeInClass), Yr(e, n.fadeOutClass), n.onHide(t);\n  }\n\n  function Gk(t, n, e) {\n    return N(t, function (t) {\n      switch (t) {\n        case \"bottom\":\n          return n.bottom <= e.bottom;\n\n        case \"top\":\n          return n.y >= e.y;\n      }\n    });\n  }\n\n  function Xk(n, t) {\n    return t.getInitialPos().map(function (t) {\n      return Me(t.bounds.x, t.bounds.y, On(n), wn(n));\n    });\n  }\n\n  function Yk(e, o, r) {\n    return r.getInitialPos().bind(function (t) {\n      switch (r.clearInitialPos(), t.position) {\n        case \"static\":\n          return vt.some(z1[\"static\"]());\n\n        case \"absolute\":\n          var n = Lk(e).map(Ae).getOrThunk(function () {\n            return Ae(be());\n          });\n          return vt.some(z1.absolute(Ea(\"absolute\", tt(t.style, \"left\").map(function (t) {\n            return o.x - n.x;\n          }), tt(t.style, \"top\").map(function (t) {\n            return o.y - n.y;\n          }), tt(t.style, \"right\").map(function (t) {\n            return n.right - o.right;\n          }), tt(t.style, \"bottom\").map(function (t) {\n            return n.bottom - o.bottom;\n          }))));\n\n        default:\n          return vt.none();\n      }\n    });\n  }\n\n  function qk(t, n, e) {\n    var o,\n        r,\n        i,\n        u = t.element;\n    return mt(hn(u, \"position\"), \"fixed\") ? (r = n, Xk(o = u, i = e).filter(function (t) {\n      return Gk(i.getModes(), t, r);\n    }).bind(function (t) {\n      return Yk(o, t, i);\n    })) : function (t, n, e) {\n      var r,\n          o,\n          i = Ae(t);\n      if (Gk(e.getModes(), i, n)) return vt.none();\n      r = t, o = i, e.setInitialPos({\n        style: function () {\n          var t = {},\n              n = r.dom;\n          if (ct(n)) for (var e = 0; e < n.style.length; e++) {\n            var o = n.style.item(e);\n            t[o] = n.style[o];\n          }\n          return t;\n        }(),\n        position: pn(r, \"position\") || \"static\",\n        bounds: o\n      });\n      var u = Fe(),\n          a = i.x - u.x,\n          c = n.y - u.y,\n          s = u.bottom - n.bottom,\n          l = i.y <= n.y;\n      return vt.some(z1.fixed(Ea(\"fixed\", vt.some(a), l ? vt.some(c) : vt.none(), vt.none(), l ? vt.none() : vt.some(s))));\n    }(u, n, e);\n  }\n\n  function Kk(n, t, e) {\n    e.setDocked(!1), St([\"left\", \"right\", \"top\", \"bottom\", \"position\"], function (t) {\n      return bn(n.element, t);\n    }), t.onUndocked(n);\n  }\n\n  function Jk(t, n, e, o) {\n    var r = \"fixed\" === o.position;\n    e.setDocked(r), Da(t.element, o), (r ? n.onDocked : n.onUndocked)(t);\n  }\n\n  function $k(o, t, r, i, u) {\n    void 0 === u && (u = !1), t.contextual.each(function (e) {\n      e.lazyContext(o).each(function (t) {\n        var n = t.y < i.bottom && t.bottom > i.y;\n        n !== r.isVisible() && (r.setVisible(n), u && !n ? (Jr(o.element, [e.fadeOutClass]), e.onHide(o)) : (n ? Uk : jk)(o, e));\n      });\n    });\n  }\n\n  function Qk(t, n, e) {\n    var o, r, i, u, a, c;\n    e.isDocked() && (r = n, i = e, c = (o = t).element, i.setDocked(!1), Xk(a = o.element, u = i).bind(function (t) {\n      return Yk(a, t, u);\n    }).each(function (t) {\n      t.fold(function () {\n        return Kk(o, r, i);\n      }, function (t) {\n        return Jk(o, r, i, t);\n      }, st);\n    }), i.setVisible(!0), r.contextual.each(function (t) {\n      $r(c, [t.fadeInClass, t.fadeOutClass, t.transitionClass]), t.onShow(o);\n    }), N1(o, r, i));\n  }\n\n  function Zk(t, n) {\n    return wt(U1.getModes(t), n);\n  }\n\n  function tC(r) {\n    var i = r.element;\n    Yt(i).each(function (t) {\n      var n,\n          e,\n          o = \"padding-\" + U1.getModes(r)[0];\n      U1.isDocked(r) ? (n = On(t), dn(i, \"width\", n + \"px\"), dn(t, o, Sn(e = i) + (parseInt(pn(e, \"margin-top\"), 10) || 0) + (parseInt(pn(e, \"margin-bottom\"), 10) || 0) + \"px\")) : (bn(i, \"width\"), bn(t, o));\n    });\n  }\n\n  function nC(t, n) {\n    n ? (qr(t, G1.fadeOutClass), Jr(t, [G1.transitionClass, G1.fadeInClass])) : (qr(t, G1.fadeInClass), Jr(t, [G1.fadeOutClass, G1.transitionClass]));\n  }\n\n  function eC(t, n) {\n    var e = At.fromDom(t.getContainer());\n    n ? (Yr(e, X1), qr(e, Y1)) : (Yr(e, Y1), qr(e, X1));\n  }\n\n  function oC(u, t) {\n    function o(n) {\n      r().each(function (t) {\n        return n(t.element);\n      });\n    }\n\n    function n(t) {\n      u.inline || tC(t), eC(u, U1.isDocked(t)), t.getSystem().broadcastOn([xf()], {}), r().each(function (t) {\n        return t.getSystem().broadcastOn([xf()], {});\n      });\n    }\n\n    var e,\n        i = gc(),\n        r = t.getSink,\n        a = u.inline ? [] : [ic.config({\n      channels: ((e = {})[j1()] = {\n        onReceive: tC\n      }, e)\n    })];\n    return H([Hg.config({}), U1.config({\n      contextual: _lt({\n        lazyContext: function lazyContext(t) {\n          var n = Sn(t.element),\n              e = u.inline ? u.getContentAreaContainer() : u.getContainer(),\n              o = Ae(At.fromDom(e)),\n              r = o.height - n,\n              i = o.y + (Zk(t, \"top\") ? 0 : n);\n          return vt.some(Me(o.x, i, o.width, r));\n        },\n        onShow: function onShow() {\n          o(function (t) {\n            return nC(t, !0);\n          });\n        },\n        onShown: function onShown(r) {\n          o(function (t) {\n            return $r(t, [G1.transitionClass, G1.fadeInClass]);\n          }), i.get().each(function (t) {\n            var n,\n                e = r.element,\n                o = Ut(n = t);\n            Oa(o).filter(function (t) {\n              return !Lt(n, t);\n            }).filter(function (t) {\n              return Lt(t, At.fromDom(o.dom.body)) || Wt(e, t);\n            }).each(function () {\n              return ka(n);\n            }), i.clear();\n          });\n        },\n        onHide: function onHide(t) {\n          var n = t.element,\n              e = r;\n          _a(n).orThunk(function () {\n            return e().toOptional().bind(function (t) {\n              return _a(t.element);\n            });\n          }).fold(i.clear, i.set), o(function (t) {\n            return nC(t, !1);\n          });\n        },\n        onHidden: function onHidden() {\n          o(function (t) {\n            return $r(t, [G1.transitionClass]);\n          });\n        }\n      }, G1),\n      lazyViewport: function lazyViewport(t) {\n        var n = Fe(),\n            e = u.getParam(\"toolbar_sticky_offset\", 0, \"number\"),\n            o = n.y + (Zk(t, \"top\") ? e : 0),\n            r = n.height - (Zk(t, \"bottom\") ? e : 0);\n        return Me(n.x, o, n.width, r);\n      },\n      modes: [t.header.getDockingMode()],\n      onDocked: n,\n      onUndocked: n\n    })], a, !0);\n  }\n\n  function rC(t) {\n    return ao(\"menubutton\", $1, t);\n  }\n\n  function iC(n, t) {\n    return t.getAnimationRoot.fold(function () {\n      return n.element;\n    }, function (t) {\n      return t(n);\n    });\n  }\n\n  function uC(t) {\n    return t.dimension.property;\n  }\n\n  function aC(t, n) {\n    return t.dimension.getDimension(n);\n  }\n\n  function cC(t, n) {\n    $r(iC(t, n), [n.shrinkingClass, n.growingClass]);\n  }\n\n  function sC(t, n) {\n    qr(t.element, n.openClass), Yr(t.element, n.closedClass), dn(t.element, uC(n), \"0px\"), yn(t.element);\n  }\n\n  function lC(t, n) {\n    qr(t.element, n.closedClass), Yr(t.element, n.openClass), bn(t.element, uC(n));\n  }\n\n  function fC(t, n, e, o) {\n    e.setCollapsed(), dn(t.element, uC(n), aC(n, t.element)), yn(t.element), cC(t, n), sC(t, n), n.onStartShrink(t), n.onShrunk(t);\n  }\n\n  function dC(t, n, e) {\n    var o = aC(n, t.element);\n    (\"0px\" === o ? fC : function (t, n, e, o) {\n      var r = o.getOrThunk(function () {\n        return aC(n, t.element);\n      });\n      e.setCollapsed(), dn(t.element, uC(n), r), yn(t.element);\n      var i = iC(t, n);\n      qr(i, n.growingClass), Yr(i, n.shrinkingClass), sC(t, n), n.onStartShrink(t);\n    })(t, n, e, vt.some(o));\n  }\n\n  function mC(t, n, e) {\n    var o = iC(t, n),\n        r = Kr(o, n.shrinkingClass),\n        i = aC(n, t.element);\n    lC(t, n);\n    var u = aC(n, t.element);\n    (r ? function () {\n      dn(t.element, uC(n), i), yn(t.element);\n    } : function () {\n      sC(t, n);\n    })(), qr(o, n.shrinkingClass), Yr(o, n.growingClass), lC(t, n), dn(t.element, uC(n), u), e.setExpanded(), n.onStartGrow(t);\n  }\n\n  function gC(t, n, e) {\n    return !0 === Kr(iC(t, n), n.growingClass);\n  }\n\n  function pC(t, n, e) {\n    return !0 === Kr(iC(t, n), n.shrinkingClass);\n  }\n\n  function hC(t) {\n    return \"<alloy.field.\" + t + \">\";\n  }\n\n  function vC(t) {\n    return {\n      element: function element() {\n        return t.element.dom;\n      }\n    };\n  }\n\n  function bC(t, e) {\n    cd.getCurrent(t).each(function (t) {\n      return Rg.set(t, [(n = e, uO.sketch(function (t) {\n        return {\n          dom: {\n            tag: \"div\",\n            classes: [\"tox-sidebar__pane-container\"]\n          },\n          components: (e = t, r = M(Ct(o = n), function (t) {\n            var n = o[t],\n                e = co(ao(\"sidebar\", aO, n));\n            return {\n              name: t,\n              getApi: vC,\n              onSetup: e.onSetup,\n              onShow: e.onShow,\n              onHide: e.onHide\n            };\n          }), M(r, function (t) {\n            var n = Po(st);\n            return e.slot(t.name, {\n              dom: {\n                tag: \"div\",\n                classes: [\"tox-sidebar__pane\"]\n              },\n              behaviours: Kh([vv(t, n), bv(t, n), Cr(Ji(), function (n, t) {\n                var e = t.event;\n                V(r, function (t) {\n                  return t.name === e.name;\n                }).each(function (t) {\n                  (e.visible ? t.onShow : t.onHide)(t.getApi(n));\n                });\n              })])\n            });\n          })),\n          slotBehaviours: Kh([ou(function (t) {\n            return uO.hideAllSlots(t);\n          })])\n        };\n        var e, o, r;\n      }))]);\n      var n;\n    });\n  }\n\n  function yC(t) {\n    return cd.getCurrent(t).bind(function (t) {\n      return eO.isGrowing(t) || eO.hasGrown(t) ? cd.getCurrent(t).bind(function (n) {\n        return V(uO.getSlotNames(n), function (t) {\n          return uO.isShowing(n, t);\n        });\n      }) : vt.none();\n    });\n  }\n\n  function xC(t) {\n    var n = At.fromHtml(t),\n        e = Kt(n),\n        o = R(void 0 !== n.dom.attributes ? n.dom.attributes : [], function (t, n) {\n      var e;\n      return \"class\" === n.name ? t : _lt(_lt({}, t), ((e = {})[n.name] = n.value, e));\n    }, {}),\n        r = Array.prototype.slice.call(n.dom.classList, 0),\n        i = 0 === e.length ? {} : {\n      innerHtml: Mr(n)\n    };\n    return _lt({\n      tag: Ft(n),\n      classes: r,\n      attributes: o\n    }, i);\n  }\n\n  function wC(t) {\n    return cd.getCurrent(t).each(function (t) {\n      return ka(t.element);\n    });\n  }\n\n  function SC(f, d, m) {\n    function n(t) {\n      var n;\n      !g.get() || \"focusin\" === (n = t).type && (n.composed ? Y(n.composedPath()) : vt.from(n.target)).map(At.fromDom).filter(Xn).exists(function (t) {\n        return Kr(t, \"mce-pastebin\");\n      }) || (t.preventDefault(), wC(d()), f.editorManager.setActive(f));\n    }\n\n    var g = Po(!1),\n        e = gc();\n\n    function o(t) {\n      var n, e, o, r, i, u, a, c, s, l;\n      t !== g.get() && (g.set(t), n = f, e = d(), o = t, r = m.providers, c = e.element, s = o, l = \"data-mce-\" + (i = \"tabindex\"), vt.from(n.iframeElement).map(At.fromDom).each(function (n) {\n        s ? (an(n, i).each(function (t) {\n          return on(n, l, t);\n        }), on(n, i, -1)) : (sn(n, i), an(n, l).each(function (t) {\n          on(n, i, t), sn(n, l);\n        }));\n      }), o ? (fO.block(e, (a = r, function (t, n) {\n        return {\n          dom: {\n            tag: \"div\",\n            attributes: {\n              \"aria-label\": a.translate(\"Loading...\"),\n              tabindex: \"0\"\n            },\n            classes: [\"tox-throbber__busy-spinner\"]\n          },\n          components: [{\n            dom: xC('<div class=\"tox-spinner\"><div></div><div></div><div></div></div>')\n          }]\n        };\n      })), bn(c, \"display\"), sn(c, \"aria-hidden\"), n.hasFocus() && wC(e)) : (u = cd.getCurrent(e).exists(function (t) {\n        return Ca(t.element);\n      }), fO.unblock(e), dn(c, \"display\", \"none\"), on(c, \"aria-hidden\", \"true\"), u && n.focus()), f.fire(\"AfterProgressState\", {\n        state: t\n      }));\n    }\n\n    f.inline || f.on(\"PreInit\", function () {\n      f.dom.bind(f.getWin(), \"focusin\", n), f.on(\"BeforeExecCommand\", function (t) {\n        \"mcefocus\" === t.command.toLowerCase() && !0 !== t.value && n(t);\n      });\n    }), f.on(\"ProgressState\", function (t) {\n      var n;\n      e.on(lp.clearTimeout), u(t.time) ? (n = lp.setEditorTimeout(f, function () {\n        return o(t.state);\n      }, t.time), e.set(n)) : (o(t.state), e.clear());\n    });\n  }\n\n  function kC(t, n, e) {\n    return {\n      within: t,\n      extra: n,\n      withinWidth: e\n    };\n  }\n\n  function CC(t, n, o) {\n    var e,\n        r = (e = function e(t, n) {\n      var e = o(t);\n      return vt.some({\n        element: t,\n        start: n,\n        finish: n + e,\n        width: e\n      });\n    }, R(t, function (n, t) {\n      return e(t, n.len).fold(rt(n), function (t) {\n        return {\n          len: t.finish,\n          list: n.list.concat([t])\n        };\n      });\n    }, {\n      len: 0,\n      list: []\n    }).list),\n        i = F(r, function (t) {\n      return t.finish <= n;\n    }),\n        u = I(i, function (t, n) {\n      return t + n.width;\n    }, 0);\n    return {\n      within: i,\n      extra: r.slice(i.length),\n      withinWidth: u\n    };\n  }\n\n  function OC(t) {\n    return M(t, function (t) {\n      return t.element;\n    });\n  }\n\n  function _C(t, n) {\n    var e = M(n, function (t) {\n      return Eu(t);\n    });\n    V1.setGroups(t, e);\n  }\n\n  function TC(t, n, e) {\n    var o,\n        r,\n        i,\n        u,\n        a,\n        c,\n        s,\n        l,\n        f,\n        d,\n        m,\n        g,\n        p,\n        h,\n        v,\n        b,\n        y,\n        x,\n        w,\n        S,\n        k = n.builtGroups.get();\n    0 !== k.length && (o = gl(t, n, \"primary\"), r = $y.getCoupled(t, \"overflowGroup\"), dn(o.element, \"visibility\", \"hidden\"), u = K(i = k.concat([r]), function (n) {\n      return _a(n.element).bind(function (t) {\n        return n.getSystem().getByDom(t).toOptional();\n      });\n    }), e([]), _C(o, i), a = On(o.element), 0 === (s = a, l = n.builtGroups.get(), d = r, y = (0 === (m = CC(l, s, f = function f(t) {\n      return On(t.element);\n    })).extra.length ? vt.some(m) : vt.none()).getOrThunk(function () {\n      return CC(l, s - f(d), f);\n    }), x = y.within, w = y.extra, S = y.withinWidth, (c = 1 === w.length && w[0].width <= f(d) ? (b = S, kC(OC(x.concat(w)), [], b)) : 1 <= w.length ? (p = w, h = d, v = S, kC(OC(x).concat([h]), OC(p), v)) : (g = S, kC(OC(x), [], g))).extra.length) ? (Rg.remove(o, r), e([])) : (_C(o, c.within), e(c.extra)), bn(o.element, \"visibility\"), yn(o.element), u.each(Hg.focus));\n  }\n\n  function EC(t, n) {\n    var e = $y.getCoupled(t, \"toolbarSandbox\");\n    bf.isOpen(e) ? bf.close(e) : bf.open(e, n.toolbar());\n  }\n\n  function DC(t, n, e, o) {\n    var r = e.getBounds.map(function (t) {\n      return t();\n    }),\n        i = e.lazySink(t).getOrDie();\n    ff.positionWithinBounds(i, n, {\n      anchor: {\n        type: \"hotspot\",\n        hotspot: t,\n        layouts: o,\n        overrides: {\n          maxWidthFunction: pO()\n        }\n      }\n    }, r);\n  }\n\n  function BC(t, n, e, o, r) {\n    V1.setGroups(n, r), DC(t, n, e, o), Lg.on(t);\n  }\n\n  function MC(t) {\n    return M(t, function (t) {\n      return Eu(t);\n    });\n  }\n\n  function AC(t, e, o) {\n    TC(t, o, function (n) {\n      o.overflowGroups.set(n), e.getOpt(t).each(function (t) {\n        bO.setGroups(t, MC(n));\n      });\n    });\n  }\n\n  function FC(n, e) {\n    ml(n, e, \"overflow-button\").bind(function () {\n      return ml(n, e, \"overflow\");\n    }).each(function (t) {\n      QC(n, e), eO.toggleGrow(t);\n    });\n  }\n\n  function IC(t) {\n    var n = t.title.fold(function () {\n      return {};\n    }, function (t) {\n      return {\n        attributes: {\n          title: t\n        }\n      };\n    });\n    return {\n      dom: _lt({\n        tag: \"div\",\n        classes: [\"tox-toolbar__group\"]\n      }, n),\n      components: [wO.parts.items({})],\n      items: t.items,\n      markers: {\n        itemSelector: \"*:not(.tox-split-button) > .tox-tbtn:not([disabled]), .tox-split-button:not([disabled]), .tox-toolbar-nav-js:not([disabled])\"\n      },\n      tgroupBehaviours: nc([py.config({}), Hg.config({})])\n    };\n  }\n\n  function RC(t) {\n    return wO.sketch(IC(t));\n  }\n\n  function VC(e, t) {\n    var n = ou(function (t) {\n      var n = M(e.initGroups, RC);\n      V1.setGroups(t, n);\n    });\n    return nc([Qv(e.providers.isDisabled), pv(), Fg.config({\n      mode: t,\n      onEscape: e.onEscape,\n      selector: \".tox-toolbar__group\"\n    }), mm(\"toolbar-events\", [n])]);\n  }\n\n  function PC(t) {\n    var n = t.cyclicKeying ? \"cyclic\" : \"acyclic\";\n    return {\n      uid: t.uid,\n      dom: {\n        tag: \"div\",\n        classes: [\"tox-toolbar-overlord\"]\n      },\n      parts: {\n        \"overflow-group\": IC({\n          title: vt.none(),\n          items: []\n        }),\n        \"overflow-button\": Y0({\n          name: \"more\",\n          icon: vt.some(\"more-drawer\"),\n          disabled: !1,\n          tooltip: vt.some(\"More...\"),\n          primary: !1,\n          borderless: !1\n        }, vt.none(), t.providers)\n      },\n      splitToolbarBehaviours: VC(t, n)\n    };\n  }\n\n  function HC(t) {\n    var n = t.cyclicKeying ? \"cyclic\" : \"acyclic\";\n    return V1.sketch({\n      uid: t.uid,\n      dom: {\n        tag: \"div\",\n        classes: [\"tox-toolbar\"].concat(t.type === bh.scrolling ? [\"tox-toolbar--scrolling\"] : [])\n      },\n      components: [V1.parts.groups({})],\n      toolbarBehaviours: VC(t, n)\n    });\n  }\n\n  function zC(t) {\n    return \"string\" == typeof t ? t.split(\" \") : t;\n  }\n\n  function NC(i, u) {\n    var a = _lt(_lt({}, IO), u.menus),\n        e = 0 < Ct(u.menus).length,\n        t = F(void 0 === u.menubar || !0 === u.menubar ? zC(\"file edit view insert format tools table help\") : zC(!1 === u.menubar ? \"\" : u.menubar), function (t) {\n      var n = Tt(IO, t);\n      return e ? n || tt(u.menus, t).exists(function (t) {\n        return Tt(t, \"items\");\n      }) : n;\n    });\n\n    return F(M(t, function (t) {\n      var n = a[t],\n          e = {\n        title: n.title,\n        items: zC(n.items)\n      },\n          o = u,\n          r = i.getParam(\"removed_menuitems\", \"\").split(/[ ,]/);\n      return {\n        text: e.title,\n        getItems: function getItems() {\n          return z(e.items, function (t) {\n            var n = t.toLowerCase();\n            return 0 === n.trim().length || d(r, function (t) {\n              return t === n;\n            }) ? [] : \"separator\" === n || \"|\" === n ? [{\n              type: \"separator\"\n            }] : o.menuItems[n] ? [o.menuItems[n]] : [];\n          });\n        }\n      };\n    }), function (t) {\n      return 0 < t.getItems().length && d(t.getItems(), function (t) {\n        return \"separator\" !== t.type;\n      });\n    });\n  }\n\n  function LC(t) {\n    function n() {\n      t._skinLoaded = !0, t.fire(\"SkinLoaded\");\n    }\n\n    return function () {\n      t.initialized ? n() : t.on(\"init\", n);\n    };\n  }\n\n  function WC(e, o, r) {\n    return new Ap(function (t, n) {\n      r.load(o, t, n), e.on(\"remove\", function () {\n        return r.unload(o);\n      });\n    });\n  }\n\n  function UC(t, n) {\n    var e,\n        o,\n        r,\n        i,\n        u,\n        a,\n        c,\n        s,\n        l,\n        f = (r = (e = n).getParam(\"skin\"), i = e.getParam(\"skin_url\"), !1 !== r && (o = r || \"oxide\", i = i ? e.documentBaseURI.toAbsolute(i) : ov.baseURL + \"/skins/ui/\" + o), i);\n    f && n.contentCSS.push(f + (t ? \"/content.inline\" : \"/content\") + \".min.css\"), !1 === n.getParam(\"skin\") == 0 && y(f) ? Ap.all([WC(n, f + \"/skin.min.css\", n.ui.styleSheetLoader), (c = n, s = f, l = At.fromDom(c.getElement()), pe(l).isSome() ? WC(c, s + \"/skin.shadowdom.min.css\", ev.DOM.styleSheetLoader) : Ap.resolve())]).then(LC(n), (u = n, a = \"Skin could not be loaded\", function () {\n      return u.fire(\"SkinLoadError\", {\n        message: a\n      });\n    })) : LC(n)();\n  }\n\n  function jC(o, r) {\n    return function (n) {\n      function t() {\n        n.setActive(o.formatter.match(r));\n        var t = o.formatter.formatChanged(r, n.setActive);\n        e.set(t);\n      }\n\n      var e = mc();\n      return o.initialized ? t() : o.once(\"init\", t), function () {\n        o.off(\"init\", t), e.clear();\n      };\n    };\n  }\n\n  function GC(o, r, i) {\n    return function (t) {\n      function n() {\n        return i(t);\n      }\n\n      function e() {\n        i(t), o.on(r, n);\n      }\n\n      return o.initialized ? e() : o.once(\"init\", e), function () {\n        o.off(\"init\", e), o.off(r, n);\n      };\n    };\n  }\n\n  function XC(n) {\n    return function (t) {\n      return function () {\n        n.undoManager.transact(function () {\n          n.focus(), n.execCommand(\"mceToggleFormat\", !1, t.format);\n        });\n      };\n    };\n  }\n\n  function YC(t, n) {\n    return function () {\n      return t.execCommand(n);\n    };\n  }\n\n  function qC(t, n, e) {\n    var u,\n        a,\n        c,\n        o = e.dataset,\n        r = \"basic\" === o.type ? function () {\n      return M(o.data, function (t) {\n        return yk(t, e.isSelectedFor, e.getPreviewFor);\n      });\n    } : o.getData;\n    return {\n      items: (u = n, a = e, c = function c(t, n, e) {\n        var o = \"formatter\" === t.type && a.isInvalid(t);\n        return 0 === n ? o ? [] : i(t, n, !1, e).toArray() : i(t, n, o, e).toArray();\n      }, {\n        validateItems: s,\n        getFetch: function getFetch(e, o) {\n          return function (t, n) {\n            n(U0(s(o()), Sh.CLOSE_ON_EXECUTE, e, !1));\n          };\n        }\n      }),\n      getStyleItems: r\n    };\n\n    function i(t, n, e, o) {\n      var r = u.shared.providers.translate(t.title);\n      if (\"separator\" === t.type) return vt.some({\n        type: \"separator\",\n        text: r\n      });\n      if (\"submenu\" !== t.type) return vt.some(_lt({\n        type: \"togglemenuitem\",\n        text: r,\n        icon: t.icon,\n        active: t.isSelected(o),\n        disabled: e,\n        onAction: a.onAction(t)\n      }, t.getStylePreview().fold(function () {\n        return {};\n      }, function (t) {\n        return {\n          meta: {\n            style: t\n          }\n        };\n      })));\n      var i = z(t.getStyleItems(), function (t) {\n        return c(t, n, o);\n      });\n      return 0 === n && i.length <= 0 ? vt.none() : vt.some({\n        type: \"nestedmenuitem\",\n        text: r,\n        disabled: i.length <= 0,\n        getSubmenuItems: function getSubmenuItems() {\n          return z(t.getStyleItems(), function (t) {\n            return c(t, n, o);\n          });\n        }\n      });\n    }\n\n    function s(t) {\n      var n = a.getCurrentValue(),\n          e = a.shouldHide ? 0 : 1;\n      return z(t, function (t) {\n        return c(t, e, n);\n      });\n    }\n  }\n\n  function KC(t, n, e) {\n    var o = qC(0, n, e),\n        r = o.items,\n        i = o.getStyleItems,\n        u = GC(t, \"NodeChange\", function (t) {\n      var n = t.getComponent();\n      e.updateText(n);\n    });\n    return L0({\n      text: e.icon.isSome() ? vt.none() : e.text,\n      icon: e.icon,\n      tooltip: vt.from(e.tooltip),\n      role: vt.none(),\n      fetch: r.getFetch(n, i),\n      onSetup: u,\n      getApi: function getApi(t) {\n        return {\n          getComponent: rt(t)\n        };\n      },\n      columns: 1,\n      presets: \"normal\",\n      classes: e.icon.isSome() ? [] : [\"bespoke\"],\n      dropdownBehaviours: []\n    }, \"tox-tbtn\", n.shared);\n  }\n\n  function JC(t) {\n    return function (t) {\n      for (; t = t.parentNode;) {\n        var n = t.contentEditable;\n        if (n && \"inherit\" !== n) return O1(t);\n      }\n\n      return !1;\n    }(t) && !_1(t);\n  }\n\n  function $C(r, t) {\n    function n(t) {\n      return vl(r);\n    }\n\n    function e(e, o) {\n      return function (t, n) {\n        return ml(t, r, n).map(function (t) {\n          return e(t, n);\n        }).getOr(o);\n      };\n    }\n\n    function o(t, n) {\n      return \"true\" !== un(t.element, \"aria-hidden\");\n    }\n\n    var i,\n        u = e(o, !1),\n        a = e(function (t, n) {\n      var e;\n      o(t) && (dn(e = t.element, \"display\", \"none\"), on(e, \"aria-hidden\", \"true\"), br(t, Ji(), {\n        name: n,\n        visible: !1\n      }));\n    }),\n        c = (i = a, function (n, t) {\n      St(t, function (t) {\n        return i(n, t);\n      });\n    }),\n        s = e(function (t, n) {\n      var e;\n      o(t) || (bn(e = t.element, \"display\"), sn(e, \"aria-hidden\"), br(t, Ji(), {\n        name: n,\n        visible: !0\n      }));\n    });\n    return {\n      uid: r.uid,\n      dom: r.dom,\n      components: t,\n      behaviours: tl(r.slotBehaviours),\n      apis: {\n        getSlotNames: n,\n        getSlot: function getSlot(t, n) {\n          return ml(t, r, n);\n        },\n        isShowing: u,\n        hideSlot: a,\n        hideAllSlots: function hideAllSlots(t) {\n          return c(t, n());\n        },\n        showSlot: s\n      }\n    };\n  }\n\n  function QC(t, n) {\n    ml(t, n, \"overflow\").each(function (e) {\n      TC(t, n, function (t) {\n        var n = M(t, function (t) {\n          return Eu(t);\n        });\n        V1.setGroups(e, n);\n      }), ml(t, n, \"overflow-button\").each(function (t) {\n        eO.hasGrown(e) && Lg.on(t);\n      }), eO.refresh(e);\n    });\n  }\n\n  var ZC,\n      t1,\n      n1,\n      e1 = \"data-value\",\n      o1 = function o1(n, e, t, o) {\n    return M(t, function (t) {\n      return rk(t) ? {\n        type: \"togglemenuitem\",\n        text: t.text,\n        value: t.value,\n        active: t.value === o,\n        onAction: function onAction() {\n          Df.setValue(n, t.value), br(n, yy, {\n            name: e\n          }), Hg.focus(n);\n        }\n      } : {\n        type: \"nestedmenuitem\",\n        text: t.text,\n        getSubmenuItems: function getSubmenuItems() {\n          return o1(n, e, t.items, o);\n        }\n      };\n    });\n  },\n      r1 = function r1(t, n) {\n    return K(t, function (t) {\n      return rk(t) ? ot(t.value === n, t) : r1(t.items, n);\n    });\n  },\n      i1 = kl({\n    name: \"HtmlSelect\",\n    configFields: [mo(\"options\"), Zs(\"selectBehaviours\", [Hg, Df]), Eo(\"selectClasses\", []), Eo(\"selectAttributes\", {}), wo(\"data\")],\n    factory: function factory(e, t) {\n      var n = M(e.options, function (t) {\n        return {\n          dom: {\n            tag: \"option\",\n            value: t.value,\n            innerHtml: t.text\n          }\n        };\n      }),\n          o = e.data.map(function (t) {\n        return sr(\"initialValue\", t);\n      }).getOr({});\n      return {\n        uid: e.uid,\n        dom: {\n          tag: \"select\",\n          classes: e.selectClasses,\n          attributes: e.selectAttributes\n        },\n        components: n,\n        behaviours: nl(e.selectBehaviours, [Hg.config({}), Df.config({\n          store: _lt({\n            mode: \"manual\",\n            getValue: function getValue(t) {\n              return Qr(t.element);\n            },\n            setValue: function setValue(t, n) {\n              V(e.options, function (t) {\n                return t.value === n;\n              }).isSome() && Zr(t.element, n);\n            }\n          }, o)\n        })])\n      };\n    }\n  }),\n      u1 = Object.freeze({\n    __proto__: null,\n    events: function events(t, n) {\n      var e = t.stream.streams.setup(t, n);\n      return eu([Cr(t.event, e), ru(function () {\n        return n.cancel();\n      })].concat(t.cancelEvent.map(function (t) {\n        return [Cr(t, function () {\n          return n.cancel();\n        })];\n      }).getOr([])));\n    }\n  }),\n      a1 = Object.freeze({\n    __proto__: null,\n    throttle: ak,\n    init: function init(t) {\n      return t.stream.streams.state(t);\n    }\n  }),\n      c1 = xa({\n    fields: [go(\"stream\", lo(\"mode\", {\n      throttle: [mo(\"delay\"), Eo(\"stopEvent\", !0), ta(\"streams\", {\n        setup: function setup(t, n) {\n          var e = t.stream,\n              o = vp(t.onStream, e.delay);\n          return n.setTimer(o), function (t, n) {\n            o.throttle(t, n), e.stopEvent && n.stop();\n          };\n        },\n        state: ak\n      })]\n    })), Eo(\"event\", \"input\"), wo(\"cancelEvent\"), Qu(\"onStream\")],\n    name: \"streaming\",\n    active: u1,\n    state: a1\n  }),\n      s1 = function s1(t) {\n    sk(t, function (t, n) {\n      return t.setSelectionRange(n.length, n.length);\n    });\n  },\n      l1 = rt(\"alloy.typeahead.itemexecute\"),\n      f1 = rt([wo(\"lazySink\"), mo(\"fetch\"), Eo(\"minChars\", 5), Eo(\"responseTime\", 1e3), Ju(\"onOpen\"), Eo(\"getHotspot\", vt.some), Eo(\"getAnchorOverrides\", rt({})), Eo(\"layouts\", vt.none()), Eo(\"eventOrder\", {}), Vo(\"model\", {}, [Eo(\"getDisplayText\", function (t) {\n    return void 0 !== t.meta && void 0 !== t.meta.text ? t.meta.text : t.value;\n  }), Eo(\"selectsOver\", !0), Eo(\"populateFromBrowse\", !0)]), Ju(\"onSetValue\"), $u(\"onExecute\"), Ju(\"onItemExecute\"), Eo(\"inputClasses\", []), Eo(\"inputAttributes\", {}), Eo(\"inputStyles\", {}), Eo(\"matchWidth\", !0), Eo(\"useMinWidth\", !1), Eo(\"dismissOnBlur\", !0), qu([\"openClass\"]), wo(\"initialData\"), Zs(\"typeaheadBehaviours\", [Hg, Df, c1, Fg, Lg, $y]), cr(\"previewing\", function () {\n    return Po(!0);\n  })].concat(Ey()).concat(ux())),\n      d1 = rt([$f({\n    schema: [Yu()],\n    name: \"menu\",\n    overrides: function overrides(o) {\n      return {\n        fakeFocus: !0,\n        onHighlight: function onHighlight(n, e) {\n          o.previewing.get() ? n.getSystem().getByUid(o.uid).each(function (t) {\n            !function (t, n, o) {\n              if (t.selectsOver) {\n                var e = Df.getValue(n),\n                    r = t.getDisplayText(e),\n                    i = Df.getValue(o);\n                return 0 === t.getDisplayText(i).indexOf(r) ? vt.some(function () {\n                  var e;\n                  ck(0, n, o), e = r.length, sk(n, function (t, n) {\n                    return t.setSelectionRange(e, n.length);\n                  });\n                }) : vt.none();\n              }\n\n              return vt.none();\n            }(o.model, t, e).fold(function () {\n              return hd.dehighlight(n, e);\n            }, function (t) {\n              return t();\n            });\n          }) : n.getSystem().getByUid(o.uid).each(function (t) {\n            o.model.populateFromBrowse && ck(o.model, t, e);\n          }), o.previewing.set(!1);\n        },\n        onExecute: function onExecute(t, n) {\n          return t.getSystem().getByUid(o.uid).toOptional().map(function (t) {\n            return br(t, l1(), {\n              item: n\n            }), !0;\n          });\n        },\n        onHover: function onHover(t, n) {\n          o.previewing.set(!1), t.getSystem().getByUid(o.uid).each(function (t) {\n            o.model.populateFromBrowse && ck(o.model, t, n);\n          });\n        }\n      };\n    }\n  })]),\n      m1 = Cl({\n    name: \"Typeahead\",\n    configFields: f1(),\n    partFields: d1(),\n    factory: function factory(r, t, n, i) {\n      function e(t, n, e) {\n        r.previewing.set(!1);\n        var o = $y.getCoupled(t, \"sandbox\");\n        bf.isOpen(o) ? cd.getCurrent(o).each(function (t) {\n          hd.getHighlighted(t).fold(function () {\n            e(t);\n          }, function () {\n            wr(o, t.element, \"keydown\", n);\n          });\n        }) : nx(r, u(t), t, o, i, function (t) {\n          cd.getCurrent(t).each(e);\n        }, Hy.HighlightFirst).get(st);\n      }\n\n      function u(e) {\n        return function (t) {\n          return t.map(function (t) {\n            var n = z(Z(t.menus), function (t) {\n              return F(t.items, function (t) {\n                return \"item\" === t.type;\n              });\n            });\n            return Df.getState(e).update(M(n, function (t) {\n              return t.data;\n            })), t;\n          });\n        };\n      }\n\n      var o = ry(r),\n          a = [Hg.config({}), Df.config({\n        onSetValue: r.onSetValue,\n        store: _lt({\n          mode: \"dataset\",\n          getDataKey: function getDataKey(t) {\n            return Qr(t.element);\n          },\n          getFallbackEntry: function getFallbackEntry(t) {\n            return {\n              value: t,\n              meta: {}\n            };\n          },\n          setValue: function setValue(t, n) {\n            Zr(t.element, r.model.getDisplayText(n));\n          }\n        }, r.initialData.map(function (t) {\n          return sr(\"initialValue\", t);\n        }).getOr({}))\n      }), c1.config({\n        stream: {\n          mode: \"throttle\",\n          delay: r.responseTime,\n          stopEvent: !1\n        },\n        onStream: function onStream(t, n) {\n          var e,\n              o = $y.getCoupled(t, \"sandbox\");\n          Hg.isFocused(t) && Qr(t.element).length >= r.minChars && (e = cd.getCurrent(o).bind(function (t) {\n            return hd.getHighlighted(t).map(Df.getValue);\n          }), r.previewing.set(!0), nx(r, u(t), t, o, i, function (t) {\n            cd.getCurrent(o).each(function (t) {\n              e.fold(function () {\n                r.model.selectsOver && hd.highlightFirst(t);\n              }, function (n) {\n                hd.highlightBy(t, function (t) {\n                  return Df.getValue(t).value === n.value;\n                }), hd.getHighlighted(t).orThunk(function () {\n                  return hd.highlightFirst(t), vt.none();\n                });\n              });\n            });\n          }, Hy.HighlightFirst).get(st));\n        },\n        cancelEvent: zi()\n      }), Fg.config({\n        mode: \"special\",\n        onDown: function onDown(t, n) {\n          return e(t, n, hd.highlightFirst), vt.some(!0);\n        },\n        onEscape: function onEscape(t) {\n          var n = $y.getCoupled(t, \"sandbox\");\n          return bf.isOpen(n) ? (bf.close(n), vt.some(!0)) : vt.none();\n        },\n        onUp: function onUp(t, n) {\n          return e(t, n, hd.highlightLast), vt.some(!0);\n        },\n        onEnter: function onEnter(n) {\n          var t = $y.getCoupled(n, \"sandbox\"),\n              e = bf.isOpen(t);\n          if (e && !r.previewing.get()) return cd.getCurrent(t).bind(function (t) {\n            return hd.getHighlighted(t);\n          }).map(function (t) {\n            return br(n, l1(), {\n              item: t\n            }), !0;\n          });\n          var o = Df.getValue(n);\n          return vr(n, zi()), r.onExecute(t, n, o), e && bf.close(t), vt.some(!0);\n        }\n      }), Lg.config({\n        toggleClass: r.markers.openClass,\n        aria: {\n          mode: \"expanded\"\n        }\n      }), $y.config({\n        others: {\n          sandbox: function sandbox(t) {\n            return rx(r, t, {\n              onOpen: function onOpen() {\n                return Lg.on(t);\n              },\n              onClose: function onClose() {\n                return Lg.off(t);\n              }\n            });\n          }\n        }\n      }), mm(\"typeaheadevents\", [uu(function (t) {\n        ex(r, u(t), t, i, st, Hy.HighlightFirst).get(st);\n      }), Cr(l1(), function (t, n) {\n        var e = $y.getCoupled(t, \"sandbox\");\n        ck(r.model, t, n.event.item), vr(t, zi()), r.onItemExecute(t, e, n.event.item, Df.getValue(t)), bf.close(e), s1(t);\n      })].concat(r.dismissOnBlur ? [Cr(Mi(), function (t) {\n        var n = $y.getCoupled(t, \"sandbox\");\n        _a(n.element).isNone() && bf.close(n);\n      })] : []))];\n      return {\n        uid: r.uid,\n        dom: iy(Yo(r, {\n          inputAttributes: {\n            role: \"combobox\",\n            \"aria-autocomplete\": \"list\",\n            \"aria-haspopup\": \"true\"\n          }\n        })),\n        behaviours: _lt(_lt({}, o), nl(r.typeaheadBehaviours, a)),\n        eventOrder: r.eventOrder\n      };\n    }\n  }),\n      g1 = function g1(i) {\n    return _lt(_lt({}, i), {\n      toCached: function toCached() {\n        return g1(i.toCached());\n      },\n      bindFuture: function bindFuture(n) {\n        return g1(i.bind(function (t) {\n          return t.fold(function (t) {\n            return Gy(Ve.error(t));\n          }, function (t) {\n            return n(t);\n          });\n        }));\n      },\n      bindResult: function bindResult(n) {\n        return g1(i.map(function (t) {\n          return t.bind(n);\n        }));\n      },\n      mapResult: function mapResult(n) {\n        return g1(i.map(function (t) {\n          return t.map(n);\n        }));\n      },\n      mapError: function mapError(n) {\n        return g1(i.map(function (t) {\n          return t.mapError(n);\n        }));\n      },\n      foldResult: function foldResult(n, e) {\n        return i.map(function (t) {\n          return t.fold(n, e);\n        });\n      },\n      withTimeout: function withTimeout(t, r) {\n        return g1(jy(function (n) {\n          var e = !1,\n              o = setTimeout(function () {\n            e = !0, n(Ve.error(r()));\n          }, t);\n          i.get(function (t) {\n            e || (clearTimeout(o), n(t));\n          });\n        }));\n      }\n    });\n  },\n      p1 = function p1(t) {\n    return g1(jy(t));\n  },\n      h1 = {\n    type: \"separator\"\n  },\n      v1 = Ir(\"aria-invalid\"),\n      b1 = {\n    bar: pk(function (t, n) {\n      return e = n.shared, {\n        dom: {\n          tag: \"div\",\n          classes: [\"tox-bar\", \"tox-form__controls-h-stack\"]\n        },\n        components: M(t.items, e.interpreter)\n      };\n      var e;\n    }),\n    collection: pk(function (t, n) {\n      return u = t, a = n.shared.providers, c = u.label.map(function (t) {\n        return oy(t, a);\n      }), s = e(function (t, n, e, o) {\n        n.stop(), a.isDisabled() || br(t, Sy, {\n          name: u.name,\n          value: o\n        });\n      }), l = [Cr(vi(), e(function (t, n, e) {\n        ka(e);\n      })), Cr(Ci(), s), Cr(Vi(), s), Cr(bi(), e(function (t, n, e) {\n        Iu(t.element, \".\" + Mh).each(function (t) {\n          qr(t, Mh);\n        }), Yr(e, Mh);\n      })), Cr(yi(), e(function (t) {\n        Iu(t.element, \".\" + Mh).each(function (t) {\n          qr(t, Mh);\n        });\n      })), uu(e(function (t, n, e, o) {\n        br(t, Sy, {\n          name: u.name,\n          value: o\n        });\n      }))], ey(c, my.parts.field({\n        dom: {\n          tag: \"div\",\n          classes: [\"tox-collection\"].concat(1 !== u.columns ? [\"tox-collection--grid\"] : [\"tox-collection--list\"])\n        },\n        components: [],\n        factory: {\n          sketch: h\n        },\n        behaviours: nc([gd.config({\n          disabled: a.isDisabled,\n          onDisabled: function onDisabled(t) {\n            o(t, function (t) {\n              Yr(t, \"tox-collection__item--state-disabled\"), on(t, \"aria-disabled\", !0);\n            });\n          },\n          onEnabled: function onEnabled(t) {\n            o(t, function (t) {\n              qr(t, \"tox-collection__item--state-disabled\"), sn(t, \"aria-disabled\");\n            });\n          }\n        }), pv(), Rg.config({}), Df.config({\n          store: {\n            mode: \"memory\",\n            initialValue: []\n          },\n          onSetValue: function onSetValue(o, t) {\n            var n = o,\n                e = M(t, function (t) {\n              var n = dp.translate(t.text),\n                  e = 1 === u.columns ? '<div class=\"tox-collection__item-label\">' + n + \"</div>\" : \"\",\n                  o = '<div class=\"tox-collection__item-icon\">' + t.icon + \"</div>\",\n                  r = {\n                _: \" \",\n                \" - \": \" \",\n                \"-\": \" \"\n              },\n                  i = n.replace(/\\_| \\- |\\-/g, function (t) {\n                return r[t];\n              });\n              return '<div class=\"tox-collection__item' + (a.isDisabled() ? \" tox-collection__item--state-disabled\" : \"\") + '\" tabindex=\"-1\" data-collection-item-value=\"' + hy.encodeAllRaw(t.value) + '\" title=\"' + i + '\" aria-label=\"' + i + '\">' + o + e + \"</div>\";\n            }),\n                r = M(\"auto\" !== u.columns && 1 < u.columns ? p(e, u.columns) : [e], function (t) {\n              return '<div class=\"tox-collection__group\">' + t.join(\"\") + \"</div>\";\n            });\n            Ar(n.element, r.join(\"\")), \"auto\" === u.columns && ah(o, 5, \"tox-collection__item\").each(function (t) {\n              var n = t.numRows,\n                  e = t.numColumns;\n              Fg.setGridSize(o, n, e);\n            }), vr(o, Ty);\n          }\n        }), py.config({}), Fg.config(1 === (i = u.columns) ? {\n          mode: \"menu\",\n          moveOnTab: !1,\n          selector: \".tox-collection__item\"\n        } : \"auto\" === i ? {\n          mode: \"flatgrid\",\n          selector: \".tox-collection__item\",\n          initSize: {\n            numColumns: 1,\n            numRows: 1\n          }\n        } : {\n          mode: \"matrix\",\n          selectors: {\n            row: \".tox-collection__group\",\n            cell: \".\" + Ch\n          }\n        }), mm(\"collection-events\", l)]),\n        eventOrder: ((r = {})[Ii()] = [\"disabling\", \"alloy.base.behaviour\", \"collection-events\"], r)\n      }), [\"tox-form__group--collection\"], []);\n\n      function e(o) {\n        return function (n, e) {\n          Ru(e.event.target, \"[data-collection-item-value]\").each(function (t) {\n            o(n, e, t, un(t, \"data-collection-item-value\"));\n          });\n        };\n      }\n\n      function o(t, n) {\n        return M(vs(t.element, \".tox-collection__item\"), n);\n      }\n\n      var u, a, r, i, c, s, l;\n    }),\n    alertbanner: pk(function (t, n) {\n      return o = n.shared.providers, ly.sketch({\n        dom: {\n          tag: \"div\",\n          attributes: {\n            role: \"alert\"\n          },\n          classes: [\"tox-notification\", \"tox-notification--in\", \"tox-notification--\" + (e = t).level]\n        },\n        components: [{\n          dom: {\n            tag: \"div\",\n            classes: [\"tox-notification__icon\"]\n          },\n          components: [fp.sketch({\n            dom: {\n              tag: \"button\",\n              classes: [\"tox-button\", \"tox-button--naked\", \"tox-button--icon\"],\n              innerHtml: Um(e.icon, o.icons),\n              attributes: {\n                title: o.translate(e.iconTooltip)\n              }\n            },\n            action: function action(t) {\n              br(t, Sy, {\n                name: \"alert-banner\",\n                value: e.url\n              });\n            },\n            buttonBehaviours: nc([jm()])\n          })]\n        }, {\n          dom: {\n            tag: \"div\",\n            classes: [\"tox-notification__body\"],\n            innerHtml: o.translate(e.text)\n          }\n        }]\n      });\n      var e, o;\n    }),\n    input: pk(function (t, n) {\n      return o = n.shared.providers, uk({\n        name: (e = t).name,\n        multiline: !1,\n        label: e.label,\n        inputMode: e.inputMode,\n        placeholder: e.placeholder,\n        flex: !1,\n        disabled: e.disabled,\n        classname: \"tox-textfield\",\n        validation: vt.none(),\n        maximized: e.maximized\n      }, o);\n      var e, o;\n    }),\n    textarea: pk(function (t, n) {\n      return o = n.shared.providers, uk({\n        name: (e = t).name,\n        multiline: !0,\n        label: e.label,\n        inputMode: vt.none(),\n        placeholder: e.placeholder,\n        flex: !0,\n        disabled: e.disabled,\n        classname: \"tox-textarea\",\n        validation: vt.none(),\n        maximized: e.maximized\n      }, o);\n      var e, o;\n    }),\n    label: pk(function (t, n) {\n      return r = {\n        dom: {\n          tag: \"label\",\n          innerHtml: (o = n.shared).providers.translate((e = t).label),\n          classes: [\"tox-label\"]\n        }\n      }, i = M(e.items, o.interpreter), {\n        dom: {\n          tag: \"div\",\n          classes: [\"tox-form__group\"]\n        },\n        components: [r].concat(i),\n        behaviours: nc([aw(), Rg.config({}), cw(vt.none()), Fg.config({\n          mode: \"acyclic\"\n        })])\n      };\n      var e, o, r, i;\n    }),\n    iframe: (ZC = function ZC(t, n) {\n      return e = t, o = n.shared.providers, u = bS && e.sandboxed, a = _lt(_lt({}, e.label.map(function (t) {\n        return {\n          title: t\n        };\n      }).getOr({})), u ? {\n        sandbox: \"allow-scripts allow-same-origin\"\n      } : {}), r = u, i = Po(\"\"), c = {\n        getValue: function getValue(t) {\n          return i.get();\n        },\n        setValue: function setValue(t, n) {\n          var e;\n          r ? on(t.element, \"srcdoc\", n) : (on(t.element, \"src\", \"javascript:''\"), (e = t.element.dom.contentWindow.document).open(), e.write(n), e.close()), i.set(n);\n        }\n      }, ey(e.label.map(function (t) {\n        return oy(t, o);\n      }), my.parts.field({\n        factory: {\n          sketch: function sketch(t) {\n            return d0({\n              uid: t.uid,\n              dom: {\n                tag: \"iframe\",\n                attributes: a\n              },\n              behaviours: nc([py.config({}), Hg.config({}), gS(vt.none(), c.getValue, c.setValue)])\n            });\n          }\n        }\n      }), [\"tox-form__group--stretched\"], []);\n      var e, o, r, i, u, a, c;\n    }, function (t, n, e) {\n      var o = Yo(n, {\n        source: \"dynamic\"\n      });\n      return pk(ZC)(t, o, e);\n    }),\n    button: pk(function (t, n) {\n      return e = t, o = n.shared.providers, r = $0(e.name, \"custom\"), ey(vt.none(), my.parts.field(_lt({\n        factory: fp\n      }, K0(e, vt.some(r), o, [pS(\"\"), aw()]))), [], []);\n      var e, o, r;\n    }),\n    checkbox: pk(function (t, n) {\n      return r = t, i = n.shared.providers, u = Df.config({\n        store: {\n          mode: \"manual\",\n          getValue: function getValue(t) {\n            return t.element.dom.checked;\n          },\n          setValue: function setValue(t, n) {\n            t.element.dom.checked = n;\n          }\n        }\n      }), a = my.parts.field({\n        factory: {\n          sketch: h\n        },\n        dom: {\n          tag: \"input\",\n          classes: [\"tox-checkbox__input\"],\n          attributes: {\n            type: \"checkbox\"\n          }\n        },\n        behaviours: nc([aw(), gd.config({\n          disabled: function disabled() {\n            return r.disabled || i.isDisabled();\n          }\n        }), py.config({}), Hg.config({}), u, Fg.config({\n          mode: \"special\",\n          onEnter: e,\n          onSpace: e,\n          stopSpaceKeyup: !0\n        }), mm(\"checkbox-events\", [Cr(ki(), function (t, n) {\n          br(t, yy, {\n            name: r.name\n          });\n        })])])\n      }), c = my.parts.label({\n        dom: {\n          tag: \"span\",\n          classes: [\"tox-checkbox__label\"],\n          innerHtml: i.translate(r.label)\n        },\n        behaviours: nc([vw.config({})])\n      }), s = zm({\n        dom: {\n          tag: \"div\",\n          classes: [\"tox-checkbox__icons\"]\n        },\n        components: [o(\"checked\"), o(\"unchecked\")]\n      }), my.sketch({\n        dom: {\n          tag: \"label\",\n          classes: [\"tox-checkbox\"]\n        },\n        components: [a, s.asSpec(), c],\n        fieldBehaviours: nc([gd.config({\n          disabled: function disabled() {\n            return r.disabled || i.isDisabled();\n          },\n          disableClass: \"tox-checkbox--disabled\",\n          onDisabled: function onDisabled(t) {\n            my.getField(t).each(gd.disable);\n          },\n          onEnabled: function onEnabled(t) {\n            my.getField(t).each(gd.enable);\n          }\n        }), pv()])\n      });\n\n      function e(t) {\n        return t.element.dom.click(), vt.some(!0);\n      }\n\n      function o(t) {\n        return Xm(\"checked\" === t ? \"selected\" : \"unselected\", {\n          tag: \"span\",\n          classes: [\"tox-icon\", \"tox-checkbox-icon__\" + t]\n        }, i.icons);\n      }\n\n      var r, i, u, a, c, s;\n    }),\n    colorinput: pk(function (t, n) {\n      return e = t, r = n.shared, i = n.colorinput, c = my.parts.field({\n        factory: Dy,\n        inputClasses: [\"tox-textfield\"],\n        onSetValue: function onSetValue(t) {\n          return Ky.run(t).get(st);\n        },\n        inputBehaviours: nc([gd.config({\n          disabled: r.providers.isDisabled\n        }), pv(), py.config({}), Ky.config({\n          invalidClass: \"tox-textbox-field-invalid\",\n          getRoot: function getRoot(t) {\n            return Yt(t.element);\n          },\n          notify: {\n            onValid: function onValid(t) {\n              var n = Df.getValue(t);\n              br(t, bw, {\n                color: n\n              });\n            }\n          },\n          validator: {\n            validateOnLoad: !1,\n            validate: function validate(t) {\n              var n = Df.getValue(t);\n              if (0 === n.length) return Gy(Ve.value(!0));\n              var e = At.fromTag(\"span\");\n              dn(e, \"background-color\", n);\n              var o = hn(e, \"background-color\").fold(function () {\n                return Ve.error(\"blah\");\n              }, function (t) {\n                return Ve.value(n);\n              });\n              return Gy(o);\n            }\n          }\n        })]),\n        selectOnFocus: !1\n      }), s = e.label.map(function (t) {\n        return oy(t, r.providers);\n      }), l = zm((u = {\n        dom: {\n          tag: \"span\",\n          attributes: {\n            \"aria-label\": r.providers.translate(\"Color swatch\")\n          }\n        },\n        layouts: {\n          onRtl: function onRtl() {\n            return [Ya, Xa, $a];\n          },\n          onLtr: function onLtr() {\n            return [Xa, Ya, $a];\n          }\n        },\n        components: [],\n        fetch: wb(i.getColors(), i.hasCustomColors()),\n        columns: i.getColorCols(),\n        presets: \"color\",\n        onItemAction: function onItemAction(t, e) {\n          l.getOpt(t).each(function (n) {\n            \"custom\" === e ? i.colorPicker(function (t) {\n              t.fold(function () {\n                return vr(n, xw);\n              }, function (t) {\n                o(n, t), hb(t);\n              });\n            }, \"#ffffff\") : o(n, \"remove\" === e ? \"\" : e);\n          });\n        }\n      }, hw.sketch({\n        dom: u.dom,\n        components: u.components,\n        toggleClass: \"mce-active\",\n        dropdownBehaviours: nc([$v((a = r).providers.isDisabled), pv(), vw.config({}), py.config({})]),\n        layouts: u.layouts,\n        sandboxClasses: [\"tox-dialog__popups\"],\n        lazySink: a.getSink,\n        fetch: function fetch(n) {\n          return jy(function (t) {\n            return u.fetch(t);\n          }).map(function (t) {\n            return vt.from(Xb(Yo(Ob(Ir(\"menu-value\"), t, function (t) {\n              u.onItemAction(n, t);\n            }, u.columns, u.presets, Sh.CLOSE_ON_EXECUTE, T, a.providers), {\n              movement: _b(u.columns, u.presets)\n            })));\n          });\n        },\n        parts: {\n          menu: Zp(0, 0, u.presets)\n        }\n      }))), my.sketch({\n        dom: {\n          tag: \"div\",\n          classes: [\"tox-form__group\"]\n        },\n        components: s.toArray().concat([{\n          dom: {\n            tag: \"div\",\n            classes: [\"tox-color-input\"]\n          },\n          components: [c, l.asSpec()]\n        }]),\n        fieldBehaviours: nc([mm(\"form-field-events\", [Cr(bw, function (t, n) {\n          l.getOpt(t).each(function (t) {\n            dn(t.element, \"background-color\", n.event.color);\n          }), br(t, yy, {\n            name: e.name\n          });\n        }), Cr(yw, function (n, e) {\n          my.getField(n).each(function (t) {\n            Df.setValue(t, e.event.value), cd.getCurrent(n).each(Hg.focus);\n          });\n        }), Cr(xw, function (n, t) {\n          my.getField(n).each(function (t) {\n            cd.getCurrent(n).each(Hg.focus);\n          });\n        })])])\n      });\n\n      function o(t, n) {\n        br(t, yw, {\n          value: n\n        });\n      }\n\n      var e, r, i, u, a, c, s, l;\n    }),\n    colorpicker: pk(function (t) {\n      var r = zm(a0(c0, function (t) {\n        return \"tox-\" + t;\n      }).sketch({\n        dom: {\n          tag: \"div\",\n          classes: [\"tox-color-picker-container\"],\n          attributes: {\n            role: \"presentation\"\n          }\n        },\n        onValidHex: function onValidHex(t) {\n          br(t, Sy, {\n            name: \"hex-valid\",\n            value: !0\n          });\n        },\n        onInvalidHex: function onInvalidHex(t) {\n          br(t, Sy, {\n            name: \"hex-valid\",\n            value: !1\n          });\n        }\n      }));\n      return {\n        dom: {\n          tag: \"div\"\n        },\n        components: [r.asSpec()],\n        behaviours: nc([Df.config({\n          store: {\n            mode: \"manual\",\n            getValue: function getValue(t) {\n              var n = r.get(t);\n              return cd.getCurrent(n).bind(function (t) {\n                return Df.getValue(t).hex;\n              }).map(function (t) {\n                return \"#\" + t;\n              }).getOr(\"\");\n            },\n            setValue: function setValue(t, n) {\n              var e = /^#([a-fA-F0-9]{3}(?:[a-fA-F0-9]{3})?)/.exec(n),\n                  o = r.get(t);\n              cd.getCurrent(o).fold(function () {\n                console.log(\"Can not find form\");\n              }, function (t) {\n                Df.setValue(t, {\n                  hex: vt.from(e[1]).getOr(\"\")\n                }), eS.getField(t, \"hex\").each(function (t) {\n                  vr(t, Si());\n                });\n              });\n            }\n          }\n        }), aw()])\n      };\n    }),\n    dropzone: pk(function (t, n) {\n      return l0(t, n.shared.providers);\n    }),\n    grid: pk(function (t, n) {\n      return e = n.shared, {\n        dom: {\n          tag: \"div\",\n          classes: [\"tox-form__grid\", \"tox-form__grid--\" + t.columns + \"col\"]\n        },\n        components: M(t.items, e.interpreter)\n      };\n      var e;\n    }),\n    listbox: pk(function (t, n) {\n      return e = t, r = (o = n).shared.providers, i = Y(e.items).filter(rk), u = e.label.map(function (t) {\n        return oy(t, r);\n      }), a = {\n        dom: {\n          tag: \"div\",\n          classes: [\"tox-listboxfield\"]\n        },\n        components: [my.parts.field({\n          dom: {},\n          factory: {\n            sketch: function sketch(t) {\n              return L0({\n                uid: t.uid,\n                text: i.map(function (t) {\n                  return t.text;\n                }),\n                icon: vt.none(),\n                tooltip: e.label,\n                role: vt.none(),\n                fetch: function fetch(t, n) {\n                  n(U0(o1(t, e.name, e.items, Df.getValue(t)), Sh.CLOSE_ON_EXECUTE, o, !1));\n                },\n                onSetup: rt(st),\n                getApi: rt({}),\n                columns: 1,\n                presets: \"normal\",\n                classes: [],\n                dropdownBehaviours: [py.config({}), Df.config({\n                  store: {\n                    mode: \"manual\",\n                    initialValue: i.map(function (t) {\n                      return t.value;\n                    }).getOr(\"\"),\n                    getValue: function getValue(t) {\n                      return un(t.element, e1);\n                    },\n                    setValue: function setValue(n, t) {\n                      r1(e.items, t).each(function (t) {\n                        on(n.element, e1, t.value), br(n, VS, {\n                          text: t.text\n                        });\n                      });\n                    }\n                  }\n                })]\n              }, \"tox-listbox\", o.shared);\n            }\n          }\n        })]\n      }, my.sketch({\n        dom: {\n          tag: \"div\",\n          classes: [\"tox-form__group\"]\n        },\n        components: ft([u.toArray(), [a]]),\n        fieldBehaviours: nc([gd.config({\n          disabled: rt(e.disabled),\n          onDisabled: function onDisabled(t) {\n            my.getField(t).each(gd.disable);\n          },\n          onEnabled: function onEnabled(t) {\n            my.getField(t).each(gd.enable);\n          }\n        })])\n      });\n      var e, o, r, i, u, a;\n    }),\n    selectbox: pk(function (t, n) {\n      return e = t, o = n.shared.providers, r = M(e.items, function (t) {\n        return {\n          text: o.translate(t.text),\n          value: t.value\n        };\n      }), i = e.label.map(function (t) {\n        return oy(t, o);\n      }), u = {\n        dom: {\n          tag: \"div\",\n          classes: [\"tox-selectfield\"]\n        },\n        components: ft([[my.parts.field({\n          dom: {},\n          selectAttributes: {\n            size: e.size\n          },\n          options: r,\n          factory: i1,\n          selectBehaviours: nc([gd.config({\n            disabled: function disabled() {\n              return e.disabled || o.isDisabled();\n            }\n          }), py.config({}), mm(\"selectbox-change\", [Cr(ki(), function (t, n) {\n            br(t, yy, {\n              name: e.name\n            });\n          })])])\n        })], (1 < e.size ? vt.none() : vt.some(Xm(\"chevron-down\", {\n          tag: \"div\",\n          classes: [\"tox-selectfield__icon-js\"]\n        }, o.icons))).toArray()])\n      }, my.sketch({\n        dom: {\n          tag: \"div\",\n          classes: [\"tox-form__group\"]\n        },\n        components: ft([i.toArray(), [u]]),\n        fieldBehaviours: nc([gd.config({\n          disabled: function disabled() {\n            return e.disabled || o.isDisabled();\n          },\n          onDisabled: function onDisabled(t) {\n            my.getField(t).each(gd.disable);\n          },\n          onEnabled: function onEnabled(t) {\n            my.getField(t).each(gd.enable);\n          }\n        }), pv()])\n      });\n      var e, o, r, i, u;\n    }),\n    sizeinput: pk(function (t, n) {\n      return ow(t, n.shared.providers);\n    }),\n    urlinput: pk(function (t, n) {\n      return gk(t, n, n.urlinput);\n    }),\n    customeditor: pk(function (e) {\n      var o = gc(),\n          n = zm({\n        dom: {\n          tag: e.tag\n        }\n      }),\n          r = gc();\n      return {\n        dom: {\n          tag: \"div\",\n          classes: [\"tox-custom-editor\"]\n        },\n        behaviours: nc([mm(\"custom-editor-events\", [ou(function (t) {\n          n.getOpt(t).each(function (n) {\n            (Tt(e, \"init\") ? e.init(n.element.dom) : lS.load(e.scriptId, e.scriptUrl).then(function (t) {\n              return t(n.element.dom, e.settings);\n            })).then(function (n) {\n              r.on(function (t) {\n                n.setValue(t);\n              }), r.clear(), o.set(n);\n            });\n          });\n        })]), Df.config({\n          store: {\n            mode: \"manual\",\n            getValue: function getValue() {\n              return o.get().fold(function () {\n                return r.get().getOr(\"\");\n              }, function (t) {\n                return t.getValue();\n              });\n            },\n            setValue: function setValue(t, n) {\n              o.get().fold(function () {\n                r.set(n);\n              }, function (t) {\n                return t.setValue(n);\n              });\n            }\n          }\n        }), aw()]),\n        components: [n.asSpec()]\n      };\n    }),\n    htmlpanel: pk(function (t) {\n      return \"presentation\" === t.presets ? ly.sketch({\n        dom: {\n          tag: \"div\",\n          classes: [\"tox-form__group\"],\n          innerHtml: t.html\n        }\n      }) : ly.sketch({\n        dom: {\n          tag: \"div\",\n          classes: [\"tox-form__group\"],\n          innerHtml: t.html,\n          attributes: {\n            role: \"document\"\n          }\n        },\n        containerBehaviours: nc([py.config({}), Hg.config({})])\n      });\n    }),\n    imagetools: pk(function (t, n) {\n      return ok(t, n.shared.providers);\n    }),\n    table: pk(function (t, n) {\n      return ik(t, n.shared.providers);\n    }),\n    panel: pk(function (t, n) {\n      return {\n        dom: {\n          tag: \"div\",\n          classes: t.classes\n        },\n        components: M(t.items, n.shared.interpreter)\n      };\n    })\n  },\n      y1 = {\n    field: function field(t, n) {\n      return n;\n    }\n  },\n      x1 = function x1(n, e, o) {\n    return tt(b1, e.type).fold(function () {\n      return console.error('Unknown factory type \"' + e.type + '\", defaulting to container: ', e), e;\n    }, function (t) {\n      return t(n, e, o);\n    });\n  },\n      w1 = {\n    valignCentre: [],\n    alignCentre: [],\n    alignLeft: [],\n    alignRight: [],\n    right: [],\n    left: [],\n    bottom: [],\n    top: []\n  },\n      S1 = [{\n    title: \"Headings\",\n    items: [{\n      title: \"Heading 1\",\n      format: \"h1\"\n    }, {\n      title: \"Heading 2\",\n      format: \"h2\"\n    }, {\n      title: \"Heading 3\",\n      format: \"h3\"\n    }, {\n      title: \"Heading 4\",\n      format: \"h4\"\n    }, {\n      title: \"Heading 5\",\n      format: \"h5\"\n    }, {\n      title: \"Heading 6\",\n      format: \"h6\"\n    }]\n  }, {\n    title: \"Inline\",\n    items: [{\n      title: \"Bold\",\n      format: \"bold\"\n    }, {\n      title: \"Italic\",\n      format: \"italic\"\n    }, {\n      title: \"Underline\",\n      format: \"underline\"\n    }, {\n      title: \"Strikethrough\",\n      format: \"strikethrough\"\n    }, {\n      title: \"Superscript\",\n      format: \"superscript\"\n    }, {\n      title: \"Subscript\",\n      format: \"subscript\"\n    }, {\n      title: \"Code\",\n      format: \"code\"\n    }]\n  }, {\n    title: \"Blocks\",\n    items: [{\n      title: \"Paragraph\",\n      format: \"p\"\n    }, {\n      title: \"Blockquote\",\n      format: \"blockquote\"\n    }, {\n      title: \"Div\",\n      format: \"div\"\n    }, {\n      title: \"Pre\",\n      format: \"pre\"\n    }]\n  }, {\n    title: \"Align\",\n    items: [{\n      title: \"Left\",\n      format: \"alignleft\"\n    }, {\n      title: \"Center\",\n      format: \"aligncenter\"\n    }, {\n      title: \"Right\",\n      format: \"alignright\"\n    }, {\n      title: \"Justify\",\n      format: \"alignjustify\"\n    }]\n  }],\n      k1 = function k1(t) {\n    return R(t, function (t, n) {\n      if (Tt(n, \"items\")) {\n        var e = k1(n.items);\n        return {\n          customFormats: t.customFormats.concat(e.customFormats),\n          formats: t.formats.concat([{\n            title: n.title,\n            items: e.formats\n          }])\n        };\n      }\n\n      if (Tt(n, \"inline\") || Tt(n, \"block\") || Tt(n, \"selector\")) {\n        var o = \"custom-\" + (y(n.name) ? n.name : n.title.toLowerCase());\n        return {\n          customFormats: t.customFormats.concat([{\n            name: o,\n            format: n\n          }]),\n          formats: t.formats.concat([{\n            title: n.title,\n            format: o,\n            icon: n.icon\n          }])\n        };\n      }\n\n      return _lt(_lt({}, t), {\n        formats: t.formats.concat(n)\n      });\n    }, {\n      customFormats: [],\n      formats: []\n    });\n  },\n      C1 = fS.trim,\n      O1 = wk(\"true\"),\n      _1 = wk(\"false\"),\n      T1 = function T1(t) {\n    var n = M(vs(At.fromDom(t), \"h1,h2,h3,h4,h5,h6,a:not([href])\"), function (t) {\n      return t.dom;\n    });\n    return F(M(F(n, _k), Tk).concat(M(F(n, Ck), Ek)), Dk);\n  },\n      E1 = \"tinymce-url-history\",\n      D1 = od,\n      B1 = nd,\n      M1 = rt([Eo(\"shell\", !1), mo(\"makeItem\"), Eo(\"setupItem\", st), Bf(\"listBehaviours\", [Rg])]),\n      A1 = rt([Qf({\n    name: \"items\",\n    overrides: function overrides() {\n      return {\n        behaviours: nc([Rg.config({})])\n      };\n    }\n  })]),\n      F1 = Cl({\n    name: rt(\"CustomList\")(),\n    configFields: M1(),\n    partFields: A1(),\n    factory: function factory(s, t, n, e) {\n      var o = s.shell ? {\n        behaviours: [Rg.config({})],\n        components: []\n      } : {\n        behaviours: [],\n        components: t\n      };\n      return {\n        uid: s.uid,\n        dom: s.dom,\n        components: o.components,\n        behaviours: nl(s.listBehaviours, o.behaviours),\n        apis: {\n          setItems: function setItems(a, c) {\n            var t;\n            t = a, (s.shell ? vt.some(t) : ml(t, s, \"items\")).fold(function () {\n              throw console.error(\"Custom List was defined to not be a shell, but no item container was specified in components\"), new Error(\"Custom List was defined to not be a shell, but no item container was specified in components\");\n            }, function (n) {\n              var t = Rg.contents(n),\n                  e = c.length,\n                  o = e - t.length,\n                  r = 0 < o ? m(o, function () {\n                return s.makeItem();\n              }) : [],\n                  i = t.slice(e);\n              St(i, function (t) {\n                return Rg.remove(n, t);\n              }), St(r, function (t) {\n                return Rg.append(n, t);\n              });\n              var u = Rg.contents(n);\n              St(u, function (t, n) {\n                s.setupItem(a, t, c[n], n);\n              });\n            });\n          }\n        }\n      };\n    },\n    apis: {\n      setItems: function setItems(t, n, e) {\n        t.setItems(n, e);\n      }\n    }\n  }),\n      I1 = rt([mo(\"dom\"), Eo(\"shell\", !0), Zs(\"toolbarBehaviours\", [Rg])]),\n      R1 = rt([Qf({\n    name: \"groups\",\n    overrides: function overrides() {\n      return {\n        behaviours: nc([Rg.config({})])\n      };\n    }\n  })]),\n      V1 = Cl({\n    name: \"Toolbar\",\n    configFields: I1(),\n    partFields: R1(),\n    factory: function factory(o, t, n, e) {\n      var r = o.shell ? {\n        behaviours: [Rg.config({})],\n        components: []\n      } : {\n        behaviours: [],\n        components: t\n      };\n      return {\n        uid: o.uid,\n        dom: o.dom,\n        components: r.components,\n        behaviours: nl(o.toolbarBehaviours, r.behaviours),\n        apis: {\n          setGroups: function setGroups(t, n) {\n            var e;\n            e = t, (o.shell ? vt.some(e) : ml(e, o, \"groups\")).fold(function () {\n              throw console.error(\"Toolbar was defined to not be a shell, but no groups container was specified in components\"), new Error(\"Toolbar was defined to not be a shell, but no groups container was specified in components\");\n            }, function (t) {\n              Rg.set(t, n);\n            });\n          }\n        },\n        domModification: {\n          attributes: {\n            role: \"group\"\n          }\n        }\n      };\n    },\n    apis: {\n      setGroups: function setGroups(t, n, e) {\n        t.setGroups(n, e);\n      }\n    }\n  }),\n      P1 = rt([]),\n      H1 = Object.freeze({\n    __proto__: null,\n    setup: st,\n    isDocked: T,\n    getBehaviours: P1\n  }),\n      z1 = Ho([{\n    \"static\": []\n  }, {\n    absolute: [\"positionCss\"]\n  }, {\n    fixed: [\"positionCss\"]\n  }]),\n      N1 = function N1(t, n, e) {\n    var o, r, i, u;\n    t.getSystem().isConnected() && (i = e, u = (r = n).lazyViewport(o = t), i.isDocked() && $k(o, r, i, u), qk(o, u, i).each(function (t) {\n      t.fold(function () {\n        return Kk(o, r, i);\n      }, function (t) {\n        return Jk(o, r, i, t);\n      }, function (t) {\n        $k(o, r, i, u, !0), Jk(o, r, i, t);\n      });\n    }));\n  },\n      L1 = Object.freeze({\n    __proto__: null,\n    refresh: N1,\n    reset: Qk,\n    isDocked: function isDocked(t, n, e) {\n      return e.isDocked();\n    },\n    getModes: function getModes(t, n, e) {\n      return e.getModes();\n    },\n    setModes: function setModes(t, n, e, o) {\n      return e.setModes(o);\n    }\n  }),\n      W1 = Object.freeze({\n    __proto__: null,\n    events: function events(o, r) {\n      return eu([Br(_i(), function (n, e) {\n        o.contextual.each(function (t) {\n          Kr(n.element, t.transitionClass) && ($r(n.element, [t.transitionClass, t.fadeInClass]), (r.isVisible() ? t.onShown : t.onHidden)(n)), e.stop();\n        });\n      }), Cr(Ui(), function (t, n) {\n        N1(t, o, r);\n      }), Cr(ji(), function (t, n) {\n        Qk(t, o, r);\n      })]);\n    }\n  }),\n      U1 = xa({\n    fields: [To(\"contextual\", [po(\"fadeInClass\"), po(\"fadeOutClass\"), po(\"transitionClass\"), vo(\"lazyContext\"), Ju(\"onShow\"), Ju(\"onShown\"), Ju(\"onHide\"), Ju(\"onHidden\")]), Io(\"lazyViewport\", Fe), Ro(\"modes\", [\"top\", \"bottom\"], nr), Ju(\"onDocked\"), Ju(\"onUndocked\")],\n    name: \"docking\",\n    active: W1,\n    apis: L1,\n    state: Object.freeze({\n      __proto__: null,\n      init: function init(t) {\n        var n = Po(!1),\n            e = Po(!0),\n            o = gc(),\n            r = Po(t.modes);\n        return wu({\n          isDocked: n.get,\n          setDocked: n.set,\n          getInitialPos: o.get,\n          setInitialPos: o.set,\n          clearInitialPos: o.clear,\n          isVisible: e.get,\n          setVisible: e.set,\n          getModes: r.get,\n          setModes: r.set,\n          readState: function readState() {\n            return \"docked:  \" + n.get() + \", visible: \" + e.get() + \", modes: \" + r.get().join(\",\");\n          }\n        });\n      }\n    })\n  }),\n      j1 = rt(Ir(\"toolbar-height-change\")),\n      G1 = {\n    fadeInClass: \"tox-editor-dock-fadein\",\n    fadeOutClass: \"tox-editor-dock-fadeout\",\n    transitionClass: \"tox-editor-dock-transition\"\n  },\n      X1 = \"tox-tinymce--toolbar-sticky-on\",\n      Y1 = \"tox-tinymce--toolbar-sticky-off\",\n      q1 = Object.freeze({\n    __proto__: null,\n    setup: function setup(t, n, e) {\n      t.inline || (n.header.isPositionedAtTop() || t.on(\"ResizeEditor\", function () {\n        e().each(U1.reset);\n      }), t.on(\"ResizeWindow ResizeEditor\", function () {\n        e().each(tC);\n      }), t.on(\"SkinLoaded\", function () {\n        e().each(function (t) {\n          U1.isDocked(t) ? U1.reset(t) : U1.refresh(t);\n        });\n      }), t.on(\"FullscreenStateChanged\", function () {\n        e().each(U1.reset);\n      })), t.on(\"AfterScrollIntoView\", function (b) {\n        e().each(function (t) {\n          U1.refresh(t);\n          var n,\n              e,\n              o,\n              r,\n              i,\n              u,\n              a,\n              c,\n              s,\n              l,\n              f,\n              d,\n              m,\n              g,\n              p,\n              h,\n              v = t.element;\n          Pd(v) && (n = b, r = (o = Ut(e = v)).dom.defaultView.innerHeight, i = Rn(o), a = Nn(u = At.fromDom(n.elm)), c = wn(u), l = (s = a.y) + c, f = Cn(e), d = wn(e), g = (m = f.top) + d, p = Math.abs(m - i.top) < 2, h = Math.abs(g - (i.top + r)) < 2, p && s < g ? Vn(i.left, s - d, o) : h && m < l && Vn(i.left, s - r + c + d, o));\n        });\n      }), t.on(\"PostRender\", function () {\n        eC(t, !1);\n      });\n    },\n    isDocked: function isDocked(t) {\n      return t().map(U1.isDocked).getOr(!1);\n    },\n    getBehaviours: oC\n  }),\n      K1 = $o([po(\"type\"), go(\"items\", eo([Qo([po(\"name\"), xo(\"items\", nr)]), nr]))].concat(Hp)),\n      J1 = [Co(\"text\"), Co(\"tooltip\"), Co(\"icon\"), vo(\"fetch\"), Io(\"onSetup\", function () {\n    return st;\n  })],\n      $1 = $o(H([po(\"type\")], J1, !0)),\n      Q1 = $o([po(\"type\"), Co(\"tooltip\"), Co(\"icon\"), Co(\"text\"), Oo(\"select\"), vo(\"fetch\"), Io(\"onSetup\", function () {\n    return st;\n  }), Ao(\"presets\", \"normal\", [\"normal\", \"color\", \"listpreview\"]), Eo(\"columns\", 1), vo(\"onAction\"), vo(\"onItemAction\")]),\n      Z1 = kl({\n    factory: function factory(n, o) {\n      var t = {\n        focus: Fg.focusIn,\n        setMenus: function setMenus(t, n) {\n          var e = M(n, function (n) {\n            return G0(rC({\n              type: \"menubutton\",\n              text: n.text,\n              fetch: function fetch(t) {\n                t(n.getItems());\n              }\n            }).mapError(function (t) {\n              return ur(t);\n            }).getOrDie(), \"tox-mbtn\", o.backstage, vt.some(\"menuitem\"));\n          });\n          Rg.set(t, e);\n        }\n      };\n      return {\n        uid: n.uid,\n        dom: n.dom,\n        components: [],\n        behaviours: nc([Rg.config({}), mm(\"menubar-events\", [ou(function (t) {\n          n.onSetup(t);\n        }), Cr(vi(), function (e, t) {\n          Iu(e.element, \".tox-mbtn--active\").each(function (n) {\n            Ru(t.event.target, \".tox-mbtn\").each(function (t) {\n              Lt(n, t) || e.getSystem().getByDom(n).each(function (n) {\n                e.getSystem().getByDom(t).each(function (t) {\n                  hw.expand(t), hw.close(n), Hg.focus(t);\n                });\n              });\n            });\n          });\n        }), Cr(Ki(), function (e, t) {\n          t.event.prevFocus.bind(function (t) {\n            return e.getSystem().getByDom(t).toOptional();\n          }).each(function (n) {\n            t.event.newFocus.bind(function (t) {\n              return e.getSystem().getByDom(t).toOptional();\n            }).each(function (t) {\n              hw.isOpen(n) && (hw.expand(t), hw.close(n));\n            });\n          });\n        })]), Fg.config({\n          mode: \"flow\",\n          selector: \".tox-mbtn\",\n          onEscape: function onEscape(t) {\n            return n.onEscape(t), vt.some(!0);\n          }\n        }), py.config({})]),\n        apis: t,\n        domModification: {\n          attributes: {\n            role: \"menubar\"\n          }\n        }\n      };\n    },\n    name: \"silver.Menubar\",\n    configFields: [mo(\"dom\"), mo(\"uid\"), mo(\"onEscape\"), mo(\"backstage\"), Eo(\"onSetup\", st)],\n    apis: {\n      focus: function focus(t, n) {\n        t.focus(n);\n      },\n      setMenus: function setMenus(t, n, e) {\n        t.setMenus(n, e);\n      }\n    }\n  }),\n      tO = Object.freeze({\n    __proto__: null,\n    refresh: function refresh(t, n, e) {\n      var o;\n      e.isExpanded() && (bn(t.element, uC(n)), o = aC(n, t.element), dn(t.element, uC(n), o));\n    },\n    grow: function grow(t, n, e) {\n      e.isExpanded() || mC(t, n, e);\n    },\n    shrink: function shrink(t, n, e) {\n      e.isExpanded() && dC(t, n, e);\n    },\n    immediateShrink: function immediateShrink(t, n, e) {\n      e.isExpanded() && fC(t, n, e);\n    },\n    hasGrown: function hasGrown(t, n, e) {\n      return e.isExpanded();\n    },\n    hasShrunk: function hasShrunk(t, n, e) {\n      return e.isCollapsed();\n    },\n    isGrowing: gC,\n    isShrinking: pC,\n    isTransitioning: function isTransitioning(t, n, e) {\n      return gC(t, n) || pC(t, n);\n    },\n    toggleGrow: function toggleGrow(t, n, e) {\n      (e.isExpanded() ? dC : mC)(t, n, e);\n    },\n    disableTransitions: cC\n  }),\n      nO = Object.freeze({\n    __proto__: null,\n    exhibit: function exhibit(t, n, e) {\n      return Lr(n.expanded ? {\n        classes: [n.openClass],\n        styles: {}\n      } : {\n        classes: [n.closedClass],\n        styles: sr(n.dimension.property, \"0px\")\n      });\n    },\n    events: function events(e, o) {\n      return eu([Br(_i(), function (t, n) {\n        n.event.raw.propertyName === e.dimension.property && (cC(t, e), o.isExpanded() && bn(t.element, e.dimension.property), (o.isExpanded() ? e.onGrown : e.onShrunk)(t));\n      })]);\n    }\n  }),\n      eO = xa({\n    fields: [mo(\"closedClass\"), mo(\"openClass\"), mo(\"shrinkingClass\"), mo(\"growingClass\"), wo(\"getAnimationRoot\"), Ju(\"onShrunk\"), Ju(\"onStartShrink\"), Ju(\"onGrown\"), Ju(\"onStartGrow\"), Eo(\"expanded\", !1), go(\"dimension\", lo(\"property\", {\n      width: [ta(\"property\", \"width\"), ta(\"getDimension\", function (t) {\n        return On(t) + \"px\";\n      })],\n      height: [ta(\"property\", \"height\"), ta(\"getDimension\", function (t) {\n        return wn(t) + \"px\";\n      })]\n    }))],\n    name: \"sliding\",\n    active: nO,\n    apis: tO,\n    state: Object.freeze({\n      __proto__: null,\n      init: function init(t) {\n        var n = Po(t.expanded);\n        return wu({\n          isExpanded: function isExpanded() {\n            return !0 === n.get();\n          },\n          isCollapsed: function isCollapsed() {\n            return !1 === n.get();\n          },\n          setCollapsed: C(n.set, !1),\n          setExpanded: C(n.set, !0),\n          readState: function readState() {\n            return \"expanded: \" + n.get();\n          }\n        });\n      }\n    })\n  }),\n      oO = \"container\",\n      rO = [Zs(\"slotBehaviours\", [])],\n      iO = dt({\n    getSlotNames: function getSlotNames(t, n) {\n      return t.getSlotNames(n);\n    },\n    getSlot: function getSlot(t, n, e) {\n      return t.getSlot(n, e);\n    },\n    isShowing: function isShowing(t, n, e) {\n      return t.isShowing(n, e);\n    },\n    hideSlot: function hideSlot(t, n, e) {\n      return t.hideSlot(n, e);\n    },\n    hideAllSlots: function hideAllSlots(t, n) {\n      return t.hideAllSlots(n);\n    },\n    showSlot: function showSlot(t, n, e) {\n      return t.showSlot(n, e);\n    }\n  }, zr),\n      uO = _lt(_lt({}, iO), {\n    sketch: function sketch(t) {\n      var e,\n          n = {\n        slot: function slot(t, n) {\n          return e.push(t), cl(oO, hC(t), n);\n        },\n        record: rt(e = [])\n      },\n          o = t(n),\n          r = M(n.record(), function (t) {\n        return Jf({\n          name: t,\n          pname: hC(t)\n        });\n      });\n      return Sl(oO, rO, r, $C, o);\n    }\n  }),\n      aO = $o([Co(\"icon\"), Co(\"tooltip\"), Io(\"onShow\", st), Io(\"onHide\", st), Io(\"onSetup\", function () {\n    return st;\n  })]),\n      cO = Ir(\"FixSizeEvent\"),\n      sO = Ir(\"AutoSizeEvent\"),\n      lO = Object.freeze({\n    __proto__: null,\n    block: function block(t, n, e, o) {\n      on(t.element, \"aria-busy\", !0);\n      var r = n.getRoot(t).getOr(t),\n          i = nc([Fg.config({\n        mode: \"special\",\n        onTab: function onTab() {\n          return vt.some(!0);\n        },\n        onShiftTab: function onShiftTab() {\n          return vt.some(!0);\n        }\n      }), Hg.config({})]),\n          u = o(r, i),\n          a = r.getSystem().build(u);\n      Rg.append(r, Eu(a)), a.hasConfigured(Fg) && n.focus && Fg.focusIn(a), e.isBlocked() || n.onBlock(t), e.blockWith(function () {\n        return Rg.remove(r, a);\n      });\n    },\n    unblock: function unblock(t, n, e) {\n      sn(t.element, \"aria-busy\"), e.isBlocked() && n.onUnblock(t), e.clear();\n    }\n  }),\n      fO = xa({\n    fields: [Io(\"getRoot\", vt.none), Fo(\"focus\", !0), Ju(\"onBlock\"), Ju(\"onUnblock\")],\n    name: \"blocking\",\n    apis: lO,\n    state: Object.freeze({\n      __proto__: null,\n      init: function init() {\n        var n = dc();\n        return wu({\n          readState: n.isSet,\n          blockWith: function blockWith(t) {\n            n.set({\n              destroy: t\n            });\n          },\n          clear: n.clear,\n          isBlocked: n.isSet\n        });\n      }\n    })\n  }),\n      dO = rt([Zs(\"splitToolbarBehaviours\", [$y]), cr(\"builtGroups\", function () {\n    return Po([]);\n  })]),\n      mO = rt([qu([\"overflowToggledClass\"]), Oo(\"getOverflowBounds\"), mo(\"lazySink\"), cr(\"overflowGroups\", function () {\n    return Po([]);\n  })].concat(dO())),\n      gO = rt([Jf({\n    factory: V1,\n    schema: I1(),\n    name: \"primary\"\n  }), $f({\n    schema: I1(),\n    name: \"overflow\"\n  }), $f({\n    name: \"overflow-button\"\n  }), $f({\n    name: \"overflow-group\"\n  })]),\n      pO = rt(function (t, n) {\n    var e = t,\n        o = Math.floor(n);\n    dn(e, \"max-width\", Oe.max(e, o, [\"margin-left\", \"border-left-width\", \"padding-left\", \"padding-right\", \"border-right-width\", \"margin-right\"]) + \"px\");\n  }),\n      hO = rt([qu([\"toggledClass\"]), mo(\"lazySink\"), vo(\"fetch\"), Oo(\"getBounds\"), To(\"fireDismissalEventInstead\", [Eo(\"event\", Yi())]), Wc()]),\n      vO = rt([$f({\n    name: \"button\",\n    overrides: function overrides(t) {\n      return {\n        dom: {\n          attributes: {\n            \"aria-haspopup\": \"true\"\n          }\n        },\n        buttonBehaviours: nc([Lg.config({\n          toggleClass: t.markers.toggledClass,\n          aria: {\n            mode: \"expanded\"\n          },\n          toggleOnExecute: !1\n        })])\n      };\n    }\n  }), $f({\n    factory: V1,\n    schema: I1(),\n    name: \"toolbar\",\n    overrides: function overrides(n) {\n      return {\n        toolbarBehaviours: nc([Fg.config({\n          mode: \"cyclic\",\n          onEscape: function onEscape(t) {\n            return ml(t, n, \"button\").each(Hg.focus), vt.none();\n          }\n        })])\n      };\n    }\n  })]),\n      bO = Cl({\n    name: \"FloatingToolbarButton\",\n    factory: function factory(u, t, a, n) {\n      return _lt(_lt({}, fp.sketch(_lt(_lt({}, n.button()), {\n        action: function action(t) {\n          EC(t, n);\n        },\n        buttonBehaviours: Mf({\n          dump: n.button().buttonBehaviours\n        }, [$y.config({\n          others: {\n            toolbarSandbox: function toolbarSandbox(t) {\n              return o = t, e = a, r = u, {\n                dom: {\n                  tag: \"div\",\n                  attributes: {\n                    id: (i = Vu()).id\n                  }\n                },\n                behaviours: nc([Fg.config({\n                  mode: \"special\",\n                  onEscape: function onEscape(t) {\n                    return bf.close(t), vt.some(!0);\n                  }\n                }), bf.config({\n                  onOpen: function onOpen(t, n) {\n                    r.fetch().get(function (t) {\n                      BC(o, n, r, e.layouts, t), i.link(o.element), Fg.focusIn(n);\n                    });\n                  },\n                  onClose: function onClose() {\n                    Lg.off(o), Hg.focus(o), i.unlink(o.element);\n                  },\n                  isPartOf: function isPartOf(t, n, e) {\n                    return zu(n, e) || zu(o, e);\n                  },\n                  getAttachPoint: function getAttachPoint() {\n                    return r.lazySink(o).getOrDie();\n                  }\n                }), ic.config({\n                  channels: _lt(_lt({}, Xs(_lt({\n                    isExtraPart: T\n                  }, r.fireDismissalEventInstead.map(function (t) {\n                    return {\n                      fireEventInstead: {\n                        event: t.event\n                      }\n                    };\n                  }).getOr({})))), Ys({\n                    doReposition: function doReposition() {\n                      bf.getState($y.getCoupled(o, \"toolbarSandbox\")).each(function (t) {\n                        DC(o, t, r, e.layouts);\n                      });\n                    }\n                  }))\n                })])\n              };\n              var o, e, r, i;\n            }\n          }\n        })])\n      }))), {\n        apis: {\n          setGroups: function setGroups(n, e) {\n            bf.getState($y.getCoupled(n, \"toolbarSandbox\")).each(function (t) {\n              BC(n, t, u, a.layouts, e);\n            });\n          },\n          reposition: function reposition(n) {\n            bf.getState($y.getCoupled(n, \"toolbarSandbox\")).each(function (t) {\n              DC(n, t, u, a.layouts);\n            });\n          },\n          toggle: function toggle(t) {\n            EC(t, n);\n          },\n          getToolbar: function getToolbar(t) {\n            return bf.getState($y.getCoupled(t, \"toolbarSandbox\"));\n          },\n          isOpen: function isOpen(t) {\n            return bf.isOpen($y.getCoupled(t, \"toolbarSandbox\"));\n          }\n        }\n      });\n    },\n    configFields: hO(),\n    partFields: vO(),\n    apis: {\n      setGroups: function setGroups(t, n, e) {\n        t.setGroups(n, e);\n      },\n      reposition: function reposition(t, n) {\n        t.reposition(n);\n      },\n      toggle: function toggle(t, n) {\n        t.toggle(n);\n      },\n      getToolbar: function getToolbar(t, n) {\n        return t.getToolbar(n);\n      },\n      isOpen: function isOpen(t, n) {\n        return t.isOpen(n);\n      }\n    }\n  }),\n      yO = rt([mo(\"items\"), qu([\"itemSelector\"]), Zs(\"tgroupBehaviours\", [Fg])]),\n      xO = rt([Zf({\n    name: \"items\",\n    unit: \"item\"\n  })]),\n      wO = Cl({\n    name: \"ToolbarGroup\",\n    configFields: yO(),\n    partFields: xO(),\n    factory: function factory(t, n, e, o) {\n      return {\n        uid: t.uid,\n        dom: t.dom,\n        components: n,\n        behaviours: nl(t.tgroupBehaviours, [Fg.config({\n          mode: \"flow\",\n          selector: t.markers.itemSelector\n        })]),\n        domModification: {\n          attributes: {\n            role: \"toolbar\"\n          }\n        }\n      };\n    }\n  }),\n      SO = Cl({\n    name: \"SplitFloatingToolbar\",\n    configFields: mO(),\n    partFields: gO(),\n    factory: function factory(e, t, n, o) {\n      var r = zm(bO.sketch({\n        fetch: function fetch() {\n          return jy(function (t) {\n            t(MC(e.overflowGroups.get()));\n          });\n        },\n        layouts: {\n          onLtr: function onLtr() {\n            return [Ya, Xa];\n          },\n          onRtl: function onRtl() {\n            return [Xa, Ya];\n          },\n          onBottomLtr: function onBottomLtr() {\n            return [Ka, qa];\n          },\n          onBottomRtl: function onBottomRtl() {\n            return [qa, Ka];\n          }\n        },\n        getBounds: n.getOverflowBounds,\n        lazySink: e.lazySink,\n        fireDismissalEventInstead: {},\n        markers: {\n          toggledClass: e.markers.overflowToggledClass\n        },\n        parts: {\n          button: o[\"overflow-button\"](),\n          toolbar: o.overflow()\n        }\n      }));\n      return {\n        uid: e.uid,\n        dom: e.dom,\n        components: t,\n        behaviours: nl(e.splitToolbarBehaviours, [$y.config({\n          others: {\n            overflowGroup: function overflowGroup() {\n              return wO.sketch(_lt(_lt({}, o[\"overflow-group\"]()), {\n                items: [r.asSpec()]\n              }));\n            }\n          }\n        })]),\n        apis: {\n          setGroups: function setGroups(t, n) {\n            e.builtGroups.set(M(n, t.getSystem().build)), AC(t, r, e);\n          },\n          refresh: function refresh(t) {\n            return AC(t, r, e);\n          },\n          toggle: function toggle(t) {\n            r.getOpt(t).each(function (t) {\n              bO.toggle(t);\n            });\n          },\n          isOpen: function isOpen(t) {\n            return r.getOpt(t).map(bO.isOpen).getOr(!1);\n          },\n          reposition: function reposition(t) {\n            r.getOpt(t).each(function (t) {\n              bO.reposition(t);\n            });\n          },\n          getOverflow: function getOverflow(t) {\n            return r.getOpt(t).bind(bO.getToolbar);\n          }\n        },\n        domModification: {\n          attributes: {\n            role: \"group\"\n          }\n        }\n      };\n    },\n    apis: {\n      setGroups: function setGroups(t, n, e) {\n        t.setGroups(n, e);\n      },\n      refresh: function refresh(t, n) {\n        t.refresh(n);\n      },\n      reposition: function reposition(t, n) {\n        t.reposition(n);\n      },\n      toggle: function toggle(t, n) {\n        t.toggle(n);\n      },\n      isOpen: function isOpen(t, n) {\n        return t.isOpen(n);\n      },\n      getOverflow: function getOverflow(t, n) {\n        return t.getOverflow(n);\n      }\n    }\n  }),\n      kO = rt([qu([\"closedClass\", \"openClass\", \"shrinkingClass\", \"growingClass\", \"overflowToggledClass\"]), Ju(\"onOpened\"), Ju(\"onClosed\")].concat(dO())),\n      CO = rt([Jf({\n    factory: V1,\n    schema: I1(),\n    name: \"primary\"\n  }), Jf({\n    factory: V1,\n    schema: I1(),\n    name: \"overflow\",\n    overrides: function overrides(n) {\n      return {\n        toolbarBehaviours: nc([eO.config({\n          dimension: {\n            property: \"height\"\n          },\n          closedClass: n.markers.closedClass,\n          openClass: n.markers.openClass,\n          shrinkingClass: n.markers.shrinkingClass,\n          growingClass: n.markers.growingClass,\n          onShrunk: function onShrunk(t) {\n            ml(t, n, \"overflow-button\").each(function (t) {\n              Lg.off(t), Hg.focus(t);\n            }), n.onClosed(t);\n          },\n          onGrown: function onGrown(t) {\n            Fg.focusIn(t), n.onOpened(t);\n          },\n          onStartGrow: function onStartGrow(t) {\n            ml(t, n, \"overflow-button\").each(Lg.on);\n          }\n        }), Fg.config({\n          mode: \"acyclic\",\n          onEscape: function onEscape(t) {\n            return ml(t, n, \"overflow-button\").each(Hg.focus), vt.some(!0);\n          }\n        })])\n      };\n    }\n  }), $f({\n    name: \"overflow-button\",\n    overrides: function overrides(t) {\n      return {\n        buttonBehaviours: nc([Lg.config({\n          toggleClass: t.markers.overflowToggledClass,\n          aria: {\n            mode: \"pressed\"\n          },\n          toggleOnExecute: !1\n        })])\n      };\n    }\n  }), $f({\n    name: \"overflow-group\"\n  })]),\n      OO = Cl({\n    name: \"SplitSlidingToolbar\",\n    configFields: kO(),\n    partFields: CO(),\n    factory: function factory(o, t, n, e) {\n      var r = \"alloy.toolbar.toggle\";\n      return {\n        uid: o.uid,\n        dom: o.dom,\n        components: t,\n        behaviours: nl(o.splitToolbarBehaviours, [$y.config({\n          others: {\n            overflowGroup: function overflowGroup(n) {\n              return wO.sketch(_lt(_lt({}, e[\"overflow-group\"]()), {\n                items: [fp.sketch(_lt(_lt({}, e[\"overflow-button\"]()), {\n                  action: function action(t) {\n                    vr(n, r);\n                  }\n                }))]\n              }));\n            }\n          }\n        }), mm(\"toolbar-toggle-events\", [Cr(r, function (t) {\n          FC(t, o);\n        })])]),\n        apis: {\n          setGroups: function setGroups(t, n) {\n            var e = M(n, t.getSystem().build);\n            o.builtGroups.set(e), QC(t, o);\n          },\n          refresh: function refresh(t) {\n            return QC(t, o);\n          },\n          toggle: function toggle(t) {\n            return FC(t, o);\n          },\n          isOpen: function isOpen(t) {\n            return ml(t, o, \"overflow\").map(eO.hasGrown).getOr(!1);\n          }\n        },\n        domModification: {\n          attributes: {\n            role: \"group\"\n          }\n        }\n      };\n    },\n    apis: {\n      setGroups: function setGroups(t, n, e) {\n        t.setGroups(n, e);\n      },\n      refresh: function refresh(t, n) {\n        t.refresh(n);\n      },\n      toggle: function toggle(t, n) {\n        t.toggle(n);\n      },\n      isOpen: function isOpen(t, n) {\n        return t.isOpen(n);\n      }\n    }\n  }),\n      _O = B1.optional({\n    factory: Z1,\n    name: \"menubar\",\n    schema: [mo(\"backstage\")]\n  }),\n      TO = B1.optional({\n    factory: {\n      sketch: function sketch(t) {\n        return F1.sketch({\n          uid: t.uid,\n          dom: t.dom,\n          listBehaviours: nc([Fg.config({\n            mode: \"acyclic\",\n            selector: \".tox-toolbar\"\n          })]),\n          makeItem: function makeItem() {\n            return HC({\n              type: t.type,\n              uid: Ir(\"multiple-toolbar-item\"),\n              cyclicKeying: !1,\n              initGroups: [],\n              providers: t.providers,\n              onEscape: function onEscape() {\n                return t.onEscape(), vt.some(!0);\n              }\n            });\n          },\n          setupItem: function setupItem(t, n, e, o) {\n            V1.setGroups(n, e);\n          },\n          shell: !0\n        });\n      }\n    },\n    name: \"multiple-toolbar\",\n    schema: [mo(\"dom\"), mo(\"onEscape\")]\n  }),\n      EO = B1.optional({\n    factory: {\n      sketch: function sketch(t) {\n        return (t.type === bh.sliding ? function (t) {\n          var n = OO.parts.primary({\n            dom: {\n              tag: \"div\",\n              classes: [\"tox-toolbar__primary\"]\n            }\n          }),\n              e = OO.parts.overflow({\n            dom: {\n              tag: \"div\",\n              classes: [\"tox-toolbar__overflow\"]\n            }\n          }),\n              o = PC(t);\n          return OO.sketch(_lt(_lt({}, o), {\n            components: [n, e],\n            markers: {\n              openClass: \"tox-toolbar__overflow--open\",\n              closedClass: \"tox-toolbar__overflow--closed\",\n              growingClass: \"tox-toolbar__overflow--growing\",\n              shrinkingClass: \"tox-toolbar__overflow--shrinking\",\n              overflowToggledClass: \"tox-tbtn--enabled\"\n            },\n            onOpened: function onOpened(t) {\n              t.getSystem().broadcastOn([j1()], {\n                type: \"opened\"\n              });\n            },\n            onClosed: function onClosed(t) {\n              t.getSystem().broadcastOn([j1()], {\n                type: \"closed\"\n              });\n            }\n          }));\n        } : t.type === bh.floating ? function (i) {\n          var t = PC(i),\n              n = SO.parts.primary({\n            dom: {\n              tag: \"div\",\n              classes: [\"tox-toolbar__primary\"]\n            }\n          });\n          return SO.sketch(_lt(_lt({}, t), {\n            lazySink: i.getSink,\n            getOverflowBounds: function getOverflowBounds() {\n              var t = i.moreDrawerData.lazyHeader().element,\n                  n = Nn(t),\n                  e = Gt(t),\n                  o = Nn(e),\n                  r = Math.max(e.dom.scrollHeight, o.height);\n              return Me(n.x + 4, o.y, n.width - 8, r);\n            },\n            parts: _lt(_lt({}, t.parts), {\n              overflow: {\n                dom: {\n                  tag: \"div\",\n                  classes: [\"tox-toolbar__overflow\"],\n                  attributes: i.attributes\n                }\n              }\n            }),\n            components: [n],\n            markers: {\n              overflowToggledClass: \"tox-tbtn--enabled\"\n            }\n          }));\n        } : HC)({\n          type: t.type,\n          uid: t.uid,\n          onEscape: function onEscape() {\n            return t.onEscape(), vt.some(!0);\n          },\n          cyclicKeying: !1,\n          initGroups: [],\n          getSink: t.getSink,\n          providers: t.providers,\n          moreDrawerData: {\n            lazyToolbar: t.lazyToolbar,\n            lazyMoreButton: t.lazyMoreButton,\n            lazyHeader: t.lazyHeader\n          },\n          attributes: t.attributes\n        });\n      }\n    },\n    name: \"toolbar\",\n    schema: [mo(\"dom\"), mo(\"onEscape\"), mo(\"getSink\")]\n  }),\n      DO = B1.optional({\n    factory: {\n      sketch: function sketch(t) {\n        var n = t.editor,\n            e = t.sticky ? oC : P1;\n        return {\n          uid: t.uid,\n          dom: t.dom,\n          components: t.components,\n          behaviours: nc(e(n, t.sharedBackstage))\n        };\n      }\n    },\n    name: \"header\",\n    schema: [mo(\"dom\")]\n  }),\n      BO = B1.optional({\n    name: \"socket\",\n    schema: [mo(\"dom\")]\n  }),\n      MO = B1.optional({\n    factory: {\n      sketch: function sketch(t) {\n        return {\n          uid: t.uid,\n          dom: {\n            tag: \"div\",\n            classes: [\"tox-sidebar\"],\n            attributes: {\n              role: \"complementary\"\n            }\n          },\n          components: [{\n            dom: {\n              tag: \"div\",\n              classes: [\"tox-sidebar__slider\"]\n            },\n            components: [],\n            behaviours: nc([py.config({}), Hg.config({}), eO.config({\n              dimension: {\n                property: \"width\"\n              },\n              closedClass: \"tox-sidebar--sliding-closed\",\n              openClass: \"tox-sidebar--sliding-open\",\n              shrinkingClass: \"tox-sidebar--sliding-shrinking\",\n              growingClass: \"tox-sidebar--sliding-growing\",\n              onShrunk: function onShrunk(t) {\n                cd.getCurrent(t).each(uO.hideAllSlots), vr(t, sO);\n              },\n              onGrown: function onGrown(t) {\n                vr(t, sO);\n              },\n              onStartGrow: function onStartGrow(t) {\n                br(t, cO, {\n                  width: hn(t.element, \"width\").getOr(\"\")\n                });\n              },\n              onStartShrink: function onStartShrink(t) {\n                br(t, cO, {\n                  width: On(t.element) + \"px\"\n                });\n              }\n            }), Rg.config({}), cd.config({\n              find: function find(t) {\n                return Y(Rg.contents(t));\n              }\n            })])\n          }],\n          behaviours: nc([cS(0), mm(\"sidebar-sliding-events\", [Cr(cO, function (t, n) {\n            dn(t.element, \"width\", n.event.width);\n          }), Cr(sO, function (t, n) {\n            bn(t.element, \"width\");\n          })])])\n        };\n      }\n    },\n    name: \"sidebar\",\n    schema: [mo(\"dom\")]\n  }),\n      AO = B1.optional({\n    factory: {\n      sketch: function sketch(t) {\n        return {\n          uid: t.uid,\n          dom: {\n            tag: \"div\",\n            attributes: {\n              \"aria-hidden\": \"true\"\n            },\n            classes: [\"tox-throbber\"],\n            styles: {\n              display: \"none\"\n            }\n          },\n          behaviours: nc([Rg.config({}), fO.config({\n            focus: !1\n          }), cd.config({\n            find: function find(t) {\n              return Y(t.components());\n            }\n          })]),\n          components: []\n        };\n      }\n    },\n    name: \"throbber\",\n    schema: [mo(\"dom\")]\n  }),\n      FO = Cl({\n    name: \"OuterContainer\",\n    factory: function factory(e, t, n) {\n      return {\n        uid: e.uid,\n        dom: e.dom,\n        components: t,\n        apis: {\n          getSocket: function getSocket(t) {\n            return D1.getPart(t, e, \"socket\");\n          },\n          setSidebar: function setSidebar(t, n) {\n            D1.getPart(t, e, \"sidebar\").each(function (t) {\n              return bC(t, n);\n            });\n          },\n          toggleSidebar: function toggleSidebar(t, n) {\n            D1.getPart(t, e, \"sidebar\").each(function (t) {\n              var e = n;\n              cd.getCurrent(t).each(function (n) {\n                cd.getCurrent(n).each(function (t) {\n                  eO.hasGrown(n) ? uO.isShowing(t, e) ? eO.shrink(n) : (uO.hideAllSlots(t), uO.showSlot(t, e)) : (uO.hideAllSlots(t), uO.showSlot(t, e), eO.grow(n));\n                });\n              });\n            });\n          },\n          whichSidebar: function whichSidebar(t) {\n            return D1.getPart(t, e, \"sidebar\").bind(yC).getOrNull();\n          },\n          getHeader: function getHeader(t) {\n            return D1.getPart(t, e, \"header\");\n          },\n          getToolbar: function getToolbar(t) {\n            return D1.getPart(t, e, \"toolbar\");\n          },\n          setToolbar: function setToolbar(t, n) {\n            D1.getPart(t, e, \"toolbar\").each(function (t) {\n              t.getApis().setGroups(t, n);\n            });\n          },\n          setToolbars: function setToolbars(t, n) {\n            D1.getPart(t, e, \"multiple-toolbar\").each(function (t) {\n              F1.setItems(t, n);\n            });\n          },\n          refreshToolbar: function refreshToolbar(t) {\n            D1.getPart(t, e, \"toolbar\").each(function (t) {\n              return t.getApis().refresh(t);\n            });\n          },\n          toggleToolbarDrawer: function toggleToolbarDrawer(t) {\n            D1.getPart(t, e, \"toolbar\").each(function (n) {\n              var t = n.getApis().toggle;\n              null != t ? vt.some(function (t) {\n                return t(n);\n              }(t)) : vt.none();\n            });\n          },\n          isToolbarDrawerToggled: function isToolbarDrawerToggled(t) {\n            return D1.getPart(t, e, \"toolbar\").bind(function (n) {\n              return vt.from(n.getApis().isOpen).map(function (t) {\n                return t(n);\n              });\n            }).getOr(!1);\n          },\n          getThrobber: function getThrobber(t) {\n            return D1.getPart(t, e, \"throbber\");\n          },\n          focusToolbar: function focusToolbar(t) {\n            D1.getPart(t, e, \"toolbar\").orThunk(function () {\n              return D1.getPart(t, e, \"multiple-toolbar\");\n            }).each(function (t) {\n              Fg.focusIn(t);\n            });\n          },\n          setMenubar: function setMenubar(t, n) {\n            D1.getPart(t, e, \"menubar\").each(function (t) {\n              Z1.setMenus(t, n);\n            });\n          },\n          focusMenubar: function focusMenubar(t) {\n            D1.getPart(t, e, \"menubar\").each(function (t) {\n              Z1.focus(t);\n            });\n          }\n        },\n        behaviours: e.behaviours\n      };\n    },\n    configFields: [mo(\"dom\"), mo(\"behaviours\")],\n    partFields: [DO, _O, EO, TO, BO, MO, AO],\n    apis: {\n      getSocket: function getSocket(t, n) {\n        return t.getSocket(n);\n      },\n      setSidebar: function setSidebar(t, n, e) {\n        t.setSidebar(n, e);\n      },\n      toggleSidebar: function toggleSidebar(t, n, e) {\n        t.toggleSidebar(n, e);\n      },\n      whichSidebar: function whichSidebar(t, n) {\n        return t.whichSidebar(n);\n      },\n      getHeader: function getHeader(t, n) {\n        return t.getHeader(n);\n      },\n      getToolbar: function getToolbar(t, n) {\n        return t.getToolbar(n);\n      },\n      setToolbar: function setToolbar(t, n, e) {\n        var o = M(e, RC);\n        t.setToolbar(n, o);\n      },\n      setToolbars: function setToolbars(t, n, e) {\n        var o = M(e, function (t) {\n          return M(t, RC);\n        });\n        t.setToolbars(n, o);\n      },\n      refreshToolbar: function refreshToolbar(t, n) {\n        return t.refreshToolbar(n);\n      },\n      toggleToolbarDrawer: function toggleToolbarDrawer(t, n) {\n        t.toggleToolbarDrawer(n);\n      },\n      isToolbarDrawerToggled: function isToolbarDrawerToggled(t, n) {\n        return t.isToolbarDrawerToggled(n);\n      },\n      getThrobber: function getThrobber(t, n) {\n        return t.getThrobber(n);\n      },\n      setMenubar: function setMenubar(t, n, e) {\n        t.setMenubar(n, e);\n      },\n      focusMenubar: function focusMenubar(t, n) {\n        t.focusMenubar(n);\n      },\n      focusToolbar: function focusToolbar(t, n) {\n        t.focusToolbar(n);\n      }\n    }\n  }),\n      IO = {\n    file: {\n      title: \"File\",\n      items: \"newdocument restoredraft | preview | export print | deleteallconversations\"\n    },\n    edit: {\n      title: \"Edit\",\n      items: \"undo redo | cut copy paste pastetext | selectall | searchreplace\"\n    },\n    view: {\n      title: \"View\",\n      items: \"code | visualaid visualchars visualblocks | spellchecker | preview fullscreen | showcomments\"\n    },\n    insert: {\n      title: \"Insert\",\n      items: \"image link media addcomment pageembed template codesample inserttable | charmap emoticons hr | pagebreak nonbreaking anchor toc | insertdatetime\"\n    },\n    format: {\n      title: \"Format\",\n      items: \"bold italic underline strikethrough superscript subscript codeformat | formats blockformats fontformats fontsizes align lineheight | forecolor backcolor | language | removeformat\"\n    },\n    tools: {\n      title: \"Tools\",\n      items: \"spellchecker spellcheckerlanguage | a11ycheck code wordcount\"\n    },\n    table: {\n      title: \"Table\",\n      items: \"inserttable | cell row column | advtablesort | tableprops deletetable\"\n    },\n    help: {\n      title: \"Help\",\n      items: \"help\"\n    }\n  },\n      RO = C(UC, !1),\n      VO = C(UC, !0);\n\n  function PO(t, n, e, o) {\n    var r;\n    return {\n      type: \"basic\",\n      data: (r = t.getParam(n, e, \"string\"), M(o === t1.SemiColon ? r.replace(/;$/, \"\").split(\";\") : r.split(\" \"), function (t) {\n        var n = t,\n            e = t,\n            o = t.split(\"=\");\n        return 1 < o.length && (n = o[0], e = o[1]), {\n          title: n,\n          format: e\n        };\n      }))\n    };\n  }\n\n  function HO(e) {\n    var t = {\n      type: \"basic\",\n      data: v_\n    };\n    return {\n      tooltip: \"Align\",\n      text: vt.none(),\n      icon: vt.some(\"align-left\"),\n      isSelectedFor: function isSelectedFor(t) {\n        return function () {\n          return e.formatter.match(t);\n        };\n      },\n      getCurrentValue: vt.none,\n      getPreviewFor: function getPreviewFor(t) {\n        return vt.none;\n      },\n      onAction: function onAction(n) {\n        return function () {\n          return V(v_, function (t) {\n            return t.format === n.format;\n          }).each(function (t) {\n            return e.execCommand(t.command);\n          });\n        };\n      },\n      updateText: function updateText(t) {\n        var n = V(v_, function (t) {\n          return e.formatter.match(t.format);\n        }).fold(rt(\"left\"), function (t) {\n          return t.title.toLowerCase();\n        });\n        br(t, PS, {\n          icon: \"align-\" + n\n        });\n      },\n      dataset: t,\n      shouldHide: !1,\n      isInvalid: function isInvalid(t) {\n        return !e.formatter.canApply(t.format);\n      }\n    };\n  }\n\n  function zO(t) {\n    return M(t.split(/\\s*,\\s*/), function (t) {\n      return t.replace(/^['\"]+|['\"]+$/g, \"\");\n    });\n  }\n\n  function NO(r) {\n    function i() {\n      function e(t) {\n        return t ? zO(t)[0] : \"\";\n      }\n\n      var t = r.queryCommandValue(\"FontName\"),\n          n = a.data,\n          o = t ? t.toLowerCase() : \"\";\n      return {\n        matchOpt: V(n, function (t) {\n          var n = t.format;\n          return n.toLowerCase() === o || e(n).toLowerCase() === e(o).toLowerCase();\n        }).orThunk(function () {\n          return ot(0 === (t = o).indexOf(\"-apple-system\") && (n = zO(t.toLowerCase()), N(b_, function (t) {\n            return -1 < n.indexOf(t.toLowerCase());\n          })), {\n            title: u,\n            format: o\n          });\n          var t, n;\n        }),\n        font: t\n      };\n    }\n\n    var u = \"System Font\",\n        a = PO(r, \"font_formats\", \"Andale Mono=andale mono,monospace;Arial=arial,helvetica,sans-serif;Arial Black=arial black,sans-serif;Book Antiqua=book antiqua,palatino,serif;Comic Sans MS=comic sans ms,sans-serif;Courier New=courier new,courier,monospace;Georgia=georgia,palatino,serif;Helvetica=helvetica,arial,sans-serif;Impact=impact,sans-serif;Symbol=symbol;Tahoma=tahoma,arial,helvetica,sans-serif;Terminal=terminal,monaco,monospace;Times New Roman=times new roman,times,serif;Trebuchet MS=trebuchet ms,geneva,sans-serif;Verdana=verdana,geneva,sans-serif;Webdings=webdings;Wingdings=wingdings,zapf dingbats\", t1.SemiColon);\n    return {\n      tooltip: \"Fonts\",\n      text: vt.some(u),\n      icon: vt.none(),\n      isSelectedFor: function isSelectedFor(n) {\n        return function (t) {\n          return t.exists(function (t) {\n            return t.format === n;\n          });\n        };\n      },\n      getCurrentValue: function getCurrentValue() {\n        return i().matchOpt;\n      },\n      getPreviewFor: function getPreviewFor(t) {\n        return function () {\n          return vt.some({\n            tag: \"div\",\n            styles: -1 === t.indexOf(\"dings\") ? {\n              \"font-family\": t\n            } : {}\n          });\n        };\n      },\n      onAction: function onAction(t) {\n        return function () {\n          r.undoManager.transact(function () {\n            r.focus(), r.execCommand(\"FontName\", !1, t.format);\n          });\n        };\n      },\n      updateText: function updateText(t) {\n        var n = i(),\n            e = n.matchOpt,\n            o = n.font,\n            r = e.fold(rt(o), function (t) {\n          return t.title;\n        });\n        br(t, VS, {\n          text: r\n        });\n      },\n      dataset: a,\n      shouldHide: !1,\n      isInvalid: T\n    };\n  }\n\n  function LO(e) {\n    function i() {\n      var a = vt.none(),\n          c = o.data,\n          s = e.queryCommandValue(\"FontSize\");\n      if (s) for (var t = function t(_t3) {\n        var n,\n            e,\n            o,\n            r,\n            i = (e = _t3, /[0-9.]+px$/.test(n = s) ? (o = 72 * parseInt(n, 10) / 96, r = Math.pow(10, e || 0), Math.round(o * r) / r + \"pt\") : tt(x_, n).getOr(n)),\n            u = tt(y_, i).getOr(\"\");\n        a = V(c, function (t) {\n          return t.format === s || t.format === i || t.format === u;\n        });\n      }, n = 3; a.isNone() && 0 <= n; n--) {\n        t(n);\n      }\n      return {\n        matchOpt: a,\n        size: s\n      };\n    }\n\n    var t = rt(vt.none),\n        o = PO(e, \"fontsize_formats\", \"8pt 10pt 12pt 14pt 18pt 24pt 36pt\", t1.Space);\n    return {\n      tooltip: \"Font sizes\",\n      text: vt.some(\"12pt\"),\n      icon: vt.none(),\n      isSelectedFor: function isSelectedFor(n) {\n        return function (t) {\n          return t.exists(function (t) {\n            return t.format === n;\n          });\n        };\n      },\n      getPreviewFor: t,\n      getCurrentValue: function getCurrentValue() {\n        return i().matchOpt;\n      },\n      onAction: function onAction(t) {\n        return function () {\n          e.undoManager.transact(function () {\n            e.focus(), e.execCommand(\"FontSize\", !1, t.format);\n          });\n        };\n      },\n      updateText: function updateText(t) {\n        var n = i(),\n            e = n.matchOpt,\n            o = n.size,\n            r = e.fold(rt(o), function (t) {\n          return t.title;\n        });\n        br(t, VS, {\n          text: r\n        });\n      },\n      dataset: o,\n      shouldHide: !1,\n      isInvalid: T\n    };\n  }\n\n  function WO(t, n) {\n    var e = n(),\n        o = M(e, function (t) {\n      return t.format;\n    });\n    return vt.from(t.formatter.closest(o)).bind(function (n) {\n      return V(e, function (t) {\n        return t.format === n;\n      });\n    }).orThunk(function () {\n      return ot(t.formatter.match(\"p\"), {\n        title: \"Paragraph\",\n        format: \"p\"\n      });\n    });\n  }\n\n  function UO(e) {\n    var o = PO(e, \"block_formats\", \"Paragraph=p;Heading 1=h1;Heading 2=h2;Heading 3=h3;Heading 4=h4;Heading 5=h5;Heading 6=h6;Preformatted=pre\", t1.SemiColon);\n    return {\n      tooltip: \"Blocks\",\n      text: vt.some(\"Paragraph\"),\n      icon: vt.none(),\n      isSelectedFor: function isSelectedFor(t) {\n        return function () {\n          return e.formatter.match(t);\n        };\n      },\n      getCurrentValue: vt.none,\n      getPreviewFor: function getPreviewFor(n) {\n        return function () {\n          var t = e.formatter.get(n);\n          return vt.some({\n            tag: 0 < t.length && (t[0].inline || t[0].block) || \"div\",\n            styles: e.dom.parseStyle(e.formatter.getCssText(n))\n          });\n        };\n      },\n      onAction: XC(e),\n      updateText: function updateText(t) {\n        var n = WO(e, function () {\n          return o.data;\n        }).fold(rt(\"Paragraph\"), function (t) {\n          return t.title;\n        });\n        br(t, VS, {\n          text: n\n        });\n      },\n      dataset: o,\n      shouldHide: !1,\n      isInvalid: function isInvalid(t) {\n        return !e.formatter.canApply(t.format);\n      }\n    };\n  }\n\n  function jO(r, t) {\n    return {\n      tooltip: \"Formats\",\n      text: vt.some(\"Paragraph\"),\n      icon: vt.none(),\n      isSelectedFor: function isSelectedFor(t) {\n        return function () {\n          return r.formatter.match(t);\n        };\n      },\n      getCurrentValue: vt.none,\n      getPreviewFor: function getPreviewFor(n) {\n        return function () {\n          var t = r.formatter.get(n);\n          return void 0 !== t ? vt.some({\n            tag: 0 < t.length && (t[0].inline || t[0].block) || \"div\",\n            styles: r.dom.parseStyle(r.formatter.getCssText(n))\n          }) : vt.none();\n        };\n      },\n      onAction: XC(r),\n      updateText: function updateText(t) {\n        var e = function e(t) {\n          var n = t.items;\n          return void 0 !== n && 0 < n.length ? z(n, e) : [{\n            title: t.title,\n            format: t.format\n          }];\n        },\n            n = z(bk(r), e),\n            o = WO(r, rt(n)).fold(rt(\"Paragraph\"), function (t) {\n          return t.title;\n        });\n\n        br(t, VS, {\n          text: o\n        });\n      },\n      shouldHide: r.getParam(\"style_formats_autohide\", !1, \"boolean\"),\n      isInvalid: function isInvalid(t) {\n        return !r.formatter.canApply(t.format);\n      },\n      dataset: t\n    };\n  }\n\n  function GO(n) {\n    return {\n      isDisabled: function isDisabled() {\n        return gd.isDisabled(n);\n      },\n      setDisabled: function setDisabled(t) {\n        return gd.set(n, t);\n      }\n    };\n  }\n\n  function XO(n) {\n    return {\n      setActive: function setActive(t) {\n        Lg.set(n, t);\n      },\n      isActive: function isActive() {\n        return Lg.isOn(n);\n      },\n      isDisabled: function isDisabled() {\n        return gd.isDisabled(n);\n      },\n      setDisabled: function setDisabled(t) {\n        return gd.set(n, t);\n      }\n    };\n  }\n\n  function YO(t, n) {\n    return t.map(function (t) {\n      return {\n        \"aria-label\": n.translate(t),\n        title: n.translate(t)\n      };\n    }).getOr({});\n  }\n\n  function qO(n, e, t, o, r, i) {\n    var u;\n    return {\n      dom: {\n        tag: \"button\",\n        classes: [\"tox-tbtn\"].concat(e.isSome() ? [\"tox-tbtn--select\"] : []),\n        attributes: YO(t, i)\n      },\n      components: tb([n.map(function (t) {\n        return H0(t, i.icons);\n      }), e.map(function (t) {\n        return N0(t, \"tox-tbtn\", i);\n      })]),\n      eventOrder: ((u = {})[mi()] = [\"focusing\", \"alloy.base.behaviour\", \"common-button-display-events\"], u),\n      buttonBehaviours: nc([Qv(i.isDisabled), pv(), mm(\"common-button-display-events\", [Cr(mi(), function (t, n) {\n        n.event.prevent(), vr(t, T_);\n      })])].concat(o.map(function (t) {\n        return k_.config({\n          channel: t,\n          initialData: {\n            icon: n,\n            text: e\n          },\n          renderComponents: function renderComponents(t, n) {\n            return tb([t.icon.map(function (t) {\n              return H0(t, i.icons);\n            }), t.text.map(function (t) {\n              return N0(t, \"tox-tbtn\", i);\n            })]);\n          }\n        });\n      }).toArray()).concat(r.getOr([])))\n    };\n  }\n\n  function KO(t, n, e) {\n    var o,\n        r = Po(st),\n        i = qO(t.icon, t.text, t.tooltip, vt.none(), vt.none(), e);\n    return fp.sketch({\n      dom: i.dom,\n      components: i.components,\n      eventOrder: RS,\n      buttonBehaviours: nc([mm(\"toolbar-button-events\", [(o = {\n        onAction: t.onAction,\n        getApi: n.getApi\n      }, uu(function (n, t) {\n        hv(o, n)(function (t) {\n          br(n, IS, {\n            buttonApi: t\n          }), o.onAction(t);\n        });\n      })), vv(n, r), bv(n, r)]), Qv(function () {\n        return t.disabled || e.isDisabled();\n      }), pv()].concat(n.toolbarButtonBehaviours))\n    });\n  }\n\n  function JO(r, i) {\n    return function (t, n, e) {\n      var o = r(t).mapError(function (t) {\n        return ur(t);\n      }).getOrDie();\n      return i(o, n, e);\n    };\n  }\n\n  function $O(e, t, o, r) {\n    var n,\n        i = t.outerContainer,\n        u = o.toolbar,\n        a = o.buttons;\n    f(u, y) ? (n = u.map(function (t) {\n      var n = {\n        toolbar: t,\n        buttons: a,\n        allowToolbarGroups: o.allowToolbarGroups\n      };\n      return F_(e, n, {\n        backstage: r\n      }, vt.none());\n    }), FO.setToolbars(i, n)) : FO.setToolbar(i, F_(e, o, {\n      backstage: r\n    }, vt.none()));\n  }\n\n  function QO(t) {\n    return /^[0-9\\.]+(|px)$/i.test(\"\" + t) ? vt.some(parseInt(\"\" + t, 10)) : vt.none();\n  }\n\n  function ZO(t) {\n    return u(t) ? t + \"px\" : t;\n  }\n\n  function t_(n, t, e) {\n    var o = t.filter(function (t) {\n      return n < t;\n    }),\n        r = e.filter(function (t) {\n      return t < n;\n    });\n    return o.or(r).getOr(n);\n  }\n\n  function n_(t) {\n    var n = lh(t),\n        e = fh(t),\n        o = mh(t);\n    return QO(n).map(function (t) {\n      return t_(t, e, o);\n    });\n  }\n\n  function e_(u, a, t, n, c) {\n    function s() {\n      return x.get() && !u.removed;\n    }\n\n    function l(t) {\n      return y ? t.fold(rt(0), function (t) {\n        return 1 < t.components().length ? wn(t.components()[1].element) : 0;\n      }) : 0;\n    }\n\n    function f() {\n      r.broadcastOn([xf()], {});\n    }\n\n    function o(t) {\n      var n, e, o, r, i;\n      void 0 === t && (t = !1), s() && (m || (n = p.getOrThunk(function () {\n        var t = QO(pn(be(), \"margin-left\")).getOr(0);\n        return On(be()) - Cn(a).left + t;\n      }), dn(c.get().element, \"max-width\", n + \"px\")), y && FO.refreshToolbar(d), m || (e = l(FO.getToolbar(d)), o = Ae(a), r = v() ? Math.max(o.y - wn(c.get().element) + e, 0) : o.bottom, mn(d.element, {\n        position: \"absolute\",\n        top: Math.round(r) + \"px\",\n        left: Math.round(o.x) + \"px\"\n      })), g && (i = c.get(), t ? U1.reset(i) : U1.refresh(i)), f());\n    }\n\n    function e(t) {\n      var n, e;\n      void 0 === t && (t = !0), !m && g && s() && (n = h.getDockingMode(), (e = function (t) {\n        switch (uv(u)) {\n          case xh.auto:\n            var n = l(FO.getToolbar(d)),\n                e = wn(t.element) - n,\n                o = Ae(a);\n            if (o.y > e) return \"top\";\n            var r = Gt(a),\n                i = Math.max(r.dom.scrollHeight, wn(r));\n            return o.bottom < i - e || Fe().bottom < o.bottom - e ? \"bottom\" : \"top\";\n\n          case xh.bottom:\n            return \"bottom\";\n\n          default:\n            return xh.top, \"top\";\n        }\n      }(c.get())) !== n && (function (t) {\n        var n = c.get();\n        U1.setModes(n, [t]), h.setDockingMode(t);\n        var e = v() ? Oc.TopToBottom : Oc.BottomToTop;\n        on(n.element, es, e);\n      }(e), t && o(!0)));\n    }\n\n    var r = t.uiMothership,\n        d = t.outerContainer,\n        i = ev.DOM,\n        m = sv(u),\n        g = dv(u),\n        p = mh(u).or(n_(u)),\n        h = n.shared.header,\n        v = h.isPositionedAtTop,\n        b = iv(u),\n        y = b === bh.sliding || b === bh.floating,\n        x = Po(!1);\n    return {\n      isVisible: s,\n      isPositionedAtTop: v,\n      show: function show() {\n        x.set(!0), dn(d.element, \"display\", \"flex\"), i.addClass(u.getBody(), \"mce-edit-focus\"), bn(r.element, \"display\"), e(!1), o();\n      },\n      hide: function hide() {\n        x.set(!1), t.outerContainer && (dn(d.element, \"display\", \"none\"), i.removeClass(u.getBody(), \"mce-edit-focus\")), dn(r.element, \"display\", \"none\");\n      },\n      update: o,\n      updateMode: e,\n      repositionPopups: f\n    };\n  }\n\n  function o_(t, n) {\n    var e = Ae(t);\n    return {\n      pos: n ? e.y : e.bottom,\n      bounds: e\n    };\n  }\n\n  function r_(i, u) {\n    return Cr(IS, function (t, n) {\n      var e,\n          o = i.get(t),\n          r = (e = o, {\n        hide: function hide() {\n          return vr(e, Hi());\n        },\n        getValue: function getValue() {\n          return Df.getValue(e);\n        }\n      });\n      u.onAction(r, n.event.buttonApi);\n    });\n  }\n\n  function i_(t, n, e) {\n    return n.bottom - t.y >= (e = void 0 === e ? .01 : e) && t.bottom - n.y >= e;\n  }\n\n  function u_(t) {\n    var n = function (t) {\n      var n = t.getBoundingClientRect();\n\n      if (n.height <= 0 && n.width <= 0) {\n        var e = Qt(At.fromDom(t.startContainer), t.startOffset).element;\n        return (Yn(e) ? Yt(e) : vt.some(e)).filter(Xn).map(function (t) {\n          return t.dom.getBoundingClientRect();\n        }).getOr(n);\n      }\n\n      return n;\n    }(t.selection.getRng());\n\n    if (t.inline) {\n      var e = Rn();\n      return Me(e.left + n.left, e.top + n.top, n.width, n.height);\n    }\n\n    var o = Nn(At.fromDom(t.getBody()));\n    return Me(o.x + n.left, o.y + n.top, n.width, n.height);\n  }\n\n  function a_(t, n, e, o) {\n    void 0 === o && (o = 0);\n    var r,\n        i,\n        u,\n        a,\n        c = Hn(window),\n        s = Ae(At.fromDom(t.getContentAreaContainer())),\n        l = ph(t) || hh(t) || rv(t),\n        f = (r = s, i = c, u = o, {\n      x: a = Math.max(r.x + u, i.x),\n      width: Math.min(r.right - u, i.right) - a\n    }),\n        d = f.x,\n        m = f.width;\n    if (t.inline && !l) return Me(d, c.y, m, c.height);\n\n    var g = function (t, n, e, o, r, i) {\n      var u = At.fromDom(t.getContainer()),\n          a = Iu(u, \".tox-editor-header\").getOr(u),\n          c = Ae(a),\n          s = c.y >= n.bottom,\n          l = o && !s;\n      if (t.inline && l) return {\n        y: Math.max(c.bottom + i, e.y),\n        bottom: e.bottom\n      };\n      if (t.inline && !l) return {\n        y: e.y,\n        bottom: Math.min(c.y - i, e.bottom)\n      };\n      var f = \"line\" === r ? Ae(u) : n;\n      return l ? {\n        y: Math.max(c.bottom + i, e.y),\n        bottom: Math.min(f.bottom - i, e.bottom)\n      } : {\n        y: Math.max(f.y + i, e.y),\n        bottom: Math.min(c.y - i, e.bottom)\n      };\n    }(t, s, c, n.header.isPositionedAtTop(), e, o),\n        p = g.y,\n        h = g.bottom;\n\n    return Me(d, p, m, h - p);\n  }\n\n  function c_(t) {\n    return \"node\" === t;\n  }\n\n  function s_(t, r, n, i, e) {\n    var u = u_(t),\n        o = i.lastElement().exists(function (t) {\n      return Lt(n, t);\n    }),\n        a = n,\n        c = t.selection.getRng(),\n        s = Qt(At.fromDom(c.startContainer), c.startOffset);\n    return c.startContainer === c.endContainer && c.startOffset === c.endOffset - 1 && Lt(s.element, a) ? o ? Vm : cp : o ? function (n, t) {\n      var e = hn(n, \"position\");\n      dn(n, \"position\", t);\n      var o = i_(u, Ae(r)) && !i.isReposition() ? Hm : Vm;\n      return e.each(function (t) {\n        return dn(n, \"position\", t);\n      }), o;\n    }(r, i.getMode()) : (\"fixed\" === i.getMode() ? e.y + Rn().top : e.y) + (wn(r) + 12) <= u.y ? cp : sp;\n  }\n\n  function l_(n, t) {\n    var e = A(F(t, function (t) {\n      return t.predicate(n.dom);\n    }), function (t) {\n      return \"contexttoolbar\" === t.type;\n    });\n    return {\n      contextToolbars: e.pass,\n      contextForms: e.fail\n    };\n  }\n\n  function f_(e, t) {\n    function o(t) {\n      return Lt(t, r);\n    }\n\n    var n,\n        r = At.fromDom(t.getBody()),\n        i = At.fromDom(t.selection.getNode());\n    return o(n = i) || Wt(r, n) ? function (t, n, e) {\n      var o = l_(t, n);\n      if (0 < o.contextForms.length) return vt.some({\n        elem: t,\n        toolbars: [o.contextForms[0]]\n      });\n      var r = l_(t, e);\n      if (0 < r.contextForms.length) return vt.some({\n        elem: t,\n        toolbars: [r.contextForms[0]]\n      });\n\n      if (0 < o.contextToolbars.length || 0 < r.contextToolbars.length) {\n        var i = function (t) {\n          if (t.length <= 1) return t;\n\n          function n(n) {\n            return d(t, function (t) {\n              return t.position === n;\n            });\n          }\n\n          function e(n) {\n            return F(t, function (t) {\n              return t.position === n;\n            });\n          }\n\n          var o = n(\"selection\"),\n              r = n(\"node\");\n\n          if (o || r) {\n            if (r && o) {\n              var i = e(\"node\"),\n                  u = M(e(\"selection\"), function (t) {\n                return _lt(_lt({}, t), {\n                  position: \"node\"\n                });\n              });\n              return i.concat(u);\n            }\n\n            return e(o ? \"selection\" : \"node\");\n          }\n\n          return e(\"line\");\n        }(o.contextToolbars.concat(r.contextToolbars));\n\n        return vt.some({\n          elem: t,\n          toolbars: i\n        });\n      }\n\n      return vt.none();\n    }(i, e.inNodeScope, e.inEditorScope).orThunk(function () {\n      return a = e, (t = o)(n = i) ? vt.none() : dr(n, function (t) {\n        if (Xn(t)) {\n          var n = l_(t, a.inNodeScope),\n              e = n.contextToolbars,\n              o = n.contextForms,\n              r = 0 < o.length ? o : (u = e).length <= 1 ? u : i(\"selection\").orThunk(function () {\n            return i(\"node\");\n          }).orThunk(function () {\n            return i(\"line\");\n          }).map(function (t) {\n            return t.position;\n          }).fold(function () {\n            return [];\n          }, function (n) {\n            return F(u, function (t) {\n              return t.position === n;\n            });\n          });\n          return 0 < r.length ? vt.some({\n            elem: t,\n            toolbars: r\n          }) : vt.none();\n        }\n\n        function i(n) {\n          return V(u, function (t) {\n            return t.position === n;\n          });\n        }\n\n        var u;\n        return vt.none();\n      }, t);\n      var t, n, a;\n    }) : vt.none();\n  }\n\n  function d_(a, c) {\n    var s = {},\n        l = [],\n        f = [],\n        d = {},\n        m = {},\n        t = Ct(a);\n    return St(t, function (t) {\n      var n,\n          e,\n          o,\n          r,\n          i,\n          u = a[t];\n      \"contextform\" === u.type ? (o = t, i = co(ao(\"ContextForm\", qp, r = u)), (s[o] = i).launch.map(function (t) {\n        d[\"form:\" + o] = _lt(_lt({}, r.launch), {\n          type: \"contextformtogglebutton\" === t.type ? \"togglebutton\" : \"button\",\n          onAction: function onAction() {\n            c(i);\n          }\n        });\n      }), (\"editor\" === i.scope ? f : l).push(i), m[o] = i) : \"contexttoolbar\" === u.type && (n = t, ao(\"ContextToolbar\", Kp, e = u).each(function (t) {\n        (\"editor\" === e.scope ? f : l).push(t), m[n] = t;\n      }));\n    }), {\n      forms: s,\n      inNodeScope: l,\n      inEditorScope: f,\n      lookupTable: m,\n      formNavigators: d\n    };\n  }\n\n  function m_(d, t, m, u) {\n    function a() {\n      var t = y.get().getOr(\"node\"),\n          n = c_(t) ? 1 : 0;\n      return a_(d, p, t, n);\n    }\n\n    function c() {\n      return !(d.removed || h() && g.isContextMenuOpen());\n    }\n\n    function s() {\n      if (c()) {\n        var t = a(),\n            n = mt(y.get(), \"node\") ? (e = d, v.get().filter(ve).map(Nn).getOrThunk(function () {\n          return u_(e);\n        })) : u_(d);\n        return t.height <= 0 || !i_(n, t);\n      }\n\n      return 1;\n      var e;\n    }\n\n    function n() {\n      v.clear(), b.clear(), y.clear(), up.hide(x);\n    }\n\n    function e() {\n      var t;\n      up.isOpen(x) && (bn(t = x.element, \"display\"), s() ? dn(t, \"display\", \"none\") : (b.set(0), up.reposition(x)));\n    }\n\n    function l(t) {\n      return {\n        dom: {\n          tag: \"div\",\n          classes: [\"tox-pop__dialog\"]\n        },\n        components: [t],\n        behaviours: nc([Fg.config({\n          mode: \"acyclic\"\n        }), mm(\"pop-dialog-wrap-events\", [ou(function (t) {\n          d.shortcuts.add(\"ctrl+F9\", \"focus statusbar\", function () {\n            return Fg.focusIn(t);\n          });\n        }), ru(function (t) {\n          d.shortcuts.remove(\"ctrl+F9\");\n        })])])\n      };\n    }\n\n    function f(t, n) {\n      var e,\n          o,\n          r,\n          i,\n          c,\n          s,\n          u,\n          a = \"node\" === t ? p.anchors.node(n) : p.anchors.cursor(),\n          l = (e = d, o = t, r = h(), i = {\n        lastElement: v.get,\n        isReposition: function isReposition() {\n          return mt(b.get(), 0);\n        },\n        getMode: function getMode() {\n          return ff.getMode(m);\n        }\n      }, \"line\" === o ? {\n        bubble: Sc(12, 0, N_),\n        layouts: {\n          onLtr: function onLtr() {\n            return [la];\n          },\n          onRtl: function onRtl() {\n            return [fa];\n          }\n        },\n        overrides: L_\n      } : {\n        bubble: Sc(0, 12, N_, 1 / 12),\n        layouts: (c = e, s = i, u = o, r ? {\n          onLtr: function onLtr(t) {\n            return [$a, Xa, Ya, qa, Ka, Ja].concat(f(t));\n          },\n          onRtl: function onRtl(t) {\n            return [$a, Ya, Xa, Ka, qa, Ja].concat(f(t));\n          }\n        } : {\n          onLtr: function onLtr(t) {\n            return [Ja, $a, qa, Xa, Ka, Ya].concat(f(t));\n          },\n          onRtl: function onRtl(t) {\n            return [Ja, $a, Ka, Ya, qa, Xa].concat(f(t));\n          }\n        }),\n        overrides: L_\n      });\n\n      function f(t) {\n        return c_(u) ? [(a = t, function (t, n, e, o, r) {\n          var i = s_(c, o, a, s, r),\n              u = _lt(_lt({}, t), {\n            y: r.y,\n            height: r.height\n          });\n\n          return _lt(_lt({}, i(u, n, e, o, r)), {\n            alwaysFit: !0\n          });\n        })] : [];\n        var a;\n      }\n\n      return Yo(a, l);\n    }\n\n    function o(t, n) {\n      var e, o, r, i;\n      k.cancel(), c() && (e = S(t), r = f(o = t[0].position, n), y.set(o), b.set(1), bn(i = x.element, \"display\"), mt(Et(n, v.get(), Lt), !0) || (qr(i, X_), ff.reset(m, x)), up.showWithinBounds(x, l(e), {\n        anchor: r,\n        transition: {\n          classes: [X_],\n          mode: \"placement\"\n        }\n      }, function () {\n        return vt.some(a());\n      }), n.fold(v.clear, v.set), s() && dn(i, \"display\", \"none\"));\n    }\n\n    var r,\n        i,\n        g = u.backstage,\n        p = g.shared,\n        h = le().deviceType.isTouch,\n        v = gc(),\n        b = gc(),\n        y = gc(),\n        x = Tu((r = {\n      sink: m,\n      onEscape: function onEscape() {\n        return d.focus(), vt.some(!0);\n      }\n    }, i = Po([]), up.sketch({\n      dom: {\n        tag: \"div\",\n        classes: [\"tox-pop\"]\n      },\n      fireDismissalEventInstead: {\n        event: \"doNotDismissYet\"\n      },\n      onShow: function onShow(t) {\n        i.set([]), up.getContent(t).each(function (t) {\n          bn(t.element, \"visibility\");\n        }), qr(t.element, G_), bn(t.element, \"width\");\n      },\n      inlineBehaviours: nc([mm(\"context-toolbar-events\", [Br(_i(), function (t, n) {\n        \"width\" === n.event.raw.propertyName && (qr(t.element, G_), bn(t.element, \"width\"));\n      }), Cr(j_, function (t, n) {\n        var e = t.element;\n        bn(e, \"width\");\n        var o = On(e);\n        up.setContent(t, n.event.contents), Yr(e, G_);\n        var r = On(e);\n        dn(e, \"width\", o + \"px\"), up.getContent(t).each(function (t) {\n          n.event.focus.bind(function (t) {\n            return ka(t), _a(e);\n          }).orThunk(function () {\n            return Fg.focusIn(t), Oa(ge(e));\n          });\n        }), lp.setTimeout(function () {\n          dn(t.element, \"width\", r + \"px\");\n        }, 0);\n      }), Cr(W_, function (n, t) {\n        up.getContent(n).each(function (t) {\n          i.set(i.get().concat([{\n            bar: t,\n            focus: Oa(ge(n.element))\n          }]));\n        }), br(n, j_, {\n          contents: t.event.forwardContents,\n          focus: vt.none()\n        });\n      }), Cr(U_, function (n, t) {\n        q(i.get()).each(function (t) {\n          i.set(i.get().slice(0, i.get().length - 1)), br(n, j_, {\n            contents: Eu(t.bar),\n            focus: t.focus\n          });\n        });\n      })]), Fg.config({\n        mode: \"special\",\n        onEscape: function onEscape(n) {\n          return q(i.get()).fold(function () {\n            return r.onEscape();\n          }, function (t) {\n            return vr(n, U_), vt.some(!0);\n          });\n        }\n      })]),\n      lazySink: function lazySink() {\n        return Ve.value(r.sink);\n      }\n    }))),\n        w = Rt(function () {\n      return d_(t, function (t) {\n        var n = S([t]);\n        br(x, W_, {\n          forwardContents: l(n)\n        });\n      });\n    }),\n        S = function S(t) {\n      var n = d.ui.registry.getAll().buttons,\n          e = w(),\n          o = _lt(_lt({}, n), e.formNavigators),\n          r = iv(d) === bh.scrolling ? bh.scrolling : bh[\"default\"],\n          i = ft(M(t, function (t) {\n        return \"contexttoolbar\" === t.type ? F_(d, {\n          buttons: o,\n          toolbar: t.items,\n          allowToolbarGroups: !1\n        }, u, vt.some([\"form:\"])) : (n = p.providers, z_(t, n));\n        var n;\n      }));\n\n      return HC({\n        type: r,\n        uid: Ir(\"context-toolbar\"),\n        initGroups: i,\n        onEscape: vt.none,\n        cyclicKeying: !0,\n        providers: p.providers\n      });\n    },\n        k = vp(function () {\n      d.hasFocus() && !d.removed && (Kr(x.element, X_) ? k.throttle() : f_(w(), d).fold(n, function (t) {\n        o(t.toolbars, vt.some(t.elem));\n      }));\n    }, 17);\n\n    d.on(\"init\", function () {\n      d.on(\"remove\", n), d.on(\"ScrollContent ScrollWindow ObjectResized ResizeEditor longpress\", e), d.on(\"click keyup focus SetContent\", k.throttle), d.on(H_, n), d.on(\"contexttoolbar-show\", function (n) {\n        tt(w().lookupTable, n.toolbarKey).each(function (t) {\n          o([t], ot(n.target !== d, n.target)), up.getContent(x).each(Fg.focusIn);\n        });\n      }), d.on(\"focusout\", function (t) {\n        lp.setEditorTimeout(d, function () {\n          _a(m.element).isNone() && _a(x.element).isNone() && n();\n        }, 0);\n      }), d.on(\"SwitchMode\", function () {\n        d.mode.isReadOnly() && n();\n      }), d.on(\"AfterProgressState\", function (t) {\n        t.state ? n() : d.hasFocus() && k.throttle();\n      }), d.on(\"NodeChange\", function (t) {\n        _a(x.element).fold(k.throttle, st);\n      });\n    });\n  }\n\n  (n1 = t1 = t1 || {})[n1.SemiColon = 0] = \"SemiColon\", n1[n1.Space = 1] = \"Space\";\n\n  var g_,\n      p_,\n      h_,\n      v_ = [{\n    title: \"Left\",\n    icon: \"align-left\",\n    format: \"alignleft\",\n    command: \"JustifyLeft\"\n  }, {\n    title: \"Center\",\n    icon: \"align-center\",\n    format: \"aligncenter\",\n    command: \"JustifyCenter\"\n  }, {\n    title: \"Right\",\n    icon: \"align-right\",\n    format: \"alignright\",\n    command: \"JustifyRight\"\n  }, {\n    title: \"Justify\",\n    icon: \"align-justify\",\n    format: \"alignjustify\",\n    command: \"JustifyFull\"\n  }],\n      b_ = [\"-apple-system\", \"Segoe UI\", \"Roboto\", \"Helvetica Neue\", \"sans-serif\"],\n      y_ = {\n    \"8pt\": \"1\",\n    \"10pt\": \"2\",\n    \"12pt\": \"3\",\n    \"14pt\": \"4\",\n    \"18pt\": \"5\",\n    \"24pt\": \"6\",\n    \"36pt\": \"7\"\n  },\n      x_ = {\n    \"xx-small\": \"7pt\",\n    \"x-small\": \"8pt\",\n    small: \"10pt\",\n    medium: \"12pt\",\n    large: \"14pt\",\n    \"x-large\": \"18pt\",\n    \"xx-large\": \"24pt\"\n  },\n      w_ = Object.freeze({\n    __proto__: null,\n    events: function events(r, i) {\n      function u(e, o) {\n        r.updateState.each(function (t) {\n          var n = t(e, o);\n          i.set(n);\n        }), r.renderComponents.each(function (t) {\n          var n = M(t(o, i.get()), e.getSystem().build);\n          Rs(e, n);\n        });\n      }\n\n      return eu([Cr(Fi(), function (t, n) {\n        var e,\n            o = n;\n        o.universal || (e = r.channel, wt(o.channels, e) && u(t, o.data));\n      }), ou(function (n, t) {\n        r.initialData.each(function (t) {\n          u(n, t);\n        });\n      })]);\n    }\n  }),\n      S_ = Object.freeze({\n    __proto__: null,\n    getState: function getState(t, n, e) {\n      return e;\n    }\n  }),\n      k_ = xa({\n    fields: [mo(\"channel\"), wo(\"renderComponents\"), wo(\"updateState\"), wo(\"initialData\")],\n    name: \"reflecting\",\n    active: w_,\n    apis: S_,\n    state: Object.freeze({\n      __proto__: null,\n      init: function init() {\n        var t = Po(vt.none());\n        return {\n          readState: function readState() {\n            return t.get().getOr(\"none\");\n          },\n          get: t.get,\n          set: t.set,\n          clear: function clear() {\n            return t.set(vt.none());\n          }\n        };\n      }\n    })\n  }),\n      C_ = rt([mo(\"toggleClass\"), mo(\"fetch\"), Qu(\"onExecute\"), Eo(\"getHotspot\", vt.some), Eo(\"getAnchorOverrides\", rt({})), Wc(), Qu(\"onItemExecute\"), wo(\"lazySink\"), mo(\"dom\"), Ju(\"onOpen\"), Zs(\"splitDropdownBehaviours\", [$y, Fg, Hg]), Eo(\"matchWidth\", !1), Eo(\"useMinWidth\", !1), Eo(\"eventOrder\", {}), wo(\"role\")].concat(ux())),\n      O_ = rt([Jf({\n    factory: fp,\n    schema: [mo(\"dom\")],\n    name: \"arrow\",\n    defaults: function defaults() {\n      return {\n        buttonBehaviours: nc([Hg.revoke()])\n      };\n    },\n    overrides: function overrides(n) {\n      return {\n        dom: {\n          tag: \"span\",\n          attributes: {\n            role: \"presentation\"\n          }\n        },\n        action: function action(t) {\n          t.getSystem().getByUid(n.uid).each(yr);\n        },\n        buttonBehaviours: nc([Lg.config({\n          toggleOnExecute: !1,\n          toggleClass: n.toggleClass\n        })])\n      };\n    }\n  }), Jf({\n    factory: fp,\n    schema: [mo(\"dom\")],\n    name: \"button\",\n    defaults: function defaults() {\n      return {\n        buttonBehaviours: nc([Hg.revoke()])\n      };\n    },\n    overrides: function overrides(e) {\n      return {\n        dom: {\n          tag: \"span\",\n          attributes: {\n            role: \"presentation\"\n          }\n        },\n        action: function action(n) {\n          n.getSystem().getByUid(e.uid).each(function (t) {\n            e.onExecute(t, n);\n          });\n        }\n      };\n    }\n  }), Qf({\n    factory: {\n      sketch: function sketch(t) {\n        return {\n          uid: t.uid,\n          dom: {\n            tag: \"span\",\n            styles: {\n              display: \"none\"\n            },\n            attributes: {\n              \"aria-hidden\": \"true\"\n            },\n            innerHtml: t.text\n          }\n        };\n      }\n    },\n    schema: [mo(\"text\")],\n    name: \"aria-descriptor\"\n  }), $f({\n    schema: [Yu()],\n    name: \"menu\",\n    defaults: function defaults(o) {\n      return {\n        onExecute: function onExecute(n, e) {\n          n.getSystem().getByUid(o.uid).each(function (t) {\n            o.onItemExecute(t, n, e);\n          });\n        }\n      };\n    }\n  }), Zy()]),\n      __ = Cl({\n    name: \"SplitDropdown\",\n    configFields: C_(),\n    partFields: O_(),\n    factory: function factory(o, t, n, e) {\n      function r(t) {\n        cd.getCurrent(t).each(function (t) {\n          hd.highlightFirst(t), Fg.focusIn(t);\n        });\n      }\n\n      function i(t) {\n        ex(o, h, t, e, r, Hy.HighlightFirst).get(st);\n      }\n\n      function u(t) {\n        return yr(gl(t, o, \"button\")), vt.some(!0);\n      }\n\n      var a,\n          c = _lt(_lt({}, eu([ou(function (e, t) {\n        ml(e, o, \"aria-descriptor\").each(function (t) {\n          var n = Ir(\"aria\");\n          on(t.element, \"id\", n), on(e.element, \"aria-describedby\", n);\n        });\n      })])), Sm(vt.some(i))),\n          s = {\n        repositionMenus: function repositionMenus(t) {\n          Lg.isOn(t) && ix(t);\n        }\n      };\n\n      return {\n        uid: o.uid,\n        dom: o.dom,\n        components: t,\n        apis: s,\n        eventOrder: _lt(_lt({}, o.eventOrder), ((a = {})[Ii()] = [\"disabling\", \"toggling\", \"alloy.base.behaviour\"], a)),\n        events: c,\n        behaviours: nl(o.splitDropdownBehaviours, [$y.config({\n          others: {\n            sandbox: function sandbox(t) {\n              var n = gl(t, o, \"arrow\");\n              return rx(o, t, {\n                onOpen: function onOpen() {\n                  Lg.on(n), Lg.on(t);\n                },\n                onClose: function onClose() {\n                  Lg.off(n), Lg.off(t);\n                }\n              });\n            }\n          }\n        }), Fg.config({\n          mode: \"special\",\n          onSpace: u,\n          onEnter: u,\n          onDown: function onDown(t) {\n            return i(t), vt.some(!0);\n          }\n        }), Hg.config({}), Lg.config({\n          toggleOnExecute: !1,\n          aria: {\n            mode: \"expanded\"\n          }\n        })]),\n        domModification: {\n          attributes: {\n            role: o.role.getOr(\"button\"),\n            \"aria-haspopup\": !0\n          }\n        }\n      };\n    },\n    apis: {\n      repositionMenus: function repositionMenus(t, n) {\n        return t.repositionMenus(n);\n      }\n    }\n  }),\n      T_ = Ir(\"focus-button\"),\n      E_ = function E_(t, n, e) {\n    return KO(t, {\n      toolbarButtonBehaviours: [].concat(0 < e.length ? [mm(\"toolbarButtonWith\", e)] : []),\n      getApi: GO,\n      onSetup: t.onSetup\n    }, n);\n  },\n      D_ = function D_(t, n, e) {\n    return Yo(KO(t, {\n      toolbarButtonBehaviours: [Rg.config({}), Lg.config({\n        toggleClass: \"tox-tbtn--enabled\",\n        aria: {\n          mode: \"pressed\"\n        },\n        toggleOnExecute: !1\n      })].concat(0 < e.length ? [mm(\"toolbarToggleButtonWith\", e)] : []),\n      getApi: XO,\n      onSetup: t.onSetup\n    }, n));\n  },\n      B_ = [{\n    name: \"history\",\n    items: [\"undo\", \"redo\"]\n  }, {\n    name: \"styles\",\n    items: [\"styleselect\"]\n  }, {\n    name: \"formatting\",\n    items: [\"bold\", \"italic\"]\n  }, {\n    name: \"alignment\",\n    items: [\"alignleft\", \"aligncenter\", \"alignright\", \"alignjustify\"]\n  }, {\n    name: \"indentation\",\n    items: [\"outdent\", \"indent\"]\n  }, {\n    name: \"permanent pen\",\n    items: [\"permanentpen\"]\n  }, {\n    name: \"comments\",\n    items: [\"addcomment\"]\n  }],\n      M_ = {\n    button: JO(Op, function (t, n) {\n      return e = n.backstage.shared.providers, E_(t, e, []);\n      var e;\n    }),\n    togglebutton: JO(_p, function (t, n) {\n      return e = n.backstage.shared.providers, D_(t, e, []);\n      var e;\n    }),\n    menubutton: JO(rC, function (t, n) {\n      return G0(t, \"tox-tbtn\", n.backstage, vt.none());\n    }),\n    splitbutton: JO(function (t) {\n      return ao(\"SplitButton\", Q1, t);\n    }, function (t, n) {\n      return o = t, r = n.backstage.shared, s = Ir(\"channel-update-split-dropdown-display\"), l = Po(st), f = {\n        getApi: e,\n        onSetup: o.onSetup\n      }, __.sketch({\n        dom: {\n          tag: \"div\",\n          classes: [\"tox-split-button\"],\n          attributes: _lt({\n            \"aria-pressed\": !1\n          }, YO(o.tooltip, r.providers))\n        },\n        onExecute: function onExecute(t) {\n          o.onAction(e(t));\n        },\n        onItemExecute: function onItemExecute(t, n, e) {},\n        splitDropdownBehaviours: nc([Yv(r.providers.isDisabled), pv(), mm(\"split-dropdown-events\", [Cr(T_, Hg.focus), vv(f, l), bv(f, l)]), vw.config({})]),\n        eventOrder: ((i = {})[Gi()] = [\"alloy.base.behaviour\", \"split-dropdown-events\"], i),\n        toggleClass: \"tox-tbtn--enabled\",\n        lazySink: r.getSink,\n        fetch: (u = e, a = o, c = r.providers, function (n) {\n          return jy(function (t) {\n            return a.fetch(t);\n          }).map(function (t) {\n            return vt.from(Xb(Yo(Ob(Ir(\"menu-value\"), t, function (t) {\n              a.onItemAction(u(n), t);\n            }, a.columns, a.presets, Sh.CLOSE_ON_EXECUTE, a.select.getOr(T), c), {\n              movement: _b(a.columns, a.presets),\n              menuBehaviours: Kh(\"auto\" !== a.columns ? [] : [ou(function (o, t) {\n                ah(o, 4, Jp(a.presets)).each(function (t) {\n                  var n = t.numRows,\n                      e = t.numColumns;\n                  Fg.setGridSize(o, n, e);\n                });\n              })])\n            })));\n          });\n        }),\n        parts: {\n          menu: Zp(0, o.columns, o.presets)\n        },\n        components: [__.parts.button(qO(o.icon, o.text, vt.none(), vt.some(s), vt.some([Lg.config({\n          toggleClass: \"tox-tbtn--enabled\",\n          toggleOnExecute: !1\n        })]), r.providers)), __.parts.arrow({\n          dom: {\n            tag: \"button\",\n            classes: [\"tox-tbtn\", \"tox-split-button__chevron\"],\n            innerHtml: Um(\"chevron-down\", r.providers.icons)\n          },\n          buttonBehaviours: nc([Yv(r.providers.isDisabled), pv(), jm()])\n        }), __.parts[\"aria-descriptor\"]({\n          text: r.providers.translate(\"To open the popup, press Shift+Enter\")\n        })]\n      });\n\n      function e(e) {\n        return {\n          isDisabled: function isDisabled() {\n            return gd.isDisabled(e);\n          },\n          setDisabled: function setDisabled(t) {\n            return gd.set(e, t);\n          },\n          setIconFill: function setIconFill(t, n) {\n            Iu(e.element, 'svg path[id=\"' + t + '\"], rect[id=\"' + t + '\"]').each(function (t) {\n              on(t, \"fill\", n);\n            });\n          },\n          setIconStroke: function setIconStroke(t, n) {\n            Iu(e.element, 'svg path[id=\"' + t + '\"], rect[id=\"' + t + '\"]').each(function (t) {\n              on(t, \"stroke\", n);\n            });\n          },\n          setActive: function setActive(n) {\n            on(e.element, \"aria-pressed\", n), Iu(e.element, \"span\").each(function (t) {\n              e.getSystem().getByDom(t).each(function (t) {\n                return Lg.set(t, n);\n              });\n            });\n          },\n          isActive: function isActive() {\n            return Iu(e.element, \"span\").exists(function (t) {\n              return e.getSystem().getByDom(t).exists(Lg.isOn);\n            });\n          }\n        };\n      }\n\n      var o, r, i, u, a, c, s, l, f;\n    }),\n    grouptoolbarbutton: JO(function (t) {\n      return ao(\"GroupToolbarButton\", K1, t);\n    }, function (t, n, e) {\n      var o,\n          r,\n          i,\n          u,\n          a,\n          c,\n          s = e.ui.registry.getAll().buttons,\n          l = ((o = {})[es] = n.backstage.shared.header.isPositionedAtTop() ? Oc.TopToBottom : Oc.BottomToTop, o);\n      if (iv(e) !== bh.floating) throw new Error(\"Toolbar groups are only supported when using floating toolbar mode\");\n      return i = n.backstage, u = function u(t) {\n        return F_(e, {\n          buttons: s,\n          toolbar: t,\n          allowToolbarGroups: !1\n        }, n, vt.none());\n      }, a = l, c = i.shared, bO.sketch({\n        lazySink: c.getSink,\n        fetch: function fetch() {\n          return jy(function (t) {\n            t(M(u(r.items), RC));\n          });\n        },\n        markers: {\n          toggledClass: \"tox-tbtn--enabled\"\n        },\n        parts: {\n          button: qO((r = t).icon, r.text, r.tooltip, vt.none(), vt.none(), c.providers),\n          toolbar: {\n            dom: {\n              tag: \"div\",\n              classes: [\"tox-toolbar__overflow\"],\n              attributes: a\n            }\n          }\n        }\n      });\n    }),\n    styleSelectButton: function styleSelectButton(t, n) {\n      return KC(t, e = n.backstage, jO(t, _lt({\n        type: \"advanced\"\n      }, e.styleselect)));\n      var e;\n    },\n    fontsizeSelectButton: function fontsizeSelectButton(t, n) {\n      return KC(t, n.backstage, LO(t));\n    },\n    fontSelectButton: function fontSelectButton(t, n) {\n      return KC(t, n.backstage, NO(t));\n    },\n    formatButton: function formatButton(t, n) {\n      return KC(t, n.backstage, UO(t));\n    },\n    alignMenuButton: function alignMenuButton(t, n) {\n      return KC(t, n.backstage, HO(t));\n    }\n  },\n      A_ = {\n    styleselect: M_.styleSelectButton,\n    fontsizeselect: M_.fontsizeSelectButton,\n    fontselect: M_.fontSelectButton,\n    formatselect: M_.formatButton,\n    align: M_.alignMenuButton\n  },\n      F_ = function F_(o, c, s, l) {\n    var e,\n        t,\n        n,\n        r,\n        i = (n = c.toolbar, r = c.buttons, !1 === n ? [] : void 0 === n || !0 === n ? (e = r, t = M(B_, function (t) {\n      var n = F(t.items, function (t) {\n        return Tt(e, t) || Tt(A_, t);\n      });\n      return {\n        name: t.name,\n        items: n\n      };\n    }), F(t, function (t) {\n      return 0 < t.items.length;\n    })) : y(n) ? M(n.split(\"|\"), function (t) {\n      return {\n        items: t.trim().split(\" \")\n      };\n    }) : f(n, function (t) {\n      return Tt(t, \"name\") && Tt(t, \"items\");\n    }) ? n : (console.error(\"Toolbar type should be string, string[], boolean or ToolbarGroup[]\"), []));\n    return F(M(i, function (t) {\n      var n = z(t.items, function (t) {\n        return 0 === t.trim().length ? [] : (r = o, n = c.buttons, i = t, u = c.allowToolbarGroups, a = s, e = l, tt(n, i.toLowerCase()).orThunk(function () {\n          return e.bind(function (t) {\n            return K(t, function (t) {\n              return tt(n, t + i.toLowerCase());\n            });\n          });\n        }).fold(function () {\n          return tt(A_, i.toLowerCase()).map(function (t) {\n            return t(r, a);\n          }).orThunk(function () {\n            return vt.none();\n          });\n        }, function (t) {\n          return \"grouptoolbarbutton\" !== t.type || u ? (e = a, o = r, tt(M_, (n = t).type).fold(function () {\n            return console.error(\"skipping button defined by\", n), vt.none();\n          }, function (t) {\n            return vt.some(t(n, e, o));\n          })) : (console.warn(\"Ignoring the '\" + i + \"' toolbar button. Group toolbar buttons are only supported when using floating toolbar mode and cannot be nested.\"), vt.none());\n          var n, e, o;\n        }).toArray());\n        var r, n, i, u, a, e;\n      });\n      return {\n        title: vt.from(o.translate(t.name)),\n        items: n\n      };\n    }), function (t) {\n      return 0 < t.items.length;\n    });\n  },\n      I_ = le(),\n      R_ = I_.os.isiOS() && I_.os.version.major <= 12,\n      V_ = Object.freeze({\n    __proto__: null,\n    render: function render(e, n, t, o, r) {\n      var i = Po(0),\n          u = n.outerContainer;\n      RO(e);\n      var a = At.fromDom(r.targetNode),\n          c = tn(ge(a)),\n          s = n.mothership;\n      pf(a, s, Bn), Ns(c, n.uiMothership), e.on(\"PostRender\", function () {\n        $O(e, n, t, o), i.set(e.getWin().innerWidth), FO.setMenubar(u, NC(e, t)), FO.setSidebar(u, t.sidebar), function (e, t) {\n          function n() {\n            var t = c.get();\n            t.left === u.innerWidth && t.top === u.innerHeight || (c.set(ke(u.innerWidth, u.innerHeight)), Wv(e));\n          }\n\n          function o() {\n            var t = e.getDoc().documentElement,\n                n = s.get();\n            n.left === t.offsetWidth && n.top === t.offsetHeight || (s.set(ke(t.offsetWidth, t.offsetHeight)), Wv(e));\n          }\n\n          function r(t) {\n            return e.fire(\"ScrollContent\", t);\n          }\n\n          var i = e.dom,\n              u = e.getWin(),\n              a = e.getDoc().documentElement,\n              c = Po(ke(u.innerWidth, u.innerHeight)),\n              s = Po(ke(a.offsetWidth, a.offsetHeight));\n          i.bind(u, \"resize\", n), i.bind(u, \"scroll\", r);\n          var l = hc(At.fromDom(e.getBody()), \"load\", o),\n              f = t.uiMothership.element;\n          e.on(\"hide\", function () {\n            dn(f, \"display\", \"none\");\n          }), e.on(\"show\", function () {\n            bn(f, \"display\");\n          }), e.on(\"NodeChange\", o), e.on(\"remove\", function () {\n            l.unbind(), i.unbind(u, \"resize\", n), i.unbind(u, \"scroll\", r), u = null;\n          });\n        }(e, n);\n      });\n      var l,\n          f,\n          d,\n          m,\n          g = FO.getSocket(u).getOrDie(\"Could not find expected socket element\");\n      R_ && (mn(g.element, {\n        overflow: \"scroll\",\n        \"-webkit-overflow-scrolling\": \"touch\"\n      }), f = function f() {\n        e.fire(\"ScrollContent\");\n      }, d = null, m = function m() {\n        for (var t = [], n = 0; n < arguments.length; n++) {\n          t[n] = arguments[n];\n        }\n\n        b(d) && (d = setTimeout(function () {\n          d = null, f.apply(null, t);\n        }, 20));\n      }, l = pc(g.element, \"scroll\", m), e.on(\"remove\", l.unbind)), gv(e, n), e.addCommand(\"ToggleSidebar\", function (t, n) {\n        FO.toggleSidebar(u, n), e.fire(\"ToggleSidebar\");\n      }), e.addQueryValueHandler(\"ToggleSidebar\", function () {\n        return FO.whichSidebar(u);\n      });\n      var p = iv(e);\n      p !== bh.sliding && p !== bh.floating || e.on(\"ResizeWindow ResizeEditor ResizeContent\", function () {\n        var t = e.getWin().innerWidth;\n        t !== i.get() && (FO.refreshToolbar(n.outerContainer), i.set(t));\n      });\n      var h = {\n        enable: function enable() {\n          mv(n, !1);\n        },\n        disable: function disable() {\n          mv(n, !0);\n        },\n        isDisabled: function isDisabled() {\n          return gd.isDisabled(u);\n        }\n      };\n      return {\n        iframeContainer: g.element.dom,\n        editorContainer: u.element.dom,\n        api: h\n      };\n    }\n  }),\n      P_ = Object.freeze({\n    __proto__: null,\n    render: function render(n, e, o, r, t) {\n      var i = e.mothership,\n          u = e.uiMothership,\n          a = e.outerContainer,\n          c = Po(null),\n          s = At.fromDom(t.targetNode),\n          l = e_(n, s, e, r, c),\n          f = n.getParam(\"toolbar_persist\", !1, \"boolean\");\n\n      function d() {\n        var t;\n        c.get() ? l.show() : (c.set(FO.getHeader(a).getOrDie()), Ns(t = lv(n), i), Ns(t, u), $O(n, e, o, r), FO.setMenubar(a, NC(n, o)), l.show(), function (c, s, l, t) {\n          function n(t) {\n            var n = o_(s, l.isPositionedAtTop()),\n                e = n.pos,\n                o = n.bounds,\n                r = f.get(),\n                i = r.pos,\n                u = r.bounds,\n                a = o.height !== u.height || o.width !== u.width;\n            f.set({\n              pos: e,\n              bounds: o\n            }), a && Wv(c, t), l.isVisible() && (i !== e ? l.update(!0) : a && (l.updateMode(), l.repositionPopups()));\n          }\n\n          var f = Po(o_(s, l.isPositionedAtTop()));\n          t || (c.on(\"activate\", l.show), c.on(\"deactivate\", l.hide)), c.on(\"SkinLoaded ResizeWindow\", function () {\n            return l.update(!0);\n          }), c.on(\"NodeChange keydown\", function (t) {\n            lp.requestAnimationFrame(function () {\n              return n(t);\n            });\n          }), c.on(\"ScrollWindow\", function () {\n            return l.updateMode();\n          });\n          var e = mc();\n          e.set(hc(At.fromDom(c.getBody()), \"load\", n)), c.on(\"remove\", function () {\n            e.clear();\n          });\n        }(n, s, l, f), n.nodeChanged());\n      }\n\n      function m() {\n        return lp.setEditorTimeout(n, d, 0);\n      }\n\n      VO(n), n.on(\"show\", d), n.on(\"hide\", l.hide), f || (n.on(\"focus\", m), n.on(\"blur\", l.hide)), n.on(\"init\", function () {\n        (n.hasFocus() || f) && m();\n      }), gv(n, e);\n      var g = {\n        show: function show() {\n          l.show();\n        },\n        hide: function hide() {\n          l.hide();\n        },\n        enable: function enable() {\n          mv(e, !1);\n        },\n        disable: function disable() {\n          mv(e, !0);\n        },\n        isDisabled: function isDisabled() {\n          return gd.isDisabled(a);\n        }\n      };\n      return {\n        editorContainer: a.element.dom,\n        api: g\n      };\n    }\n  }),\n      H_ = \"contexttoolbar-hide\",\n      z_ = function z_(t, n) {\n    var e,\n        o,\n        r,\n        i,\n        u = t.label.fold(function () {\n      return {};\n    }, function (t) {\n      return {\n        \"aria-label\": t\n      };\n    }),\n        a = zm(Dy.sketch({\n      inputClasses: [\"tox-toolbar-textfield\", \"tox-toolbar-nav-js\"],\n      data: t.initValue(),\n      inputAttributes: u,\n      selectOnFocus: !0,\n      inputBehaviours: nc([Fg.config({\n        mode: \"special\",\n        onEnter: function onEnter(t) {\n          return c.findPrimary(t).map(function (t) {\n            return yr(t), !0;\n          });\n        },\n        onLeft: function onLeft(t, n) {\n          return n.cut(), vt.none();\n        },\n        onRight: function onRight(t, n) {\n          return n.cut(), vt.none();\n        }\n      })])\n    })),\n        c = (e = a, o = t.commands, r = n, i = M(o, function (t) {\n      return zm((\"contextformtogglebutton\" === t.type ? function (t, n, e) {\n        var o = n.original;\n        o.primary;\n        var r = B(o, [\"primary\"]),\n            i = co(_p(_lt(_lt({}, r), {\n          type: \"togglebutton\",\n          onAction: st\n        })));\n        return D_(i, e.backstage.shared.providers, [r_(t, n)]);\n      } : function (t, n, e) {\n        var o = n.original;\n        o.primary;\n        var r = B(o, [\"primary\"]),\n            i = co(Op(_lt(_lt({}, r), {\n          type: \"button\",\n          onAction: st\n        })));\n        return E_(i, e.backstage.shared.providers, [r_(t, n)]);\n      })(e, t, {\n        backstage: {\n          shared: {\n            providers: r\n          }\n        }\n      }));\n    }), {\n      asSpecs: function asSpecs() {\n        return M(i, function (t) {\n          return t.asSpec();\n        });\n      },\n      findPrimary: function findPrimary(e) {\n        return K(o, function (t, n) {\n          return t.primary ? vt.from(i[n]).bind(function (t) {\n            return t.getOpt(e);\n          }).filter(O(gd.isDisabled)) : vt.none();\n        });\n      }\n    });\n    return [{\n      title: vt.none(),\n      items: [a.asSpec()]\n    }, {\n      title: vt.none(),\n      items: c.asSpecs()\n    }];\n  },\n      N_ = {\n    valignCentre: [],\n    alignCentre: [],\n    alignLeft: [\"tox-pop--align-left\"],\n    alignRight: [\"tox-pop--align-right\"],\n    right: [\"tox-pop--right\"],\n    left: [\"tox-pop--left\"],\n    bottom: [\"tox-pop--bottom\"],\n    top: [\"tox-pop--top\"],\n    inset: [\"tox-pop--inset\"]\n  },\n      L_ = {\n    maxHeightFunction: Vc(),\n    maxWidthFunction: pO()\n  },\n      W_ = Ir(\"forward-slide\"),\n      U_ = Ir(\"backward-slide\"),\n      j_ = Ir(\"change-slide-event\"),\n      G_ = \"tox-pop--resizing\",\n      X_ = \"tox-pop--transition\",\n      Y_ = {\n    unsupportedLength: [\"em\", \"ex\", \"cap\", \"ch\", \"ic\", \"rem\", \"lh\", \"rlh\", \"vw\", \"vh\", \"vi\", \"vb\", \"vmin\", \"vmax\", \"cm\", \"mm\", \"Q\", \"in\", \"pc\", \"pt\", \"px\"],\n    fixed: [\"px\", \"pt\"],\n    relative: [\"%\"],\n    empty: [\"\"]\n  },\n      q_ = (h_ = [\"Infinity\", (g_ = \"[0-9]+\") + \"\\\\.\" + K_(g_) + K_(p_ = \"[eE][+-]?[0-9]+\"), \"\\\\.\" + g_ + K_(p_), g_ + K_(p_)].join(\"|\"), new RegExp(\"^([+-]?(?:\" + h_ + \"))(.*)$\"));\n\n  function K_(t) {\n    return \"(?:\" + t + \")?\";\n  }\n\n  function J_(u, a) {\n    function n() {\n      var t = a.getOptions(u),\n          r = a.getCurrent(u).map(a.hash),\n          i = gc();\n      return M(t, function (o) {\n        return {\n          type: \"togglemenuitem\",\n          text: a.display(o),\n          onSetup: function onSetup(n) {\n            function t(t) {\n              t && (i.on(function (t) {\n                return t.setActive(!1);\n              }), i.set(n)), n.setActive(t);\n            }\n\n            t(mt(r, a.hash(o)));\n            var e = a.watcher(u, o, t);\n            return function () {\n              i.clear(), e();\n            };\n          },\n          onAction: function onAction() {\n            return a.setCurrent(u, o);\n          }\n        };\n      });\n    }\n\n    u.ui.registry.addMenuButton(a.name, {\n      tooltip: a.text,\n      icon: a.icon,\n      fetch: function fetch(t) {\n        return t(n());\n      },\n      onSetup: a.onToolbarSetup\n    }), u.ui.registry.addNestedMenuItem(a.name, {\n      type: \"nestedmenuitem\",\n      text: a.text,\n      getSubmenuItems: n,\n      onSetup: a.onMenuSetup\n    });\n  }\n\n  function $_(t, n) {\n    return function () {\n      t.execCommand(\"mceToggleFormat\", !1, n);\n    };\n  }\n\n  function Q_(t) {\n    var n, e;\n    !function (e) {\n      fS.each([{\n        name: \"bold\",\n        text: \"Bold\",\n        icon: \"bold\"\n      }, {\n        name: \"italic\",\n        text: \"Italic\",\n        icon: \"italic\"\n      }, {\n        name: \"underline\",\n        text: \"Underline\",\n        icon: \"underline\"\n      }, {\n        name: \"strikethrough\",\n        text: \"Strikethrough\",\n        icon: \"strike-through\"\n      }, {\n        name: \"subscript\",\n        text: \"Subscript\",\n        icon: \"subscript\"\n      }, {\n        name: \"superscript\",\n        text: \"Superscript\",\n        icon: \"superscript\"\n      }], function (t, n) {\n        e.ui.registry.addToggleButton(t.name, {\n          tooltip: t.text,\n          icon: t.icon,\n          onSetup: jC(e, t.name),\n          onAction: $_(e, t.name)\n        });\n      });\n\n      for (var t = 1; t <= 6; t++) {\n        var n = \"h\" + t;\n        e.ui.registry.addToggleButton(n, {\n          text: n.toUpperCase(),\n          tooltip: \"Heading \" + t,\n          onSetup: jC(e, n),\n          onAction: $_(e, n)\n        });\n      }\n    }(t), n = t, fS.each([{\n      name: \"cut\",\n      text: \"Cut\",\n      action: \"Cut\",\n      icon: \"cut\"\n    }, {\n      name: \"copy\",\n      text: \"Copy\",\n      action: \"Copy\",\n      icon: \"copy\"\n    }, {\n      name: \"paste\",\n      text: \"Paste\",\n      action: \"Paste\",\n      icon: \"paste\"\n    }, {\n      name: \"help\",\n      text: \"Help\",\n      action: \"mceHelp\",\n      icon: \"help\"\n    }, {\n      name: \"selectall\",\n      text: \"Select all\",\n      action: \"SelectAll\",\n      icon: \"select-all\"\n    }, {\n      name: \"newdocument\",\n      text: \"New document\",\n      action: \"mceNewDocument\",\n      icon: \"new-document\"\n    }, {\n      name: \"removeformat\",\n      text: \"Clear formatting\",\n      action: \"RemoveFormat\",\n      icon: \"remove-formatting\"\n    }, {\n      name: \"remove\",\n      text: \"Remove\",\n      action: \"Delete\",\n      icon: \"remove\"\n    }], function (t) {\n      n.ui.registry.addButton(t.name, {\n        tooltip: t.text,\n        icon: t.icon,\n        onAction: YC(n, t.action)\n      });\n    }), e = t, fS.each([{\n      name: \"blockquote\",\n      text: \"Blockquote\",\n      action: \"mceBlockQuote\",\n      icon: \"quote\"\n    }], function (t) {\n      e.ui.registry.addToggleButton(t.name, {\n        tooltip: t.text,\n        icon: t.icon,\n        onAction: YC(e, t.action),\n        onSetup: jC(e, t.name)\n      });\n    });\n  }\n\n  function Z_(n, e) {\n    return GC(n, \"Undo Redo AddUndo TypingUndo ClearUndos SwitchMode\", function (t) {\n      t.setDisabled(n.mode.isReadOnly() || !n.undoManager[e]());\n    });\n  }\n\n  function tT(t) {\n    var n;\n    t.ui.registry.addButton(\"visualaid\", {\n      tooltip: \"Visual aids\",\n      text: \"Visual aids\",\n      onAction: YC(t, \"mceToggleVisualAid\")\n    }), t.ui.registry.addToggleMenuItem(\"visualaid\", {\n      text: \"Visual aids\",\n      onSetup: GC(n = t, \"VisualAid\", function (t) {\n        t.setActive(n.hasVisual);\n      }),\n      onAction: YC(t, \"mceToggleVisualAid\")\n    });\n  }\n\n  function nT(t, n) {\n    var e,\n        o,\n        r,\n        i,\n        u,\n        a,\n        c,\n        s,\n        l,\n        f,\n        d,\n        m,\n        g,\n        p,\n        h,\n        v,\n        b,\n        y,\n        x,\n        w,\n        S,\n        k,\n        C,\n        O,\n        _,\n        T = t;\n\n    St([{\n      name: \"alignleft\",\n      text: \"Align left\",\n      cmd: \"JustifyLeft\",\n      icon: \"align-left\"\n    }, {\n      name: \"aligncenter\",\n      text: \"Align center\",\n      cmd: \"JustifyCenter\",\n      icon: \"align-center\"\n    }, {\n      name: \"alignright\",\n      text: \"Align right\",\n      cmd: \"JustifyRight\",\n      icon: \"align-right\"\n    }, {\n      name: \"alignjustify\",\n      text: \"Justify\",\n      cmd: \"JustifyFull\",\n      icon: \"align-justify\"\n    }], function (t) {\n      T.ui.registry.addToggleButton(t.name, {\n        tooltip: t.text,\n        icon: t.icon,\n        onAction: YC(T, t.cmd),\n        onSetup: jC(T, t.name)\n      });\n    }), T.ui.registry.addButton(\"alignnone\", {\n      tooltip: \"No alignment\",\n      icon: \"align-none\",\n      onAction: YC(T, \"JustifyNone\")\n    }), Q_(O = t), _ = O, fS.each([{\n      name: \"bold\",\n      text: \"Bold\",\n      action: \"Bold\",\n      icon: \"bold\",\n      shortcut: \"Meta+B\"\n    }, {\n      name: \"italic\",\n      text: \"Italic\",\n      action: \"Italic\",\n      icon: \"italic\",\n      shortcut: \"Meta+I\"\n    }, {\n      name: \"underline\",\n      text: \"Underline\",\n      action: \"Underline\",\n      icon: \"underline\",\n      shortcut: \"Meta+U\"\n    }, {\n      name: \"strikethrough\",\n      text: \"Strikethrough\",\n      action: \"Strikethrough\",\n      icon: \"strike-through\",\n      shortcut: \"\"\n    }, {\n      name: \"subscript\",\n      text: \"Subscript\",\n      action: \"Subscript\",\n      icon: \"subscript\",\n      shortcut: \"\"\n    }, {\n      name: \"superscript\",\n      text: \"Superscript\",\n      action: \"Superscript\",\n      icon: \"superscript\",\n      shortcut: \"\"\n    }, {\n      name: \"removeformat\",\n      text: \"Clear formatting\",\n      action: \"RemoveFormat\",\n      icon: \"remove-formatting\",\n      shortcut: \"\"\n    }, {\n      name: \"newdocument\",\n      text: \"New document\",\n      action: \"mceNewDocument\",\n      icon: \"new-document\",\n      shortcut: \"\"\n    }, {\n      name: \"cut\",\n      text: \"Cut\",\n      action: \"Cut\",\n      icon: \"cut\",\n      shortcut: \"Meta+X\"\n    }, {\n      name: \"copy\",\n      text: \"Copy\",\n      action: \"Copy\",\n      icon: \"copy\",\n      shortcut: \"Meta+C\"\n    }, {\n      name: \"paste\",\n      text: \"Paste\",\n      action: \"Paste\",\n      icon: \"paste\",\n      shortcut: \"Meta+V\"\n    }, {\n      name: \"selectall\",\n      text: \"Select all\",\n      action: \"SelectAll\",\n      icon: \"select-all\",\n      shortcut: \"Meta+A\"\n    }], function (t) {\n      _.ui.registry.addMenuItem(t.name, {\n        text: t.text,\n        icon: t.icon,\n        shortcut: t.shortcut,\n        onAction: YC(_, t.action)\n      });\n    }), _.ui.registry.addMenuItem(\"codeformat\", {\n      text: \"Code\",\n      icon: \"sourcecode\",\n      onAction: $_(_, \"code\")\n    }), C = qC(0, d = l = n, HO(f = s = t)), f.ui.registry.addNestedMenuItem(\"align\", {\n      text: d.shared.providers.translate(\"Align\"),\n      getSubmenuItems: function getSubmenuItems() {\n        return C.items.validateItems(C.getStyleItems());\n      }\n    }), p = qC(0, g = l, NO(m = s)), m.ui.registry.addNestedMenuItem(\"fontformats\", {\n      text: g.shared.providers.translate(\"Fonts\"),\n      getSubmenuItems: function getSubmenuItems() {\n        return p.items.validateItems(p.getStyleItems());\n      }\n    }), h = s, b = _lt({\n      type: \"advanced\"\n    }, (v = l).styleselect), y = qC(0, v, jO(h, b)), h.ui.registry.addNestedMenuItem(\"formats\", {\n      text: \"Formats\",\n      getSubmenuItems: function getSubmenuItems() {\n        return y.items.validateItems(y.getStyleItems());\n      }\n    }), w = qC(0, l, UO(x = s)), x.ui.registry.addNestedMenuItem(\"blockformats\", {\n      text: \"Blocks\",\n      getSubmenuItems: function getSubmenuItems() {\n        return w.items.validateItems(w.getStyleItems());\n      }\n    }), k = qC(0, l, LO(S = s)), S.ui.registry.addNestedMenuItem(\"fontsizes\", {\n      text: \"Font sizes\",\n      getSubmenuItems: function getSubmenuItems() {\n        return k.items.validateItems(k.getStyleItems());\n      }\n    }), (a = u = t).ui.registry.addMenuItem(\"undo\", {\n      text: \"Undo\",\n      icon: \"undo\",\n      shortcut: \"Meta+Z\",\n      onSetup: Z_(a, \"hasUndo\"),\n      onAction: YC(a, \"undo\")\n    }), a.ui.registry.addMenuItem(\"redo\", {\n      text: \"Redo\",\n      icon: \"redo\",\n      shortcut: \"Meta+Y\",\n      onSetup: Z_(a, \"hasRedo\"),\n      onAction: YC(a, \"redo\")\n    }), (c = u).ui.registry.addButton(\"undo\", {\n      tooltip: \"Undo\",\n      icon: \"undo\",\n      disabled: !0,\n      onSetup: Z_(c, \"hasUndo\"),\n      onAction: YC(c, \"undo\")\n    }), c.ui.registry.addButton(\"redo\", {\n      tooltip: \"Redo\",\n      icon: \"redo\",\n      disabled: !0,\n      onSetup: Z_(c, \"hasRedo\"),\n      onAction: YC(c, \"redo\")\n    }), function (t) {\n      var i;\n      (i = t).addCommand(\"mceApplyTextcolor\", function (t, n) {\n        var e,\n            o = t,\n            r = n;\n        (e = i).undoManager.transact(function () {\n          e.focus(), e.formatter.apply(o, {\n            value: r\n          }), e.nodeChanged();\n        });\n      }), i.addCommand(\"mceRemoveTextcolor\", function (t) {\n        var n,\n            e = t;\n        (n = i).undoManager.transact(function () {\n          n.focus(), n.formatter.remove(e, {\n            value: null\n          }, null, !0), n.nodeChanged();\n        });\n      });\n      var n = Po(Fb),\n          e = Po(Fb);\n      kb(t, \"forecolor\", \"forecolor\", \"Text color\", n), kb(t, \"backcolor\", \"hilitecolor\", \"Background color\", e), Cb(t, \"forecolor\", \"forecolor\", \"Text color\"), Cb(t, \"backcolor\", \"hilitecolor\", \"Background color\");\n    }(t), tT(t), (r = t).ui.registry.addButton(\"outdent\", {\n      tooltip: \"Decrease indent\",\n      icon: \"outdent\",\n      onSetup: GC(i = r, \"NodeChange\", function (t) {\n        t.setDisabled(!i.queryCommandState(\"outdent\"));\n      }),\n      onAction: YC(r, \"outdent\")\n    }), r.ui.registry.addButton(\"indent\", {\n      tooltip: \"Increase indent\",\n      icon: \"indent\",\n      onAction: YC(r, \"indent\")\n    }), J_(e = t, NT), o = e, vt.from(o.getParam(\"content_langs\", void 0, \"array\")).map(function (t) {\n      return {\n        name: \"language\",\n        text: \"Language\",\n        icon: \"language\",\n        getOptions: rt(t),\n        hash: function hash(t) {\n          return E(t.customCode) ? t.code : t.code + \"/\" + t.customCode;\n        },\n        display: function display(t) {\n          return t.title;\n        },\n        watcher: function watcher(t, n, e) {\n          return t.formatter.formatChanged(\"lang\", e, !1, {\n            value: n.code,\n            customValue: n.customCode\n          }).unbind;\n        },\n        getCurrent: function getCurrent(t) {\n          return mr(At.fromDom(t.selection.getNode()), function (t) {\n            return vt.some(t).filter(Xn).bind(function (n) {\n              return an(n, \"lang\").map(function (t) {\n                return {\n                  code: t,\n                  customCode: an(n, \"data-mce-lang\").getOrUndefined(),\n                  title: \"\"\n                };\n              });\n            });\n          });\n        },\n        setCurrent: function setCurrent(t, n) {\n          return t.execCommand(\"Lang\", !1, n);\n        },\n        onToolbarSetup: function onToolbarSetup(t) {\n          var n = mc();\n          return t.setActive(o.formatter.match(\"lang\", {}, void 0, !0)), n.set(o.formatter.formatChanged(\"lang\", t.setActive, !0)), n.clear;\n        }\n      };\n    }).each(function (t) {\n      return J_(e, t);\n    });\n  }\n\n  function eT(t, n) {\n    return {\n      type: \"makeshift\",\n      x: t,\n      y: n\n    };\n  }\n\n  function oT(t) {\n    return \"longpress\" === t.type || 0 === t.type.indexOf(\"touch\");\n  }\n\n  function rT(t, n) {\n    return \"contextmenu\" === n.type || \"longpress\" === n.type ? t.inline ? function (t) {\n      if (oT(t)) {\n        var n = t.touches[0];\n        return eT(n.pageX, n.pageY);\n      }\n\n      return eT(t.pageX, t.pageY);\n    }(n) : (e = t.getContentAreaContainer(), o = function (t) {\n      if (oT(t)) {\n        var n = t.touches[0];\n        return eT(n.clientX, n.clientY);\n      }\n\n      return eT(t.clientX, t.clientY);\n    }(n), r = ev.DOM.getPos(e), i = r.x, u = r.y, eT(o.x + i, o.y + u)) : LT(t);\n    var e, o, r, i, u;\n  }\n\n  function iT(t, n, e) {\n    switch (e) {\n      case \"node\":\n        return {\n          type: \"node\",\n          node: vt.some(At.fromDom((o = t).selection.getNode())),\n          root: At.fromDom(o.getBody())\n        };\n\n      case \"point\":\n        return rT(t, n);\n\n      case \"selection\":\n        return LT(t);\n    }\n\n    var o;\n  }\n\n  function uT(f, d, m, g, p, h) {\n    function t() {\n      var n,\n          e,\n          t,\n          o,\n          r,\n          i,\n          u,\n          a,\n          c,\n          s,\n          l = m();\n      t = l, o = g, r = p, u = !(y || v || b && x), c = iT(n = f, e = d, a = i = h), s = _lt({\n        bubble: Sc(0, \"point\" === a ? 12 : 0, UT),\n        layouts: WT,\n        overrides: {\n          maxWidthFunction: pO(),\n          maxHeightFunction: Vc()\n        }\n      }, c), U0(t, Sh.CLOSE_ON_EXECUTE, o, !0).map(function (t) {\n        e.preventDefault(), up.showMenuWithinBounds(r, {\n          anchor: s\n        }, {\n          menu: {\n            markers: Qp(\"normal\"),\n            highlightImmediately: u\n          },\n          data: t,\n          type: \"horizontal\"\n        }, function () {\n          return vt.some(a_(n, o.shared, \"node\" === i ? \"node\" : \"selection\"));\n        }), n.fire(H_);\n      });\n    }\n\n    var n,\n        e = le(),\n        v = e.os.isiOS(),\n        b = e.os.isOSX(),\n        y = e.os.isAndroid(),\n        x = e.deviceType.isTouch();\n    (b || v) && \"node\" !== h ? (n = function n() {\n      (function (t) {\n        function n() {\n          lp.setEditorTimeout(t, function () {\n            t.selection.setRng(e);\n          }, 10), i();\n        }\n\n        var e = t.selection.getRng();\n\n        function o(t) {\n          t.preventDefault(), t.stopImmediatePropagation();\n        }\n\n        function r() {\n          return i();\n        }\n\n        t.once(\"touchend\", n), t.on(\"mousedown\", o, !0), t.once(\"longpresscancel\", r);\n\n        var i = function i() {\n          t.off(\"touchend\", n), t.off(\"longpresscancel\", r), t.off(\"mousedown\", o);\n        };\n      })(f), t();\n    }, function (t, n) {\n      var e = t.selection;\n\n      if (!(e.isCollapsed() || n.touches.length < 1)) {\n        var o = n.touches[0],\n            r = e.getRng();\n        return xs(t.getWin(), ms.domRange(r)).exists(function (t) {\n          return t.left <= o.clientX && t.right >= o.clientX && t.top <= o.clientY && t.bottom >= o.clientY;\n        });\n      }\n    }(f, d) ? n() : (f.once(\"selectionchange\", n), f.once(\"touchend\", function () {\n      return f.off(\"selectionchange\", n);\n    }))) : t();\n  }\n\n  function aT(t) {\n    return \"string\" == typeof t ? t.split(/[ ,]/) : t;\n  }\n\n  function cT(t) {\n    return t.getParam(\"contextmenu_never_use_native\", !1, \"boolean\");\n  }\n\n  function sT(t) {\n    return y(t) ? \"|\" === t : \"separator\" === t.type;\n  }\n\n  function lT(t, n) {\n    if (0 === n.length) return t;\n    var e = q(t).filter(function (t) {\n      return !sT(t);\n    }).fold(function () {\n      return [];\n    }, function (t) {\n      return [jT];\n    });\n    return t.concat(e).concat(n).concat([jT]);\n  }\n\n  function fT(t, n) {\n    return \"longpress\" !== n.type && (2 !== n.button || n.target === t.getBody() && \"\" === n.pointerType);\n  }\n\n  function dT(t, n) {\n    return fT(t, n) ? t.selection.getStart(!0) : n.target;\n  }\n\n  function mT(s, t, n) {\n    function e(t) {\n      return up.hide(i);\n    }\n\n    function o(c) {\n      var t;\n      cT(s) && c.preventDefault(), c.ctrlKey && !cT(s) || !1 === s.getParam(\"contextmenu\") || (t = function (t, n) {\n        var e = t.getParam(\"contextmenu_avoid_overlap\", \"\", \"string\"),\n            o = fT(t, n) ? \"selection\" : \"point\";\n\n        if (at(e)) {\n          var r = dT(t, n);\n          return Yb(At.fromDom(r), e) ? \"node\" : o;\n        }\n\n        return o;\n      }(s, c), (r() ? uT : function (t, n, e, o, r, i) {\n        var u = e(),\n            a = iT(t, n, i);\n        U0(u, Sh.CLOSE_ON_EXECUTE, o, !1).map(function (t) {\n          n.preventDefault(), up.showMenuAt(r, {\n            anchor: a\n          }, {\n            menu: {\n              markers: Qp(\"normal\")\n            },\n            data: t\n          });\n        });\n      })(s, c, function () {\n        var t,\n            n,\n            e,\n            o = dT(s, c),\n            r = s.ui.registry.getAll(),\n            i = (e = (n = s).ui.registry.getAll().contextMenus, vt.from(n.getParam(\"contextmenu\")).map(aT).getOrThunk(function () {\n          return F(aT(\"link linkchecker image imagetools table spellchecker configurepermanentpen\"), function (t) {\n            return Tt(e, t);\n          });\n        })),\n            u = r.contextMenus,\n            a = o;\n        return 0 < (t = R(i, function (o, t) {\n          return tt(u, t.toLowerCase()).map(function (t) {\n            var n = t.update(a);\n            if (y(n)) return lT(o, n.split(\" \"));\n\n            if (0 < n.length) {\n              var e = M(n, GT);\n              return lT(o, e);\n            }\n\n            return o;\n          }).getOrThunk(function () {\n            return o.concat([t]);\n          });\n        }, [])).length && sT(t[t.length - 1]) && t.pop(), t;\n      }, n, i, t));\n    }\n\n    var r = le().deviceType.isTouch,\n        i = Tu(up.sketch({\n      dom: {\n        tag: \"div\"\n      },\n      lazySink: t,\n      onEscape: function onEscape() {\n        return s.focus();\n      },\n      onShow: function onShow() {\n        return n.setContextMenuState(!0);\n      },\n      onHide: function onHide() {\n        return n.setContextMenuState(!1);\n      },\n      fireDismissalEventInstead: {},\n      inlineBehaviours: nc([mm(\"dismissContextMenu\", [Cr(Yi(), function (t, n) {\n        bf.close(t), s.focus();\n      })])])\n    }));\n    s.on(\"init\", function () {\n      var t = \"ResizeEditor ScrollContent ScrollWindow longpresscancel\" + (r() ? \"\" : \" ResizeWindow\");\n      s.on(t, e), s.on(\"longpress contextmenu\", o);\n    });\n  }\n\n  function gT(n) {\n    return function (t) {\n      return t.translate(-n.left, -n.top);\n    };\n  }\n\n  function pT(n) {\n    return function (t) {\n      return t.translate(n.left, n.top);\n    };\n  }\n\n  function hT(e) {\n    return function (t, n) {\n      return R(e, function (t, n) {\n        return n(t);\n      }, ke(t, n));\n    };\n  }\n\n  function vT(t, n, e) {\n    return t.fold(hT([pT(e), gT(n)]), hT([gT(n)]), hT([]));\n  }\n\n  function bT(t, n, e) {\n    return t.fold(hT([pT(e)]), hT([]), hT([pT(n)]));\n  }\n\n  function yT(t, n, e) {\n    return t.fold(hT([]), hT([gT(e)]), hT([pT(n), gT(e)]));\n  }\n\n  function xT(t, n, e) {\n    var o = t.fold(function (t, n) {\n      return {\n        position: vt.some(\"absolute\"),\n        left: vt.some(t + \"px\"),\n        top: vt.some(n + \"px\")\n      };\n    }, function (t, n) {\n      return {\n        position: vt.some(\"absolute\"),\n        left: vt.some(t - e.left + \"px\"),\n        top: vt.some(n - e.top + \"px\")\n      };\n    }, function (t, n) {\n      return {\n        position: vt.some(\"fixed\"),\n        left: vt.some(t + \"px\"),\n        top: vt.some(n + \"px\")\n      };\n    });\n    return _lt({\n      right: vt.none(),\n      bottom: vt.none()\n    }, o);\n  }\n\n  function wT(t, i, u, a) {\n    function n(o, r) {\n      return function (t, n) {\n        var e = o(i, u, a);\n        return r(t.getOr(e.left), n.getOr(e.top));\n      };\n    }\n\n    return t.fold(n(yT, YT), n(bT, qT), n(vT, KT));\n  }\n\n  function ST(t, n) {\n    var e = un(t, n);\n    return E(e) ? NaN : parseInt(e, 10);\n  }\n\n  function kT(t, n, e, o, r, i) {\n    var u,\n        a,\n        c,\n        s,\n        l,\n        f,\n        d = (u = e, a = o, l = ST(s = t.element, (c = n).leftAttr), f = ST(s, c.topAttr), (isNaN(l) || isNaN(f) ? vt.none() : vt.some(ke(l, f))).fold(function () {\n      return u;\n    }, function (t) {\n      return KT(t.left + a.left, t.top + a.top);\n    })),\n        m = (n.mustSnap ? JT : $T)(t, n, d, r, i),\n        g = vT(d, r, i),\n        p = n,\n        h = g,\n        v = t.element;\n    return on(v, p.leftAttr, h.left + \"px\"), on(v, p.topAttr, h.top + \"px\"), m.fold(function () {\n      return {\n        coord: KT(g.left, g.top),\n        extra: vt.none()\n      };\n    }, function (t) {\n      return {\n        coord: t.output,\n        extra: t.extra\n      };\n    });\n  }\n\n  function CT(t, c, s, l) {\n    return K(t, function (t) {\n      var n,\n          e,\n          o = t.sensor,\n          r = t.range.left,\n          i = t.range.top,\n          u = bT(c, n = s, e = l),\n          a = bT(o, n, e);\n      return Math.abs(u.left - a.left) <= r && Math.abs(u.top - a.top) <= i ? vt.some({\n        output: wT(t.output, c, s, l),\n        extra: t.extra\n      }) : vt.none();\n    });\n  }\n\n  function OT(t, n) {\n    var e;\n    t.getSystem().addToGui(n), Yt((e = n).element).filter(Xn).each(function (n) {\n      hn(n, \"z-index\").each(function (t) {\n        on(n, ZT, t);\n      }), dn(n, \"z-index\", pn(e.element, \"z-index\"));\n    });\n  }\n\n  function _T(t) {\n    Yt(t.element).filter(Xn).each(function (n) {\n      an(n, ZT).fold(function () {\n        return bn(n, \"z-index\");\n      }, function (t) {\n        return dn(n, \"z-index\", t);\n      }), sn(n, ZT);\n    }), t.getSystem().removeFromGui(t);\n  }\n\n  function TT(t, n, e) {\n    return t.getSystem().build(ly.sketch({\n      dom: {\n        styles: {\n          left: \"0px\",\n          top: \"0px\",\n          width: \"100%\",\n          height: \"100%\",\n          position: \"fixed\",\n          \"z-index\": \"1000000000000000\"\n        },\n        classes: [n]\n      },\n      events: e\n    }));\n  }\n\n  function ET(t, n) {\n    return {\n      bounds: t.getBounds(),\n      height: Sn(n.element),\n      width: _n(n.element)\n    };\n  }\n\n  function DT(B, M, t, n, e) {\n    var o = t.update(n, e),\n        A = t.getStartData().getOrThunk(function () {\n      return ET(M, B);\n    });\n    o.each(function (t) {\n      var n,\n          e,\n          o,\n          r,\n          i,\n          u,\n          a,\n          c,\n          s,\n          l,\n          f,\n          d,\n          m,\n          g,\n          p,\n          h,\n          v,\n          b,\n          y,\n          x,\n          w,\n          S,\n          k,\n          C,\n          O,\n          _ = B,\n          T = A,\n          E = t,\n          D = (n = M).getTarget(_.element);\n      n.repositionTarget && (e = Rn(Ut(_.element)), o = Wk(D), S = hn(w = D, \"left\"), k = hn(w, \"top\"), C = hn(w, \"position\"), O = function O(t, n, e) {\n        return (\"fixed\" === e ? KT : YT)(parseInt(t, 10), parseInt(n, 10));\n      }, r = (S.isSome() && k.isSome() && C.isSome() ? vt.some(O(S.getOrDie(), k.getOrDie(), C.getOrDie())) : vt.none()).getOrThunk(function () {\n        var t = Cn(w);\n        return qT(t.left, t.top);\n      }), i = _, u = n.snaps, a = r, c = e, s = o, l = E, f = T, m = u.fold(function () {\n        var e,\n            o,\n            t = vT((e = l.left, o = l.top, a.fold(function (t, n) {\n          return YT(t + e, n + o);\n        }, function (t, n) {\n          return qT(t + e, n + o);\n        }, function (t, n) {\n          return KT(t + e, n + o);\n        })), c, s);\n        return KT(t.left, t.top);\n      }, function (n) {\n        var t = kT(i, n, a, l, c, s);\n        return t.extra.each(function (t) {\n          n.onSensor(i, t);\n        }), t.coord;\n      }), g = c, p = s, h = (d = f).bounds, v = bT(m, g, p), b = ja(v.left, h.x, h.x + h.width - d.width), y = ja(v.top, h.y, h.y + h.height - d.height), x = qT(b, y), gn(D, xT(m.fold(function () {\n        var t = yT(x, g, p);\n        return YT(t.left, t.top);\n      }, rt(x), function () {\n        var t = vT(x, g, p);\n        return KT(t.left, t.top);\n      }), 0, o))), n.onDrag(_, D, E);\n    });\n  }\n\n  function BT(o, t, n, e) {\n    t.each(_T), n.snaps.each(function (t) {\n      var n, e;\n      n = t, sn(e = o.element, n.leftAttr), sn(e, n.topAttr);\n    });\n    var r = n.getTarget(o.element);\n    e.reset(), n.onDrop(o, r);\n  }\n\n  function MT(t) {\n    return function (n, e) {\n      function o(t) {\n        e.setStartData(ET(n, t));\n      }\n\n      return eu(H([Cr(Ui(), function (t) {\n        e.getStartData().each(function () {\n          return o(t);\n        });\n      })], t(n, e, o), !0));\n    };\n  }\n\n  function AT(a, c, s) {\n    return [Cr(mi(), function (n, t) {\n      var e, o, r, i, u;\n      0 === t.event.raw.button && (t.stop(), r = {\n        drop: e = function e() {\n          return BT(n, vt.some(i), a, c);\n        },\n        delayDrop: (o = qb(e, 200)).schedule,\n        forceDrop: e,\n        move: function move(t) {\n          o.cancel(), DT(n, a, c, eE, t);\n        }\n      }, i = TT(n, a.blockerClass, (u = r, eu([Cr(mi(), u.forceDrop), Cr(hi(), u.drop), Cr(gi(), function (t, n) {\n        u.move(n.event);\n      }), Cr(pi(), u.delayDrop)]))), s(n), OT(n, i));\n    })];\n  }\n\n  function FT(a, c, s) {\n    function l(t) {\n      BT(t, f.get(), a, c), f.clear();\n    }\n\n    var f = gc();\n    return [Cr(si(), function (n, t) {\n      function e() {\n        return l(n);\n      }\n\n      t.stop();\n      var o,\n          r,\n          i,\n          u = TT(n, a.blockerClass, (r = o = e, i = function i(t) {\n        DT(n, a, c, rE, t);\n      }, eu([Cr(si(), r), Cr(fi(), o), Cr(di(), o), Cr(li(), function (t, n) {\n        i(n.event);\n      })])));\n      f.set(u), s(n), OT(n, u);\n    }), Cr(li(), function (t, n) {\n      n.stop(), DT(t, a, c, rE, n.event);\n    }), Cr(fi(), function (t, n) {\n      n.stop(), l(t);\n    }), Cr(di(), l)];\n  }\n\n  function IT(t, r, i, u, n, e) {\n    return t.fold(function () {\n      return aE.snap({\n        sensor: qT(i - 20, u - 20),\n        range: ke(n, e),\n        output: qT(vt.some(i), vt.some(u)),\n        extra: {\n          td: r\n        }\n      });\n    }, function (t) {\n      var n = i - 20,\n          e = u - 20,\n          o = t.element.dom.getBoundingClientRect();\n      return aE.snap({\n        sensor: qT(n, e),\n        range: ke(40, 40),\n        output: qT(vt.some(i - o.width / 2), vt.some(u - o.height / 2)),\n        extra: {\n          td: r\n        }\n      });\n    });\n  }\n\n  function RT(t, i, u) {\n    return {\n      getSnapPoints: t,\n      leftAttr: \"data-drag-left\",\n      topAttr: \"data-drag-top\",\n      onSensor: function onSensor(t, n) {\n        var e = n.td,\n            o = i.get(),\n            r = e;\n        o.exists(function (t) {\n          return Lt(t, r);\n        }) || (i.set(e), u(e));\n      },\n      mustSnap: !0\n    };\n  }\n\n  function VT(t) {\n    return zm(fp.sketch({\n      dom: {\n        tag: \"div\",\n        classes: [\"tox-selector\"]\n      },\n      buttonBehaviours: nc([aE.config({\n        mode: \"mouseOrTouch\",\n        blockerClass: \"blocker\",\n        snaps: t\n      }), vw.config({})]),\n      eventOrder: {\n        mousedown: [\"dragging\", \"alloy.base.behaviour\"],\n        touchstart: [\"dragging\", \"alloy.base.behaviour\"]\n      }\n    }));\n  }\n\n  function PT(a, e) {\n    function n(t) {\n      var n = Nn(t);\n      return IT(g.getOpt(e), t, n.x, n.y, n.width, n.height);\n    }\n\n    function o(t) {\n      var n = Nn(t);\n      return IT(p.getOpt(e), t, n.right, n.bottom, n.width, n.height);\n    }\n\n    function r(t, i, n, u) {\n      var e = n(i);\n      aE.snapTo(t, e), function (t) {\n        var n = i.dom.getBoundingClientRect();\n        bn(t.element, \"display\");\n        var e = Xt(At.fromDom(a.getBody())).dom.innerHeight,\n            o = n[u] < 0,\n            r = n[u] > e;\n        (o || r) && dn(t.element, \"display\", \"none\");\n      }(t);\n    }\n\n    function i(t) {\n      return r(h, t, n, \"top\");\n    }\n\n    function u(t) {\n      return r(v, t, o, \"bottom\");\n    }\n\n    var c = Po([]),\n        s = Po([]),\n        t = Po(!1),\n        l = gc(),\n        f = gc(),\n        d = RT(function () {\n      return M(c.get(), n);\n    }, l, function (n) {\n      f.get().each(function (t) {\n        a.fire(\"TableSelectorChange\", {\n          start: n,\n          finish: t\n        });\n      });\n    }),\n        m = RT(function () {\n      return M(s.get(), o);\n    }, f, function (n) {\n      l.get().each(function (t) {\n        a.fire(\"TableSelectorChange\", {\n          start: t,\n          finish: n\n        });\n      });\n    }),\n        g = VT(d),\n        p = VT(m),\n        h = Tu(g.asSpec()),\n        v = Tu(p.asSpec());\n    le().deviceType.isTouch() && (a.on(\"TableSelectionChange\", function (n) {\n      t.get() || (Vs(e, h), Vs(e, v), t.set(!0)), l.set(n.start), f.set(n.finish), n.otherCells.each(function (t) {\n        c.set(t.upOrLeftCells), s.set(t.downOrRightCells), i(n.start), u(n.finish);\n      });\n    }), a.on(\"ResizeEditor ResizeWindow ScrollContent\", function () {\n      l.get().each(i), f.get().each(u);\n    }), a.on(\"TableSelectionClear\", function () {\n      t.get() && (Hs(h), Hs(v), t.set(!1)), l.clear(), f.clear();\n    }));\n  }\n\n  var HT,\n      zT,\n      NT = {\n    name: \"lineheight\",\n    text: \"Line height\",\n    icon: \"line-height\",\n    getOptions: function getOptions(t) {\n      return t.getParam(\"lineheight_formats\", \"1 1.1 1.2 1.3 1.4 1.5 2\", \"string\").split(\" \");\n    },\n    hash: function hash(t) {\n      return r = [\"fixed\", \"relative\", \"empty\"], vt.from(q_.exec(t)).bind(function (t) {\n        var n = Number(t[1]),\n            e = t[2],\n            o = e;\n        return d(r, function (t) {\n          return d(Y_[t], function (t) {\n            return o === t;\n          });\n        }) ? vt.some({\n          value: n,\n          unit: e\n        }) : vt.none();\n      }).map(function (t) {\n        return t.value + t.unit;\n      }).getOr(t);\n      var r;\n    },\n    display: h,\n    watcher: function watcher(t, n, e) {\n      return t.formatter.formatChanged(\"lineheight\", e, !1, {\n        value: n\n      }).unbind;\n    },\n    getCurrent: function getCurrent(t) {\n      return vt.from(t.queryCommandValue(\"LineHeight\"));\n    },\n    setCurrent: function setCurrent(t, n) {\n      return t.execCommand(\"LineHeight\", !1, n);\n    }\n  },\n      LT = function LT(t) {\n    return {\n      type: \"selection\",\n      root: At.fromDom(t.selection.getNode())\n    };\n  },\n      WT = {\n    onLtr: function onLtr() {\n      return [$a, Xa, Ya, qa, Ka, Ja, cp, sp, Am, Bm, Mm, Dm];\n    },\n    onRtl: function onRtl() {\n      return [$a, Ya, Xa, Ka, qa, Ja, cp, sp, Mm, Dm, Am, Bm];\n    }\n  },\n      UT = {\n    valignCentre: [],\n    alignCentre: [],\n    alignLeft: [\"tox-pop--align-left\"],\n    alignRight: [\"tox-pop--align-right\"],\n    right: [\"tox-pop--right\"],\n    left: [\"tox-pop--left\"],\n    bottom: [\"tox-pop--bottom\"],\n    top: [\"tox-pop--top\"]\n  },\n      jT = {\n    type: \"separator\"\n  },\n      GT = function GT(n) {\n    function t(t) {\n      return {\n        text: t.text,\n        icon: t.icon,\n        disabled: t.disabled,\n        shortcut: t.shortcut\n      };\n    }\n\n    var e;\n    if (y(n)) return n;\n\n    switch (n.type) {\n      case \"separator\":\n        return jT;\n\n      case \"submenu\":\n        return _lt(_lt({\n          type: \"nestedmenuitem\"\n        }, t(n)), {\n          getSubmenuItems: function getSubmenuItems() {\n            var t = n.getSubmenuItems();\n            return y(t) ? t : M(t, GT);\n          }\n        });\n\n      default:\n        return _lt(_lt({\n          type: \"menuitem\"\n        }, t(n)), {\n          onAction: (e = n.onAction, function () {\n            return e();\n          })\n        });\n    }\n  },\n      XT = Ho([{\n    offset: [\"x\", \"y\"]\n  }, {\n    absolute: [\"x\", \"y\"]\n  }, {\n    fixed: [\"x\", \"y\"]\n  }]),\n      YT = XT.offset,\n      qT = XT.absolute,\n      KT = XT.fixed,\n      JT = function JT(t, n, l, f, d) {\n    var e = n.getSnapPoints(t);\n    return CT(e, l, f, d).orThunk(function () {\n      return R(e, function (n, e) {\n        var t,\n            o,\n            r,\n            i,\n            u,\n            a,\n            c,\n            s = (t = e.sensor, e.range.left, e.range.top, i = bT(l, o = f, r = d), u = bT(t, o, r), a = Math.abs(i.left - u.left), c = Math.abs(i.top - u.top), ke(a, c));\n        return n.deltas.fold(function () {\n          return {\n            deltas: vt.some(s),\n            snap: vt.some(e)\n          };\n        }, function (t) {\n          return (s.left + s.top) / 2 <= (t.left + t.top) / 2 ? {\n            deltas: vt.some(s),\n            snap: vt.some(e)\n          } : n;\n        });\n      }, {\n        deltas: vt.none(),\n        snap: vt.none()\n      }).snap.map(function (t) {\n        return {\n          output: wT(t.output, l, f, d),\n          extra: t.extra\n        };\n      });\n    });\n  },\n      $T = function $T(t, n, e, o, r) {\n    return CT(n.getSnapPoints(t), e, o, r);\n  },\n      QT = Object.freeze({\n    __proto__: null,\n    snapTo: function snapTo(t, n, e, o) {\n      var r,\n          i,\n          u,\n          a = n.getTarget(t.element);\n      n.repositionTarget && (r = Rn(Ut(t.element)), i = Wk(a), gn(a, xT({\n        coord: wT((u = o).output, u.output, r, i),\n        extra: u.extra\n      }.coord, 0, i)));\n    }\n  }),\n      ZT = \"data-initial-z-index\",\n      tE = To(\"snaps\", [mo(\"getSnapPoints\"), Ju(\"onSensor\"), mo(\"leftAttr\"), mo(\"topAttr\"), Eo(\"lazyViewport\", Fe), Eo(\"mustSnap\", !1)]),\n      nE = [Eo(\"useFixed\", T), mo(\"blockerClass\"), Eo(\"getTarget\", h), Eo(\"onDrag\", st), Eo(\"repositionTarget\", !0), Eo(\"onDrop\", st), Io(\"getBounds\", Fe), tE],\n      eE = Object.freeze({\n    __proto__: null,\n    getData: function getData(t) {\n      return vt.from(ke(t.x, t.y));\n    },\n    getDelta: function getDelta(t, n) {\n      return ke(n.left - t.left, n.top - t.top);\n    }\n  }),\n      oE = H(H([], nE, !0), [ta(\"dragger\", {\n    handlers: MT(AT)\n  })], !1),\n      rE = Object.freeze({\n    __proto__: null,\n    getData: function getData(t) {\n      var n,\n          e = t.raw.touches;\n      return 1 === e.length ? (n = e[0], vt.some(ke(n.clientX, n.clientY))) : vt.none();\n    },\n    getDelta: function getDelta(t, n) {\n      return ke(n.left - t.left, n.top - t.top);\n    }\n  }),\n      iE = H(H([], nE, !0), [ta(\"dragger\", {\n    handlers: MT(FT)\n  })], !1),\n      uE = H(H([], nE, !0), [ta(\"dragger\", {\n    handlers: MT(function (t, n, e) {\n      return H(H([], AT(t, n, e), !0), FT(t, n, e), !0);\n    })\n  })], !1),\n      aE = wa({\n    branchKey: \"mode\",\n    branches: Object.freeze({\n      __proto__: null,\n      mouse: oE,\n      touch: iE,\n      mouseOrTouch: uE\n    }),\n    name: \"dragging\",\n    active: {\n      events: function events(t, n) {\n        return t.dragger.handlers(t, n);\n      }\n    },\n    extra: {\n      snap: function snap(t) {\n        return {\n          sensor: t.sensor,\n          range: t.range,\n          output: t.output,\n          extra: vt.from(t.extra)\n        };\n      }\n    },\n    state: Object.freeze({\n      __proto__: null,\n      init: function init() {\n        var i = vt.none(),\n            n = vt.none(),\n            t = rt({});\n        return wu({\n          readState: t,\n          reset: function reset() {\n            i = vt.none(), n = vt.none();\n          },\n          update: function update(r, t) {\n            return r.getData(t).bind(function (t) {\n              return n = r, e = t, o = i.map(function (t) {\n                return n.getDelta(t, e);\n              }), i = vt.some(e), o;\n              var n, e, o;\n            });\n          },\n          getStartData: function getStartData() {\n            return n;\n          },\n          setStartData: function setStartData(t) {\n            n = vt.some(t);\n          }\n        });\n      }\n    }),\n    apis: QT\n  });\n\n  function cE(t, n, e) {\n    var o,\n        r,\n        i,\n        u,\n        a,\n        c,\n        s = At.fromDom(t.getContainer());\n    J((o = t, r = n, i = e, u = wn(s), a = On(s), (c = {}).height = t_(u + r.top, dh(o), gh(o)), i === HT.Both && (c.width = t_(a + r.left, fh(o), mh(o))), c), function (t, n) {\n      return dn(s, n, ZO(t)), 0;\n    }), t.fire(\"ResizeEditor\");\n  }\n\n  function sE(t, n, e, o) {\n    return cE(t, ke(20 * e, 20 * o), n), vt.some(!0);\n  }\n\n  function lE(t, n) {\n    var e, o, r, i, u, a, c, s, l, f, d, m, g, p, h, v;\n    return {\n      dom: {\n        tag: \"div\",\n        classes: [\"tox-statusbar\"]\n      },\n      components: (v = [], t.getParam(\"elementpath\", !0, \"boolean\") && v.push((g = t, h = n, (p = {}).delimiter || (p.delimiter = \"\\xbb\"), {\n        dom: {\n          tag: \"div\",\n          classes: [\"tox-statusbar__path\"],\n          attributes: {\n            role: \"navigation\"\n          }\n        },\n        behaviours: nc([Fg.config({\n          mode: \"flow\",\n          selector: \"div[role=button]\"\n        }), gd.config({\n          disabled: h.isDisabled\n        }), pv(), py.config({}), Rg.config({}), mm(\"elementPathEvents\", [ou(function (r, t) {\n          g.shortcuts.add(\"alt+F11\", \"focus statusbar elementpath\", function () {\n            return Fg.focusIn(r);\n          }), g.on(\"NodeChange\", function (t) {\n            var n,\n                o,\n                e = function (t) {\n              for (var n = [], e = t.length; 0 < e--;) {\n                var o = t[e];\n\n                if (1 === o.nodeType && !function (t) {\n                  if (1 === t.nodeType) {\n                    if (\"BR\" === t.nodeName || t.getAttribute(\"data-mce-bogus\")) return 1;\n                    if (\"bookmark\" === t.getAttribute(\"data-mce-type\")) return 1;\n                  }\n                }(o)) {\n                  var r = g.fire(\"ResolveName\", {\n                    name: o.nodeName.toLowerCase(),\n                    target: o\n                  });\n                  if (r.isDefaultPrevented() || n.push({\n                    name: r.name,\n                    element: o\n                  }), r.isPropagationStopped()) break;\n                }\n              }\n\n              return n;\n            }(t.parents);\n\n            0 < e.length ? Rg.set(r, (n = M(e || [], function (n, t) {\n              return fp.sketch({\n                dom: {\n                  tag: \"div\",\n                  classes: [\"tox-statusbar__path-item\"],\n                  attributes: {\n                    role: \"button\",\n                    \"data-index\": t,\n                    \"tab-index\": -1,\n                    \"aria-level\": t + 1\n                  },\n                  innerHtml: n.name\n                },\n                action: function action(t) {\n                  g.focus(), g.selection.select(n.element), g.nodeChanged();\n                },\n                buttonBehaviours: nc([$v(h.isDisabled), pv()])\n              });\n            }), o = {\n              dom: {\n                tag: \"div\",\n                classes: [\"tox-statusbar__path-divider\"],\n                attributes: {\n                  \"aria-hidden\": !0\n                },\n                innerHtml: \" \" + p.delimiter + \" \"\n              }\n            }, R(n.slice(1), function (t, n) {\n              var e = t;\n              return e.push(o), e.push(n), e;\n            }, [n[0]]))) : Rg.set(r, []);\n          });\n        })])]),\n        components: []\n      })), t.hasPlugin(\"wordcount\") && v.push((f = t, d = n, fp.sketch({\n        dom: {\n          tag: \"button\",\n          classes: [\"tox-statusbar__wordcount\"]\n        },\n        components: [],\n        buttonBehaviours: nc([$v(d.isDisabled), pv(), py.config({}), Rg.config({}), Df.config({\n          store: {\n            mode: \"memory\",\n            initialValue: {\n              mode: \"words\",\n              count: {\n                words: 0,\n                characters: 0\n              }\n            }\n          }\n        }), mm(\"wordcount-events\", [uu(function (t) {\n          var n = Df.getValue(t),\n              e = \"words\" === n.mode ? \"characters\" : \"words\";\n          Df.setValue(t, {\n            mode: e,\n            count: n.count\n          }), b(t, n.count, e);\n        }), ou(function (e) {\n          f.on(\"wordCountUpdate\", function (t) {\n            var n = Df.getValue(e).mode;\n            Df.setValue(e, {\n              mode: n,\n              count: t.wordCount\n            }), b(e, t.wordCount, n);\n          });\n        })])]),\n        eventOrder: ((m = {})[Ii()] = [\"disabling\", \"alloy.base.behaviour\", \"wordcount-events\"], m)\n      }))), t.getParam(\"branding\", !0, \"boolean\") && v.push({\n        dom: {\n          tag: \"span\",\n          classes: [\"tox-statusbar__branding\"],\n          innerHtml: '<a href=\"https://www.tiny.cloud/?utm_campaign=editor_referral&amp;utm_medium=poweredby&amp;utm_source=tinymce&amp;utm_content=v5\" rel=\"noopener\" target=\"_blank\" tabindex=\"-1\" aria-label=\"' + (l = dp.translate([\"Powered by {0}\", \"Tiny\"])) + '\">' + l + \"</a>\"\n        }\n      }), e = 0 < v.length ? [{\n        dom: {\n          tag: \"div\",\n          classes: [\"tox-statusbar__text-container\"]\n        },\n        components: v\n      }] : [], i = n, a = !(u = r = t).hasPlugin(\"autoresize\"), o = (s = !1 === (c = u.getParam(\"resize\", a)) ? HT.None : \"both\" === c ? HT.Both : HT.Vertical) === HT.None ? vt.none() : vt.some(Xm(\"resize-handle\", {\n        tag: \"div\",\n        classes: [\"tox-statusbar__resize-handle\"],\n        attributes: {\n          title: i.translate(\"Resize\")\n        },\n        behaviours: [aE.config({\n          mode: \"mouse\",\n          repositionTarget: !1,\n          onDrag: function onDrag(t, n, e) {\n            return cE(r, e, s);\n          },\n          blockerClass: \"tox-blocker\"\n        }), Fg.config({\n          mode: \"special\",\n          onLeft: function onLeft() {\n            return sE(r, s, -1, 0);\n          },\n          onRight: function onRight() {\n            return sE(r, s, 1, 0);\n          },\n          onUp: function onUp() {\n            return sE(r, s, 0, -1);\n          },\n          onDown: function onDown() {\n            return sE(r, s, 0, 1);\n          }\n        }), py.config({}), Hg.config({})]\n      }, i.icons)), e.concat(o.toArray()))\n    };\n\n    function b(t, n, e) {\n      return Rg.set(t, [ri(d.translate([\"{0} \" + e, n[e]]))]);\n    }\n  }\n\n  function fE(d) {\n    function m() {\n      return i.bind(FO.getHeader);\n    }\n\n    function g() {\n      return Ve.value(y);\n    }\n\n    function p() {\n      return i.bind(function (t) {\n        return FO.getThrobber(t);\n      }).getOrDie(\"Could not find throbber element\");\n    }\n\n    var t,\n        n,\n        e,\n        o,\n        r = d.inline,\n        h = r ? P_ : V_,\n        v = dv(d) ? q1 : H1,\n        i = vt.none(),\n        u = le(),\n        a = u.browser.isIE() ? [\"tox-platform-ie\"] : [],\n        c = u.deviceType.isTouch() ? [\"tox-platform-touch\"] : [],\n        s = av(d),\n        l = lv(d),\n        f = dp.isRtl() ? {\n      attributes: {\n        dir: \"rtl\"\n      }\n    } : {},\n        b = {\n      attributes: ((t = {})[es] = s ? Oc.BottomToTop : Oc.TopToBottom, t)\n    },\n        y = Tu((n = Lt(be(), l) && \"grid\" === pn(l, \"display\"), e = {\n      dom: _lt({\n        tag: \"div\",\n        classes: [\"tox\", \"tox-silver-sink\", \"tox-tinymce-aux\"].concat(a).concat(c)\n      }, f),\n      behaviours: nc([ff.config({\n        useFixed: function useFixed() {\n          return v.isDocked(m);\n        }\n      })])\n    }, o = {\n      dom: {\n        styles: {\n          width: document.body.clientWidth + \"px\"\n        }\n      },\n      events: eu([Cr(ji(), function () {\n        dn(J.element, \"width\", document.body.clientWidth + \"px\");\n      })])\n    }, Yo(e, n ? o : {}))),\n        x = zm({\n      dom: {\n        tag: \"div\",\n        classes: [\"tox-anchorbar\"]\n      }\n    }),\n        w = Nk(y, d, function () {\n      return i.bind(function (t) {\n        return x.getOpt(t);\n      }).getOrDie(\"Could not find a anchor bar element\");\n    }),\n        S = FO.parts.menubar({\n      dom: {\n        tag: \"div\",\n        classes: [\"tox-menubar\"]\n      },\n      backstage: w,\n      onEscape: function onEscape() {\n        d.focus();\n      }\n    }),\n        k = iv(d),\n        C = FO.parts.toolbar(_lt({\n      dom: {\n        tag: \"div\",\n        classes: [\"tox-toolbar\"]\n      },\n      getSink: g,\n      providers: w.shared.providers,\n      onEscape: function onEscape() {\n        d.focus();\n      },\n      type: k,\n      lazyToolbar: function lazyToolbar() {\n        return i.bind(function (t) {\n          return FO.getToolbar(t);\n        }).getOrDie(\"Could not find more toolbar element\");\n      },\n      lazyHeader: function lazyHeader() {\n        return m().getOrDie(\"Could not find header element\");\n      }\n    }, b)),\n        O = FO.parts[\"multiple-toolbar\"]({\n      dom: {\n        tag: \"div\",\n        classes: [\"tox-toolbar-overlord\"]\n      },\n      providers: w.shared.providers,\n      onEscape: function onEscape() {\n        d.focus();\n      },\n      type: k\n    }),\n        _ = FO.parts.socket({\n      dom: {\n        tag: \"div\",\n        classes: [\"tox-edit-area\"]\n      }\n    }),\n        T = FO.parts.sidebar({\n      dom: {\n        tag: \"div\",\n        classes: [\"tox-sidebar\"]\n      }\n    }),\n        E = FO.parts.throbber({\n      dom: {\n        tag: \"div\",\n        classes: [\"tox-throbber\"]\n      },\n      backstage: w\n    }),\n        D = d.getParam(\"statusbar\", !0, \"boolean\") && !r ? vt.some(lE(d, w.shared.providers)) : vt.none(),\n        B = {\n      dom: {\n        tag: \"div\",\n        classes: [\"tox-sidebar-wrap\"]\n      },\n      components: [_, T]\n    },\n        M = rv(d),\n        A = hh(d),\n        F = ph(d),\n        I = FO.parts.header({\n      dom: _lt({\n        tag: \"div\",\n        classes: [\"tox-editor-header\"]\n      }, b),\n      components: ft([F ? [S] : [], M ? [O] : A ? [C] : [], sv(d) ? [] : [x.asSpec()]]),\n      sticky: dv(d),\n      editor: d,\n      sharedBackstage: w.shared\n    }),\n        R = ft([s ? [] : [I], r ? [] : [B], s ? [I] : []]),\n        V = ft([[{\n      dom: {\n        tag: \"div\",\n        classes: [\"tox-editor-container\"]\n      },\n      components: R\n    }], r ? [] : D.toArray(), [E]]),\n        P = fv(d),\n        H = _lt(_lt({\n      role: \"application\"\n    }, dp.isRtl() ? {\n      dir: \"rtl\"\n    } : {}), P ? {\n      \"aria-hidden\": \"true\"\n    } : {}),\n        z = Tu(FO.sketch({\n      dom: {\n        tag: \"div\",\n        classes: [\"tox\", \"tox-tinymce\"].concat(r ? [\"tox-tinymce-inline\"] : []).concat(s ? [\"tox-tinymce--toolbar-bottom\"] : []).concat(c).concat(a),\n        styles: _lt({\n          visibility: \"hidden\"\n        }, P ? {\n          opacity: \"0\",\n          border: \"0\"\n        } : {}),\n        attributes: H\n      },\n      components: V,\n      behaviours: nc([pv(), gd.config({\n        disableClass: \"tox-tinymce--disabled\"\n      }), Fg.config({\n        mode: \"cyclic\",\n        selector: \".tox-menubar, .tox-toolbar, .tox-toolbar__primary, .tox-toolbar__overflow--open, .tox-sidebar__overflow--open, .tox-statusbar__path, .tox-statusbar__wordcount, .tox-statusbar__branding a, .tox-statusbar__resize-handle\"\n      })])\n    })),\n        i = vt.some(z);\n\n    d.shortcuts.add(\"alt+F9\", \"focus menubar\", function () {\n      FO.focusMenubar(z);\n    }), d.shortcuts.add(\"alt+F10\", \"focus toolbar\", function () {\n      FO.focusToolbar(z);\n    }), d.addCommand(\"ToggleToolbarDrawer\", function () {\n      FO.toggleToolbarDrawer(z);\n    }), d.addQueryStateHandler(\"ToggleToolbarDrawer\", function () {\n      return FO.isToolbarDrawerToggled(z);\n    });\n    var N,\n        L,\n        W,\n        U,\n        j,\n        G,\n        X,\n        Y,\n        q,\n        K = ny(z),\n        J = ny(y);\n\n    function $() {\n      var t,\n          n,\n          e,\n          o,\n          r,\n          i,\n          u = ZO((o = sh(e = n = d), r = dh(e), i = gh(e), QO(o).map(function (t) {\n        return t_(t, r, i);\n      }).getOr(sh(n)))),\n          a = ZO(n_(t = d).getOr(lh(t)));\n      return d.inline || (vn(\"div\", \"width\", a) && dn(z.element, \"width\", a), vn(\"div\", \"height\", u) ? dn(z.element, \"height\", u) : dn(z.element, \"height\", \"200px\")), u;\n    }\n\n    return N = d, L = K, W = J, U = Sa(), j = pc(U, \"touchstart\", tt), G = pc(U, \"touchmove\", function (t) {\n      return Q(Li(), t);\n    }), X = pc(U, \"touchend\", function (t) {\n      return Q(Wi(), t);\n    }), Y = pc(U, \"mousedown\", tt), q = pc(U, \"mouseup\", function (t) {\n      0 === t.raw.button && Z(wf(), {\n        target: t.target\n      });\n    }), N.on(\"PostRender\", function () {\n      N.on(\"click\", nt), N.on(\"tap\", nt), N.on(\"mouseup\", et), N.on(\"mousedown\", ot), N.on(\"ScrollWindow\", rt), N.on(\"ResizeWindow\", it), N.on(\"ResizeEditor\", ut), N.on(\"AfterProgressState\", at), N.on(\"DismissPopups\", ct);\n    }), N.on(\"remove\", function () {\n      N.off(\"click\", nt), N.off(\"tap\", nt), N.off(\"mouseup\", et), N.off(\"mousedown\", ot), N.off(\"ScrollWindow\", rt), N.off(\"ResizeWindow\", it), N.off(\"ResizeEditor\", ut), N.off(\"AfterProgressState\", at), N.off(\"DismissPopups\", ct), Y.unbind(), j.unbind(), G.unbind(), X.unbind(), q.unbind();\n    }), N.on(\"detach\", function () {\n      Ls(L), Ls(W), L.destroy(), W.destroy();\n    }), {\n      mothership: K,\n      uiMothership: J,\n      backstage: w,\n      renderUI: function renderUI() {\n        var o, r;\n        v.setup(d, w.shared, m), nT(d, w), mT(d, g, w), r = (o = d).ui.registry.getAll().sidebars, St(Ct(r), function (n) {\n          function e() {\n            return mt(vt.from(o.queryCommandValue(\"ToggleSidebar\")), n);\n          }\n\n          var t = r[n];\n          o.ui.registry.addToggleButton(n, {\n            icon: t.icon,\n            tooltip: t.tooltip,\n            onAction: function onAction(t) {\n              o.execCommand(\"ToggleSidebar\", !1, n), t.setActive(e());\n            },\n            onSetup: function onSetup(t) {\n              function n() {\n                return t.setActive(e());\n              }\n\n              return o.on(\"ToggleSidebar\", n), function () {\n                o.off(\"ToggleSidebar\", n);\n              };\n            }\n          });\n        }), SC(d, p, w.shared), dt(d.getParam(\"toolbar_groups\", {}, \"object\"), function (t, n) {\n          d.ui.registry.addGroupToolbarButton(n, t);\n        });\n        var t,\n            n = d.ui.registry.getAll(),\n            e = n.buttons,\n            i = n.menuItems,\n            u = n.contextToolbars,\n            a = n.sidebars,\n            c = vh(d),\n            s = {\n          menuItems: i,\n          menus: (t = d.getParam(\"menu\")) ? dt(t, function (t) {\n            return _lt(_lt({}, t), {\n              items: t.items\n            });\n          }) : {},\n          menubar: d.getParam(\"menubar\"),\n          toolbar: c.getOrThunk(function () {\n            return d.getParam(\"toolbar\", !0);\n          }),\n          allowToolbarGroups: k === bh.floating,\n          buttons: e,\n          sidebar: a\n        };\n        m_(d, u, y, {\n          backstage: w\n        }), PT(d, y);\n        var l = d.getElement(),\n            f = $();\n        return h.render(d, {\n          mothership: K,\n          uiMothership: J,\n          outerContainer: z\n        }, s, w, {\n          targetNode: l,\n          height: f\n        });\n      },\n      getUi: function getUi() {\n        return {\n          channels: {\n            broadcastAll: J.broadcast,\n            broadcastOn: J.broadcastOn,\n            register: st\n          }\n        };\n      }\n    };\n\n    function Q(n, e) {\n      St([L, W], function (t) {\n        t.broadcastEvent(n, e);\n      });\n    }\n\n    function Z(n, e) {\n      St([L, W], function (t) {\n        t.broadcastOn([n], e);\n      });\n    }\n\n    function tt(t) {\n      return Z(yf(), {\n        target: t.target\n      });\n    }\n\n    function nt(t) {\n      return Z(yf(), {\n        target: At.fromDom(t.target)\n      });\n    }\n\n    function et(t) {\n      0 === t.button && Z(wf(), {\n        target: At.fromDom(t.target)\n      });\n    }\n\n    function ot() {\n      St(N.editorManager.get(), function (t) {\n        N !== t && t.fire(\"DismissPopups\", {\n          relatedTarget: N\n        });\n      });\n    }\n\n    function rt(t) {\n      return Q(Ui(), Ac(t));\n    }\n\n    function it(t) {\n      Z(xf(), {}), Q(ji(), Ac(t));\n    }\n\n    function ut() {\n      return Z(xf(), {});\n    }\n\n    function at(t) {\n      t.state && Z(yf(), {\n        target: At.fromDom(N.getContainer())\n      });\n    }\n\n    function ct(t) {\n      Z(yf(), {\n        target: At.fromDom(t.relatedTarget.getContainer())\n      });\n    }\n  }\n\n  function dE(n) {\n    return ar(\"items\", \"items\", Ue(), no(io(function (t) {\n      return ao(\"Checking item of \" + n, nB, t).fold(function (t) {\n        return Ve.error(ur(t));\n      }, function (t) {\n        return Ve.value(t);\n      });\n    })));\n  }\n\n  function mE(t) {\n    return y(t.type) && y(t.name);\n  }\n\n  function gE(t) {\n    return {\n      internalDialog: co(ao(\"dialog\", sB, t)),\n      dataValidator: (n = z(F(dB(t), mE), function (n) {\n        return vt.from(mB[n.type]).fold(function () {\n          return [];\n        }, function (t) {\n          return [go(n.name, t)];\n        });\n      }), $o(n)),\n      initialData: t.initialData\n    };\n    var n;\n  }\n\n  function pE(t) {\n    var e = [],\n        o = {};\n    return J(t, function (t, n) {\n      t.fold(function () {\n        e.push(n);\n      }, function (t) {\n        o[n] = t;\n      });\n    }), 0 < e.length ? Ve.error(e) : Ve.value(o);\n  }\n\n  function hE(t, n) {\n    dn(t, \"height\", n + \"px\"), le().browser.isIE() ? bn(t, \"flex-basis\") : dn(t, \"flex-basis\", n + \"px\");\n  }\n\n  function vE(t, d, n) {\n    Fu(t, '[role=\"dialog\"]').each(function (f) {\n      Iu(f, '[role=\"tablist\"]').each(function (l) {\n        n.get().map(function (t) {\n          return dn(d, \"height\", \"0\"), dn(d, \"flex-basis\", \"0\"), Math.min(t, (e = d, o = l, r = Gt(n = f).dom, i = \"fixed\" === pn(Fu(n, \".tox-dialog-wrap\").getOr(n), \"position\") ? Math.max(r.clientHeight, window.innerHeight) : Math.max(r.offsetHeight, r.scrollHeight), u = wn(e), a = e.dom.offsetLeft >= o.dom.offsetLeft + On(o) ? Math.max(wn(o), u) : u, c = parseInt(pn(n, \"margin-top\"), 10) || 0, s = parseInt(pn(n, \"margin-bottom\"), 10) || 0, i - (wn(n) + c + s - a)));\n          var n, e, o, r, i, u, a, c, s;\n        }).each(function (t) {\n          hE(d, t);\n        });\n      });\n    });\n  }\n\n  function bE(t) {\n    return Iu(t, '[role=\"tabpanel\"]');\n  }\n\n  function yE(t, e) {\n    function o(t) {\n      var n = pE(Df.getValue(t)).getOr({}),\n          e = i.get(),\n          o = Yo(e, n);\n      i.set(o);\n    }\n\n    function r(t) {\n      var n = i.get();\n      Df.setValue(t, n);\n    }\n\n    var u,\n        a,\n        i = Po({}),\n        c = Po(null),\n        n = M(t.tabs, function (t) {\n      return {\n        value: t.name,\n        dom: {\n          tag: \"div\",\n          classes: [\"tox-dialog__body-nav-item\"],\n          innerHtml: e.shared.providers.translate(t.title)\n        },\n        view: function view() {\n          return [eS.sketch(function (n) {\n            return {\n              dom: {\n                tag: \"div\",\n                classes: [\"tox-form\"]\n              },\n              components: M(t.items, function (t) {\n                return hk(n, t, e);\n              }),\n              formBehaviours: nc([Fg.config({\n                mode: \"acyclic\",\n                useTabstopAt: O(p0)\n              }), mm(\"TabView.form.events\", [ou(r), ru(o)]), ic.config({\n                channels: lr([{\n                  key: kB,\n                  value: {\n                    onReceive: o\n                  }\n                }, {\n                  key: CB,\n                  value: {\n                    onReceive: r\n                  }\n                }])\n              })])\n            };\n          })];\n        }\n      };\n    }),\n        s = (u = n, a = gc(), {\n      extraEvents: [ou(function (t) {\n        var o = t.element;\n        bE(o).each(function (n) {\n          var e;\n          dn(n, \"visibility\", \"hidden\"), t.getSystem().getByDom(n).toOptional().each(function (t) {\n            var o, r, i;\n            Y(G((r = n, i = t, M(o = u, function (t, n) {\n              Rg.set(i, o[n].view());\n              var e = r.dom.getBoundingClientRect();\n              return Rg.set(i, []), e.height;\n            })), function (t, n) {\n              return n < t ? -1 : t < n ? 1 : 0;\n            })).fold(a.clear, a.set);\n          }), vE(o, n, a), bn(n, \"visibility\"), e = t, Y(u).each(function (t) {\n            return SB.showTab(e, t.value);\n          }), lp.requestAnimationFrame(function () {\n            vE(o, n, a);\n          });\n        });\n      }), Cr(ji(), function (t) {\n        var n = t.element;\n        bE(n).each(function (t) {\n          vE(n, t, a);\n        });\n      }), Cr(Ty, function (t, n) {\n        var r = t.element;\n        bE(r).each(function (n) {\n          var t = Oa(ge(n));\n          dn(n, \"visibility\", \"hidden\");\n          var e = hn(n, \"height\").map(function (t) {\n            return parseInt(t, 10);\n          });\n          bn(n, \"height\"), bn(n, \"flex-basis\");\n          var o = n.dom.getBoundingClientRect().height;\n          e.forall(function (t) {\n            return t < o;\n          }) ? (a.set(o), vE(r, n, a)) : e.each(function (t) {\n            hE(n, t);\n          }), bn(n, \"visibility\"), t.each(ka);\n        });\n      })],\n      selectFirst: !1\n    });\n    return SB.sketch({\n      dom: {\n        tag: \"div\",\n        classes: [\"tox-dialog__body\"]\n      },\n      onChangeTab: function onChangeTab(t, n, e) {\n        var o = Df.getValue(n);\n        br(t, _y, {\n          name: o,\n          oldName: c.get()\n        }), c.set(o);\n      },\n      tabs: n,\n      components: [SB.parts.tabbar({\n        dom: {\n          tag: \"div\",\n          classes: [\"tox-dialog__body-nav\"]\n        },\n        components: [bB.parts.tabs({})],\n        markers: {\n          tabClass: \"tox-tab\",\n          selectedClass: \"tox-dialog__body-nav-item--active\"\n        },\n        tabbarBehaviours: nc([py.config({})])\n      }), SB.parts.tabview({\n        dom: {\n          tag: \"div\",\n          classes: [\"tox-dialog__body-content\"]\n        }\n      })],\n      selectFirst: s.selectFirst,\n      tabSectionBehaviours: nc([mm(\"tabpanel\", s.extraEvents), Fg.config({\n        mode: \"acyclic\"\n      }), cd.config({\n        find: function find(t) {\n          return Y(SB.getViewItems(t));\n        }\n      }), Df.config({\n        store: {\n          mode: \"manual\",\n          getValue: function getValue(t) {\n            return t.getSystem().broadcastOn([kB], {}), i.get();\n          },\n          setValue: function setValue(t, n) {\n            i.set(n), t.getSystem().broadcastOn([CB], {});\n          }\n        }\n      })])\n    });\n  }\n\n  function xE(t, n, r, e) {\n    return {\n      dom: {\n        tag: \"div\",\n        classes: [\"tox-dialog__content-js\"],\n        attributes: _lt(_lt({}, n.map(function (t) {\n          return {\n            id: t\n          };\n        }).getOr({})), e ? {\n          \"aria-live\": \"polite\"\n        } : {})\n      },\n      components: [],\n      behaviours: nc([cS(0), k_.config({\n        channel: TB,\n        updateState: function updateState(t, n) {\n          return vt.some({\n            isTabPanel: function isTabPanel() {\n              return \"tabpanel\" === n.body.type;\n            }\n          });\n        },\n        renderComponents: function renderComponents(t) {\n          return \"tabpanel\" !== t.body.type ? [(e = t.body, o = r, {\n            dom: {\n              tag: \"div\",\n              classes: [\"tox-dialog__body\"]\n            },\n            components: [{\n              dom: {\n                tag: \"div\",\n                classes: [\"tox-dialog__body-content\"]\n              },\n              components: [(n = zm(eS.sketch(function (n) {\n                return {\n                  dom: {\n                    tag: \"div\",\n                    classes: [\"tox-form\"].concat(e.classes)\n                  },\n                  components: M(e.items, function (t) {\n                    return hk(n, t, o);\n                  })\n                };\n              }))).asSpec()]\n            }],\n            behaviours: nc([Fg.config({\n              mode: \"acyclic\",\n              useTabstopAt: O(p0)\n            }), aS(n), mS(n, {\n              postprocess: function postprocess(t) {\n                return pE(t).fold(function (t) {\n                  return console.error(t), {};\n                }, h);\n              }\n            })])\n          })] : [yE(t.body, r)];\n          var e, o, n;\n        },\n        initialData: t\n      })])\n    };\n  }\n\n  function wE(t, n) {\n    return {\n      dom: {\n        tag: \"div\",\n        styles: {\n          display: \"none\"\n        },\n        classes: [\"tox-dialog__header\"]\n      },\n      components: [t, n]\n    };\n  }\n\n  function SE(t, n) {\n    return JE.parts.close(fp.sketch({\n      dom: {\n        tag: \"button\",\n        classes: [\"tox-button\", \"tox-button--icon\", \"tox-button--naked\"],\n        attributes: {\n          type: \"button\",\n          \"aria-label\": n.translate(\"Close\")\n        }\n      },\n      action: t,\n      buttonBehaviours: nc([py.config({})])\n    }));\n  }\n\n  function kE() {\n    return JE.parts.title({\n      dom: {\n        tag: \"div\",\n        classes: [\"tox-dialog__title\"],\n        innerHtml: \"\",\n        styles: {\n          display: \"none\"\n        }\n      }\n    });\n  }\n\n  function CE(t, n) {\n    return JE.parts.body({\n      dom: {\n        tag: \"div\",\n        classes: [\"tox-dialog__body\"]\n      },\n      components: [{\n        dom: {\n          tag: \"div\",\n          classes: [\"tox-dialog__body-content\"]\n        },\n        components: [{\n          dom: xC(\"<p>\" + n.translate(t) + \"</p>\")\n        }]\n      }]\n    });\n  }\n\n  function OE(t) {\n    return JE.parts.footer({\n      dom: {\n        tag: \"div\",\n        classes: [\"tox-dialog__footer\"]\n      },\n      components: t\n    });\n  }\n\n  function _E(t, n) {\n    return [ly.sketch({\n      dom: {\n        tag: \"div\",\n        classes: [\"tox-dialog__footer-start\"]\n      },\n      components: t\n    }), ly.sketch({\n      dom: {\n        tag: \"div\",\n        classes: [\"tox-dialog__footer-end\"]\n      },\n      components: n\n    })];\n  }\n\n  function TE(n) {\n    var t,\n        e = \"tox-dialog\",\n        o = e + \"-wrap\",\n        r = o + \"__backdrop\",\n        i = e + \"__disable-scroll\";\n    return JE.sketch({\n      lazySink: n.lazySink,\n      onEscape: function onEscape(t) {\n        return n.onEscape(t), vt.some(!0);\n      },\n      useTabstopAt: function useTabstopAt(t) {\n        return !p0(t);\n      },\n      dom: {\n        tag: \"div\",\n        classes: [e].concat(n.extraClasses),\n        styles: _lt({\n          position: \"relative\"\n        }, n.extraStyles)\n      },\n      components: H([n.header, n.body], n.footer.toArray(), !0),\n      parts: {\n        blocker: {\n          dom: xC('<div class=\"' + o + '\"></div>'),\n          components: [{\n            dom: {\n              tag: \"div\",\n              classes: BB ? [r, r + \"--opaque\"] : [r]\n            }\n          }]\n        }\n      },\n      dragBlockClass: o,\n      modalBehaviours: nc(H([Hg.config({}), mm(\"dialog-events\", n.dialogEvents.concat([Br(bi(), function (t, n) {\n        Fg.focusIn(t);\n      })])), mm(\"scroll-lock\", [ou(function () {\n        Yr(be(), i);\n      }), ru(function () {\n        qr(be(), i);\n      })])], n.extraBehaviours, !0)),\n      eventOrder: _lt(((t = {})[Ii()] = [\"dialog-events\"], t[Gi()] = [\"scroll-lock\", \"dialog-events\", \"alloy.base.behaviour\"], t[Xi()] = [\"alloy.base.behaviour\", \"dialog-events\", \"scroll-lock\"], t), n.eventOrder)\n    });\n  }\n\n  function EE(t) {\n    return fp.sketch({\n      dom: {\n        tag: \"button\",\n        classes: [\"tox-button\", \"tox-button--icon\", \"tox-button--naked\"],\n        attributes: {\n          type: \"button\",\n          \"aria-label\": t.translate(\"Close\"),\n          title: t.translate(\"Close\")\n        }\n      },\n      components: [Xm(\"close\", {\n        tag: \"div\",\n        classes: [\"tox-icon\"]\n      }, t.icons)],\n      action: function action(t) {\n        vr(t, wy);\n      }\n    });\n  }\n\n  function DE(t, n, e) {\n    function o(t) {\n      return [ri(e.translate(t.title))];\n    }\n\n    return {\n      dom: {\n        tag: \"div\",\n        classes: [\"tox-dialog__title\"],\n        attributes: _lt({}, n.map(function (t) {\n          return {\n            id: t\n          };\n        }).getOr({}))\n      },\n      components: o(t),\n      behaviours: nc([k_.config({\n        channel: _B,\n        renderComponents: o\n      })])\n    };\n  }\n\n  function BE() {\n    return {\n      dom: xC('<div class=\"tox-dialog__draghandle\"></div>')\n    };\n  }\n\n  function ME(t, n) {\n    return e = {\n      title: n.shared.providers.translate(t),\n      draggable: n.dialog.isDraggableModal()\n    }, o = n.shared.providers, r = JE.parts.title(DE(e, vt.none(), o)), i = JE.parts.draghandle(BE()), u = JE.parts.close(EE(o)), a = [r].concat(e.draggable ? [i] : []).concat([u]), ly.sketch({\n      dom: xC('<div class=\"tox-dialog__header\"></div>'),\n      components: a\n    });\n    var e, o, r, i, u, a;\n  }\n\n  function AE(t, n, e) {\n    return {\n      dom: {\n        tag: \"div\",\n        classes: [\"tox-dialog__busy-spinner\"],\n        attributes: {\n          \"aria-label\": e.translate(t)\n        },\n        styles: {\n          left: \"0px\",\n          right: \"0px\",\n          bottom: \"0px\",\n          top: \"0px\",\n          position: \"absolute\"\n        }\n      },\n      behaviours: n,\n      components: [{\n        dom: xC('<div class=\"tox-spinner\"><div></div><div></div><div></div></div>')\n      }]\n    };\n  }\n\n  function FE(t, o, n) {\n    return {\n      onClose: function onClose() {\n        return n.closeWindow();\n      },\n      onBlock: function onBlock(e) {\n        JE.setBusy(t(), function (t, n) {\n          return AE(e.message, n, o);\n        });\n      },\n      onUnblock: function onUnblock() {\n        JE.setIdle(t());\n      }\n    };\n  }\n\n  function IE(t, n, e, o) {\n    var r;\n    return Tu(TE(_lt(_lt({}, t), {\n      lazySink: o.shared.getSink,\n      extraBehaviours: H([k_.config({\n        channel: OB,\n        updateState: function updateState(t, n) {\n          return vt.some(n);\n        },\n        initialData: n\n      }), pS({})], t.extraBehaviours, !0),\n      onEscape: function onEscape(t) {\n        vr(t, wy);\n      },\n      dialogEvents: e,\n      eventOrder: ((r = {})[Fi()] = [k_.name(), ic.name()], r[Gi()] = [\"scroll-lock\", k_.name(), \"messages\", \"dialog-events\", \"alloy.base.behaviour\"], r[Xi()] = [\"alloy.base.behaviour\", \"dialog-events\", \"messages\", k_.name(), \"scroll-lock\"], r)\n    })));\n  }\n\n  function RE(t) {\n    return M(t, function (t) {\n      return \"menu\" === t.type ? (e = M((n = t).items, function (t) {\n        var n = Po(!1);\n        return _lt(_lt({}, t), {\n          storage: n\n        });\n      }), _lt(_lt({}, n), {\n        items: e\n      })) : t;\n      var n, e;\n    });\n  }\n\n  function VE(t) {\n    return R(t, function (t, n) {\n      return \"menu\" !== n.type ? t : R(n.items, function (t, n) {\n        return t[n.name] = n.storage, t;\n      }, t);\n    }, {});\n  }\n\n  function PE(t, e) {\n    return [Er(bi(), g0), t(xy, function (t, n) {\n      e.onClose(), n.onClose();\n    }), t(wy, function (t, n, e, o) {\n      n.onCancel(t), vr(o, xy);\n    }), Cr(Oy, function (t, n) {\n      return e.onUnblock();\n    }), Cr(Cy, function (t, n) {\n      return e.onBlock(n.event);\n    })];\n  }\n\n  function HE(t, n) {\n    function e(t, n) {\n      return ly.sketch({\n        dom: {\n          tag: \"div\",\n          classes: [\"tox-dialog__footer-\" + t]\n        },\n        components: M(n, function (t) {\n          return t.memento.asSpec();\n        })\n      });\n    }\n\n    var o = A(n.map(function (t) {\n      return t.footerButtons;\n    }).getOr([]), function (t) {\n      return \"start\" === t.align;\n    });\n    return [e(\"start\", o.pass), e(\"end\", o.fail)];\n  }\n\n  function zE(t, e) {\n    return {\n      dom: xC('<div class=\"tox-dialog__footer\"></div>'),\n      components: [],\n      behaviours: nc([k_.config({\n        channel: EB,\n        initialData: t,\n        updateState: function updateState(t, n) {\n          var r = M(n.buttons, function (t) {\n            var n = zm(Q0(t, t.type, e));\n            return {\n              name: t.name,\n              align: t.align,\n              memento: n\n            };\n          });\n          return vt.some({\n            lookupByName: function lookupByName(t, n) {\n              return e = t, o = n, V(r, function (t) {\n                return t.name === o;\n              }).bind(function (t) {\n                return t.memento.getOpt(e);\n              });\n              var e, o;\n            },\n            footerButtons: r\n          });\n        },\n        renderComponents: HE\n      })])\n    };\n  }\n\n  function NE(t, n) {\n    return JE.parts.footer(zE(t, n));\n  }\n\n  function LE(n, e) {\n    if (n.getRoot().getSystem().isConnected()) {\n      var o = cd.getCurrent(n.getFormWrapper()).getOr(n.getFormWrapper());\n      return eS.getField(o, e).fold(function () {\n        var t = n.getFooter();\n        return k_.getState(t).get().bind(function (t) {\n          return t.lookupByName(o, e);\n        });\n      }, function (t) {\n        return vt.some(t);\n      });\n    }\n\n    return vt.none();\n  }\n\n  function WE(c, o, s) {\n    function t(t) {\n      var n = c.getRoot();\n      n.getSystem().isConnected() && t(n);\n    }\n\n    var l = {\n      getData: function getData() {\n        var t = c.getRoot(),\n            n = t.getSystem().isConnected() ? c.getFormWrapper() : t,\n            e = Df.getValue(n),\n            o = dt(s, function (t) {\n          return t.get();\n        });\n        return _lt(_lt({}, e), o);\n      },\n      setData: function setData(a) {\n        t(function (t) {\n          var n,\n              e,\n              o = l.getData(),\n              r = _lt(_lt({}, o), a),\n              i = (n = r, e = c.getRoot(), k_.getState(e).get().map(function (t) {\n            return co(ao(\"data\", t.dataValidator, n));\n          }).getOr(n)),\n              u = c.getFormWrapper();\n\n          Df.setValue(u, i), J(s, function (t, n) {\n            Tt(r, n) && t.set(r[n]);\n          });\n        });\n      },\n      disable: function disable(t) {\n        LE(c, t).each(gd.disable);\n      },\n      enable: function enable(t) {\n        LE(c, t).each(gd.enable);\n      },\n      focus: function focus(t) {\n        LE(c, t).each(Hg.focus);\n      },\n      block: function block(n) {\n        if (!y(n)) throw new Error(\"The dialogInstanceAPI.block function should be passed a blocking message of type string as an argument\");\n        t(function (t) {\n          br(t, Cy, {\n            message: n\n          });\n        });\n      },\n      unblock: function unblock() {\n        t(function (t) {\n          vr(t, Oy);\n        });\n      },\n      showTab: function showTab(e) {\n        t(function (t) {\n          var n = c.getBody();\n          k_.getState(n).get().exists(function (t) {\n            return t.isTabPanel();\n          }) && cd.getCurrent(n).each(function (t) {\n            SB.showTab(t, e);\n          });\n        });\n      },\n      redial: function redial(e) {\n        t(function (t) {\n          var n = o(e);\n          t.getSystem().broadcastOn([OB], n), t.getSystem().broadcastOn([_B], n.internalDialog), t.getSystem().broadcastOn([TB], n.internalDialog), t.getSystem().broadcastOn([EB], n.internalDialog), l.setData(n.initialData);\n        });\n      },\n      close: function close() {\n        t(function (t) {\n          vr(t, xy);\n        });\n      }\n    };\n    return l;\n  }\n\n  function UE(t) {\n    return x(t) && -1 !== RB.indexOf(t.mceAction);\n  }\n\n  function jE(o, t, r, n) {\n    var e,\n        i,\n        u,\n        a = ME(o.title, n),\n        c = (i = {\n      dom: {\n        tag: \"div\",\n        classes: [\"tox-dialog__content-js\"]\n      },\n      components: [{\n        dom: {\n          tag: \"div\",\n          classes: [\"tox-dialog__body-iframe\"]\n        },\n        components: [d0({\n          dom: {\n            tag: \"iframe\",\n            attributes: {\n              src: o.url\n            }\n          },\n          behaviours: nc([py.config({}), Hg.config({})])\n        })]\n      }],\n      behaviours: nc([Fg.config({\n        mode: \"acyclic\",\n        useTabstopAt: O(p0)\n      })])\n    }, JE.parts.body(i)),\n        s = o.buttons.bind(function (t) {\n      return 0 === t.length ? vt.none() : vt.some(NE({\n        buttons: t\n      }, n));\n    }),\n        l = MB(function () {\n      return v;\n    }, FE(function () {\n      return h;\n    }, n.shared.providers, t)),\n        f = _lt(_lt({}, o.height.fold(function () {\n      return {};\n    }, function (t) {\n      return {\n        height: t + \"px\",\n        \"max-height\": t + \"px\"\n      };\n    })), o.width.fold(function () {\n      return {};\n    }, function (t) {\n      return {\n        width: t + \"px\",\n        \"max-width\": t + \"px\"\n      };\n    })),\n        d = o.width.isNone() && o.height.isNone() ? [\"tox-dialog--width-lg\"] : [],\n        m = new IB(o.url, {\n      base_uri: new IB(window.location.href)\n    }),\n        g = m.protocol + \"://\" + m.host + (m.port ? \":\" + m.port : \"\"),\n        p = mc(),\n        h = IE({\n      header: a,\n      body: c,\n      footer: s,\n      extraClasses: d,\n      extraBehaviours: [mm(\"messages\", [ou(function () {\n        var t = pc(At.fromDom(window), \"message\", function (t) {\n          var n, e;\n          m.isSameOrigin(new IB(t.raw.origin)) && (UE(n = t.raw.data) ? function (t, n, e) {\n            switch (e.mceAction) {\n              case \"insertContent\":\n                t.insertContent(e.content);\n                break;\n\n              case \"setContent\":\n                t.setContent(e.content);\n                break;\n\n              case \"execCommand\":\n                var o = !!w(e.ui) && e.ui;\n                t.execCommand(e.cmd, o, e.value);\n                break;\n\n              case \"close\":\n                n.close();\n                break;\n\n              case \"block\":\n                n.block(e.message);\n                break;\n\n              case \"unblock\":\n                n.unblock();\n            }\n          }(r, v, n) : !UE(e = n) && x(e) && Tt(e, \"mceAction\") && o.onMessage(v, n));\n        });\n        p.set(t);\n      }), ru(p.clear)]), ic.config({\n        channels: ((e = {})[DB] = {\n          onReceive: function onReceive(t, n) {\n            Iu(t.element, \"iframe\").each(function (t) {\n              t.dom.contentWindow.postMessage(n, g);\n            });\n          }\n        }, e)\n      })],\n      extraStyles: f\n    }, o, l, n),\n        v = {\n      block: function block(n) {\n        if (!y(n)) throw new Error(\"The urlDialogInstanceAPI.block function should be passed a blocking message of type string as an argument\");\n        b(function (t) {\n          br(t, Cy, {\n            message: n\n          });\n        });\n      },\n      unblock: function unblock() {\n        b(function (t) {\n          vr(t, Oy);\n        });\n      },\n      close: function close() {\n        b(function (t) {\n          vr(t, xy);\n        });\n      },\n      sendMessage: function sendMessage(n) {\n        b(function (t) {\n          t.getSystem().broadcastOn([DB], n);\n        });\n      }\n    };\n\n    function b(t) {\n      u.getSystem().isConnected() && t(u);\n    }\n\n    return {\n      dialog: u = h,\n      instanceApi: v\n    };\n  }\n\n  function GE(t) {\n    function o(t, y) {\n      return gB.open(function (t, n, e) {\n        var o,\n            r,\n            i,\n            u,\n            a,\n            c,\n            s,\n            l,\n            f,\n            d,\n            m,\n            g,\n            p,\n            h,\n            v = n,\n            b = (r = {\n          redial: gB.redial,\n          closeWindow: function closeWindow() {\n            JE.hide(b.dialog), y(b.instanceApi);\n          }\n        }, i = R, c = ME((o = {\n          dataValidator: e,\n          initialData: v,\n          internalDialog: t\n        }).internalDialog.title, i), u = i, a = xE({\n          body: o.internalDialog.body\n        }, vt.none(), u, !1), s = JE.parts.body(a), l = RE(o.internalDialog.buttons), f = VE(l), d = NE({\n          buttons: l\n        }, i), m = AB(function () {\n          return h;\n        }, FE(function () {\n          return p;\n        }, i.shared.providers, r), i.shared.getSink), g = function () {\n          switch (o.internalDialog.size) {\n            case \"large\":\n              return [\"tox-dialog--width-lg\"];\n\n            case \"medium\":\n              return [\"tox-dialog--width-md\"];\n\n            default:\n              return [];\n          }\n        }(), p = IE({\n          header: c,\n          body: s,\n          footer: vt.some(d),\n          extraClasses: g,\n          extraBehaviours: [],\n          extraStyles: {}\n        }, o, m, i), h = WE({\n          getRoot: rt(p),\n          getBody: function getBody() {\n            return JE.getBody(p);\n          },\n          getFooter: function getFooter() {\n            return JE.getFooter(p);\n          },\n          getFormWrapper: function getFormWrapper() {\n            var t = JE.getBody(p);\n            return cd.getCurrent(t).getOr(t);\n          }\n        }, r.redial, f), {\n          dialog: p,\n          instanceApi: h\n        });\n        return JE.show(b.dialog), b.instanceApi.setData(v), b.instanceApi;\n      }, t);\n    }\n\n    function r(t, A, F, I) {\n      return gB.open(function (t, n, e) {\n        function o() {\n          return E.on(function (t) {\n            up.reposition(t), U1.refresh(t);\n          });\n        }\n\n        var r,\n            i,\n            u,\n            a,\n            c,\n            s,\n            l,\n            f,\n            d,\n            m,\n            g,\n            p,\n            h,\n            v,\n            b,\n            y,\n            x,\n            w,\n            S,\n            k,\n            C,\n            O,\n            _,\n            T = co(ao(\"data\", e, n)),\n            E = gc(),\n            D = R.shared.header.isPositionedAtTop(),\n            B = (i = {\n          dataValidator: e,\n          initialData: T,\n          internalDialog: t\n        }, u = {\n          redial: gB.redial,\n          closeWindow: function closeWindow() {\n            E.on(up.hide), V.off(\"ResizeEditor\", o), E.clear(), F(B.instanceApi);\n          }\n        }, a = R, c = I, v = Ir(\"dialog-label\"), b = Ir(\"dialog-content\"), y = zm((f = {\n          title: i.internalDialog.title,\n          draggable: !0\n        }, d = v, m = a.shared.providers, ly.sketch({\n          dom: xC('<div class=\"tox-dialog__header\"></div>'),\n          components: [DE(f, vt.some(d), m), BE(), EE(m)],\n          containerBehaviours: nc([aE.config({\n            mode: \"mouse\",\n            blockerClass: \"blocker\",\n            getTarget: function getTarget(t) {\n              return Ru(t, '[role=\"dialog\"]').getOrDie();\n            },\n            snaps: {\n              getSnapPoints: function getSnapPoints() {\n                return [];\n              },\n              leftAttr: \"data-drag-left\",\n              topAttr: \"data-drag-top\"\n            }\n          })])\n        }))), x = zm((g = {\n          body: i.internalDialog.body\n        }, p = a, h = c, xE(g, vt.some(b), p, h))), w = RE(i.internalDialog.buttons), S = VE(w), k = zm(FB({\n          buttons: w\n        }, a)), C = AB(function () {\n          return _;\n        }, {\n          onBlock: function onBlock(e) {\n            fO.block(O, function (t, n) {\n              return AE(e.message, n, a.shared.providers);\n            });\n          },\n          onUnblock: function onUnblock() {\n            fO.unblock(O);\n          },\n          onClose: function onClose() {\n            return u.closeWindow();\n          }\n        }, a.shared.getSink), O = Tu({\n          dom: {\n            tag: \"div\",\n            classes: [\"tox-dialog\", \"tox-dialog-inline\"],\n            attributes: ((s = {\n              role: \"dialog\"\n            })[\"aria-labelledby\"] = v, s[\"aria-describedby\"] = b, s)\n          },\n          eventOrder: ((l = {})[Fi()] = [k_.name(), ic.name()], l[Ii()] = [\"execute-on-form\"], l[Gi()] = [\"reflecting\", \"execute-on-form\"], l),\n          behaviours: nc([Fg.config({\n            mode: \"cyclic\",\n            onEscape: function onEscape(t) {\n              return vr(t, xy), vt.some(!0);\n            },\n            useTabstopAt: function useTabstopAt(t) {\n              return !p0(t) && (\"button\" !== Ft(t) || \"disabled\" !== un(t, \"disabled\"));\n            }\n          }), k_.config({\n            channel: OB,\n            updateState: function updateState(t, n) {\n              return vt.some(n);\n            },\n            initialData: i\n          }), Hg.config({}), mm(\"execute-on-form\", C.concat([Br(bi(), function (t, n) {\n            Fg.focusIn(t);\n          })])), fO.config({\n            getRoot: function getRoot() {\n              return vt.some(O);\n            }\n          }), Rg.config({}), pS({})]),\n          components: [y.asSpec(), x.asSpec(), k.asSpec()]\n        }), _ = WE({\n          getRoot: rt(O),\n          getFooter: function getFooter() {\n            return k.get(O);\n          },\n          getBody: function getBody() {\n            return x.get(O);\n          },\n          getFormWrapper: function getFormWrapper() {\n            var t = x.get(O);\n            return cd.getCurrent(t).getOr(t);\n          }\n        }, u.redial, S), {\n          dialog: O,\n          instanceApi: _\n        }),\n            M = Tu(up.sketch(_lt(_lt({\n          lazySink: R.shared.getSink,\n          dom: {\n            tag: \"div\",\n            classes: []\n          },\n          fireDismissalEventInstead: {}\n        }, D ? {} : {\n          fireRepositionEventInstead: {}\n        }), {\n          inlineBehaviours: nc(H([mm(\"window-manager-inline-events\", [Cr(Yi(), function (t, n) {\n            vr(B.dialog, wy);\n          })])], (r = V, P && D ? [] : [U1.config({\n            contextual: {\n              lazyContext: function lazyContext() {\n                return vt.some(Ae(At.fromDom(r.getContentAreaContainer())));\n              },\n              fadeInClass: \"tox-dialog-dock-fadein\",\n              fadeOutClass: \"tox-dialog-dock-fadeout\",\n              transitionClass: \"tox-dialog-dock-transition\"\n            },\n            modes: [\"top\"]\n          })]), !0)),\n          isExtraPart: function isExtraPart(t, n) {\n            return Yb(e = n, \".tox-alert-dialog\") || Yb(e, \".tox-confirm-dialog\");\n            var e;\n          }\n        })));\n\n        return E.set(M), up.showWithin(M, Eu(B.dialog), {\n          anchor: A\n        }, vt.some(be())), P && D || (U1.refresh(M), V.on(\"ResizeEditor\", o)), B.instanceApi.setData(T), Fg.focusIn(B.dialog), B.instanceApi;\n      }, t);\n    }\n\n    var c,\n        s,\n        l,\n        f,\n        R = t.backstage,\n        V = t.editor,\n        P = dv(V),\n        e = (s = (c = t).backstage.shared, {\n      open: function open(t, n) {\n        function e() {\n          JE.hide(u), n();\n        }\n\n        var o = zm(Q0({\n          name: \"close-alert\",\n          text: \"OK\",\n          primary: !0,\n          align: \"end\",\n          disabled: !1,\n          icon: vt.none()\n        }, \"cancel\", c.backstage)),\n            r = kE(),\n            i = SE(e, s.providers),\n            u = Tu(TE({\n          lazySink: function lazySink() {\n            return s.getSink();\n          },\n          header: wE(r, i),\n          body: CE(t, s.providers),\n          footer: vt.some(OE(_E([], [o.asSpec()]))),\n          onEscape: e,\n          extraClasses: [\"tox-alert-dialog\"],\n          extraBehaviours: [],\n          extraStyles: {},\n          dialogEvents: [Cr(wy, e)],\n          eventOrder: {}\n        }));\n        JE.show(u);\n        var a = o.get(u);\n        Hg.focus(a);\n      }\n    }),\n        i = (f = (l = t).backstage.shared, {\n      open: function open(t, n) {\n        function e(t) {\n          JE.hide(a), n(t);\n        }\n\n        var o = zm(Q0({\n          name: \"yes\",\n          text: \"Yes\",\n          primary: !0,\n          align: \"end\",\n          disabled: !1,\n          icon: vt.none()\n        }, \"submit\", l.backstage)),\n            r = Q0({\n          name: \"no\",\n          text: \"No\",\n          primary: !1,\n          align: \"end\",\n          disabled: !1,\n          icon: vt.none()\n        }, \"cancel\", l.backstage),\n            i = kE(),\n            u = SE(function () {\n          return e(!1);\n        }, f.providers),\n            a = Tu(TE({\n          lazySink: function lazySink() {\n            return f.getSink();\n          },\n          header: wE(i, u),\n          body: CE(t, f.providers),\n          footer: vt.some(OE(_E([], [r, o.asSpec()]))),\n          onEscape: function onEscape() {\n            return e(!1);\n          },\n          extraClasses: [\"tox-confirm-dialog\"],\n          extraBehaviours: [],\n          extraStyles: {},\n          dialogEvents: [Cr(wy, function () {\n            return e(!1);\n          }), Cr(ky, function () {\n            return e(!0);\n          })],\n          eventOrder: {}\n        }));\n        JE.show(a);\n        var c = o.get(a);\n        Hg.focus(c);\n      }\n    });\n    return {\n      open: function open(t, n, e) {\n        return void 0 !== n && \"toolbar\" === n.inline ? r(t, R.shared.anchors.inlineDialog(), e, n.ariaAttrs) : void 0 !== n && \"cursor\" === n.inline ? r(t, R.shared.anchors.cursor(), e, n.ariaAttrs) : o(t, e);\n      },\n      openUrl: function openUrl(t, n) {\n        return e = n, gB.openUrl(function (t) {\n          var n = jE(t, {\n            closeWindow: function closeWindow() {\n              JE.hide(n.dialog), e(n.instanceApi);\n            }\n          }, V, R);\n          return JE.show(n.dialog), n.instanceApi;\n        }, t);\n        var e;\n      },\n      alert: function alert(t, n) {\n        e.open(t, function () {\n          n();\n        });\n      },\n      close: function close(t) {\n        t.close();\n      },\n      confirm: function confirm(t, n) {\n        i.open(t, function (t) {\n          n(t);\n        });\n      }\n    };\n  }\n\n  (zT = HT = HT || {})[zT.None = 0] = \"None\", zT[zT.Both = 1] = \"Both\", zT[zT.Vertical = 2] = \"Vertical\";\n\n  var XE,\n      YE = rt([mo(\"lazySink\"), wo(\"dragBlockClass\"), Io(\"getBounds\", Fe), Eo(\"useTabstopAt\", D), Eo(\"eventOrder\", {}), Zs(\"modalBehaviours\", [Fg]), $u(\"onExecute\"), Zu(\"onEscape\")]),\n      qE = {\n    sketch: h\n  },\n      KE = rt([Qf({\n    name: \"draghandle\",\n    overrides: function overrides(t, n) {\n      return {\n        behaviours: nc([aE.config({\n          mode: \"mouse\",\n          getTarget: function getTarget(t) {\n            return Fu(t, '[role=\"dialog\"]').getOr(t);\n          },\n          blockerClass: t.dragBlockClass.getOrDie(new Error(\"The drag blocker class was not specified for a dialog with a drag handle: \\n\" + JSON.stringify(n, null, 2)).message),\n          getBounds: t.getDragBounds\n        })])\n      };\n    }\n  }), Jf({\n    schema: [mo(\"dom\")],\n    name: \"title\"\n  }), Jf({\n    factory: qE,\n    schema: [mo(\"dom\")],\n    name: \"close\"\n  }), Jf({\n    factory: qE,\n    schema: [mo(\"dom\")],\n    name: \"body\"\n  }), Qf({\n    factory: qE,\n    schema: [mo(\"dom\")],\n    name: \"footer\"\n  }), $f({\n    factory: {\n      sketch: function sketch(t, n) {\n        return _lt(_lt({}, t), {\n          dom: n.dom,\n          components: n.components\n        });\n      }\n    },\n    schema: [Eo(\"dom\", {\n      tag: \"div\",\n      styles: {\n        position: \"fixed\",\n        left: \"0px\",\n        top: \"0px\",\n        right: \"0px\",\n        bottom: \"0px\"\n      }\n    }), Eo(\"components\", [])],\n    name: \"blocker\"\n  })]),\n      JE = Cl({\n    name: \"ModalDialog\",\n    configFields: YE(),\n    partFields: KE(),\n    factory: function factory(a, t, n, r) {\n      var e,\n          i = gc(),\n          o = Ir(\"modal-events\"),\n          u = _lt(_lt({}, a.eventOrder), ((e = {})[Gi()] = [o].concat(a.eventOrder[\"alloy.system.attached\"] || []), e));\n\n      return {\n        uid: a.uid,\n        dom: a.dom,\n        components: t,\n        apis: {\n          show: function show(t) {\n            i.set(t);\n            var n = a.lazySink(t).getOrDie(),\n                e = r.blocker(),\n                o = n.getSystem().build(_lt(_lt({}, e), {\n              components: e.components.concat([Eu(t)]),\n              behaviours: nc([Hg.config({}), mm(\"dialog-blocker-events\", [Br(bi(), function () {\n                Fg.focusIn(t);\n              })])])\n            }));\n            Vs(n, o), Fg.focusIn(t);\n          },\n          hide: function hide(n) {\n            i.clear(), Yt(n.element).each(function (t) {\n              n.getSystem().getByDom(t).each(function (t) {\n                Hs(t);\n              });\n            });\n          },\n          getBody: function getBody(t) {\n            return gl(t, a, \"body\");\n          },\n          getFooter: function getFooter(t) {\n            return gl(t, a, \"footer\");\n          },\n          setIdle: function setIdle(t) {\n            fO.unblock(t);\n          },\n          setBusy: function setBusy(t, n) {\n            fO.block(t, n);\n          }\n        },\n        eventOrder: u,\n        domModification: {\n          attributes: {\n            role: \"dialog\",\n            \"aria-modal\": \"true\"\n          }\n        },\n        behaviours: nl(a.modalBehaviours, [Rg.config({}), Fg.config({\n          mode: \"cyclic\",\n          onEnter: a.onExecute,\n          onEscape: a.onEscape,\n          useTabstopAt: a.useTabstopAt\n        }), fO.config({\n          getRoot: i.get\n        }), mm(o, [ou(function (t) {\n          var n,\n              e,\n              o,\n              r = t.element,\n              i = gl(t, a, \"title\").element,\n              u = an(r, \"id\").fold(function () {\n            var t = Ir(\"dialog-label\");\n            return on(i, \"id\", t), t;\n          }, h);\n          on(r, \"aria-labelledby\", u), n = t.element, e = gl(t, a, \"body\").element, o = vt.from(un(n, \"id\")).fold(function () {\n            var t = Ir(\"dialog-describe\");\n            return on(e, \"id\", t), t;\n          }, h), on(n, \"aria-describedby\", o);\n        })])])\n      };\n    },\n    apis: {\n      show: function show(t, n) {\n        t.show(n);\n      },\n      hide: function hide(t, n) {\n        t.hide(n);\n      },\n      getBody: function getBody(t, n) {\n        return t.getBody(n);\n      },\n      getFooter: function getFooter(t, n) {\n        return t.getFooter(n);\n      },\n      setBusy: function setBusy(t, n, e) {\n        t.setBusy(n, e);\n      },\n      setIdle: function setIdle(t, n) {\n        t.setIdle(n);\n      }\n    }\n  }),\n      $E = $o([po(\"type\"), po(\"name\")].concat(Lh)),\n      QE = er,\n      ZE = [ar(\"name\", \"name\", je(function () {\n    return Ir(\"button-name\");\n  }), nr), Co(\"icon\"), Ao(\"align\", \"end\", [\"start\", \"end\"]), Fo(\"primary\", !1), Fo(\"disabled\", !1)],\n      tD = H(H([], ZE, !0), [po(\"text\")], !1),\n      nD = H([ho(\"type\", [\"submit\", \"cancel\", \"custom\"])], tD, !0),\n      eD = lo(\"type\", {\n    submit: nD,\n    cancel: nD,\n    custom: nD,\n    menu: H([ho(\"type\", [\"menu\"]), Co(\"text\"), Co(\"tooltip\"), Co(\"icon\"), xo(\"items\", $E)], ZE, !0)\n  }),\n      oD = [po(\"type\"), po(\"text\"), ho(\"level\", [\"info\", \"warn\", \"error\", \"success\"]), po(\"icon\"), Eo(\"url\", \"\")],\n      rD = $o(oD),\n      iD = [po(\"type\"), po(\"text\"), Fo(\"disabled\", !1), Fo(\"primary\", !1), ar(\"name\", \"name\", je(function () {\n    return Ir(\"button-name\");\n  }), nr), Co(\"icon\"), Fo(\"borderless\", !1)],\n      uD = $o(iD),\n      aD = [po(\"type\"), po(\"name\"), po(\"label\"), Fo(\"disabled\", !1)],\n      cD = $o(aD),\n      sD = er,\n      lD = [po(\"type\"), po(\"name\")],\n      fD = lD.concat([Co(\"label\")]),\n      dD = fD.concat([Eo(\"columns\", \"auto\")]),\n      mD = $o(dD),\n      gD = Qo([po(\"value\"), po(\"text\"), po(\"icon\")]),\n      pD = $o(fD),\n      hD = nr,\n      vD = $o(fD),\n      bD = nr,\n      yD = lD.concat([Mo(\"tag\", \"textarea\"), po(\"scriptId\"), po(\"scriptUrl\"), Do(\"settings\", void 0, ir)]),\n      xD = lD.concat([Mo(\"tag\", \"textarea\"), vo(\"init\")]),\n      wD = io(function (t) {\n    return ao(\"customeditor.old\", to(xD), t).orThunk(function () {\n      return ao(\"customeditor.new\", to(yD), t);\n    });\n  }),\n      SD = nr,\n      kD = $o(fD),\n      CD = no(Jo),\n      OD = [po(\"type\"), po(\"html\"), Ao(\"presets\", \"presentation\", [\"presentation\", \"document\"])],\n      _D = $o(OD),\n      TD = fD.concat([Fo(\"sandboxed\", !0)]),\n      ED = $o(TD),\n      DD = nr,\n      BD = fD.concat([go(\"currentState\", $o([mo(\"blob\"), po(\"url\")]))]),\n      MD = $o(BD),\n      AD = fD.concat([Co(\"inputMode\"), Co(\"placeholder\"), Fo(\"maximized\", !1), Fo(\"disabled\", !1)]),\n      FD = $o(AD),\n      ID = nr,\n      RD = [po(\"text\"), po(\"value\")],\n      VD = [po(\"text\"), xo(\"items\", (XE = Rt(function () {\n    return PD;\n  }), {\n    extract: function extract(t, n) {\n      return XE().extract(t, n);\n    },\n    toString: function toString() {\n      return XE().toString();\n    }\n  }))],\n      PD = eo([$o(RD), $o(VD)]),\n      HD = fD.concat([xo(\"items\", PD), Fo(\"disabled\", !1)]),\n      zD = $o(HD),\n      ND = nr,\n      LD = fD.concat([yo(\"items\", [po(\"text\"), po(\"value\")]), Bo(\"size\", 1), Fo(\"disabled\", !1)]),\n      WD = $o(LD),\n      UD = nr,\n      jD = fD.concat([Fo(\"constrain\", !0), Fo(\"disabled\", !1)]),\n      GD = $o(jD),\n      XD = $o([po(\"width\"), po(\"height\")]),\n      YD = [po(\"type\"), xo(\"header\", nr), xo(\"cells\", no(nr))],\n      qD = $o(YD),\n      KD = fD.concat([Co(\"placeholder\"), Fo(\"maximized\", !1), Fo(\"disabled\", !1)]),\n      JD = $o(KD),\n      $D = nr,\n      QD = fD.concat([Ao(\"filetype\", \"file\", [\"image\", \"media\", \"file\"]), Eo(\"disabled\", !1)]),\n      ZD = $o(QD),\n      tB = $o([po(\"value\"), Eo(\"meta\", {})]),\n      nB = Ze(function () {\n    return ro(\"type\", {\n      alertbanner: rD,\n      bar: $o((e = dE(\"bar\"), [po(\"type\"), e])),\n      button: uD,\n      checkbox: cD,\n      colorinput: pD,\n      colorpicker: vD,\n      dropzone: kD,\n      grid: $o((t = dE(\"grid\"), [po(\"type\"), go(\"columns\", tr), t])),\n      iframe: ED,\n      input: FD,\n      listbox: zD,\n      selectbox: WD,\n      sizeinput: GD,\n      textarea: JD,\n      urlinput: ZD,\n      customeditor: wD,\n      htmlpanel: _D,\n      imagetools: MD,\n      collection: mD,\n      label: $o((n = dE(\"label\"), [po(\"type\"), po(\"label\"), n])),\n      table: qD,\n      panel: oB\n    });\n    var t, n, e;\n  }),\n      eB = [po(\"type\"), Eo(\"classes\", []), xo(\"items\", nB)],\n      oB = $o(eB),\n      rB = [ar(\"name\", \"name\", je(function () {\n    return Ir(\"tab-name\");\n  }), nr), po(\"title\"), xo(\"items\", nB)],\n      iB = [po(\"type\"), yo(\"tabs\", rB)],\n      uB = $o(iB),\n      aB = tD,\n      cB = eD,\n      sB = $o([po(\"title\"), go(\"body\", ro(\"type\", {\n    panel: oB,\n    tabpanel: uB\n  })), Mo(\"size\", \"normal\"), xo(\"buttons\", cB), Eo(\"initialData\", {}), Io(\"onAction\", st), Io(\"onChange\", st), Io(\"onSubmit\", st), Io(\"onClose\", st), Io(\"onCancel\", st), Eo(\"onTabChange\", st)]),\n      lB = $o(H([ho(\"type\", [\"cancel\", \"custom\"])], aB, !0)),\n      fB = $o([po(\"title\"), po(\"url\"), ko(\"height\"), ko(\"width\"), _o(\"buttons\", lB), Io(\"onAction\", st), Io(\"onCancel\", st), Io(\"onClose\", st), Io(\"onMessage\", st)]),\n      dB = function dB(t) {\n    return x(t) ? [t].concat(z(Z(t), dB)) : c(t) ? z(t, dB) : [];\n  },\n      mB = {\n    checkbox: sD,\n    colorinput: hD,\n    colorpicker: bD,\n    dropzone: CD,\n    input: ID,\n    iframe: DD,\n    sizeinput: XD,\n    selectbox: UD,\n    listbox: ND,\n    size: XD,\n    textarea: $D,\n    urlinput: tB,\n    customeditor: SD,\n    collection: gD,\n    togglemenuitem: QE\n  },\n      gB = {\n    open: function open(t, n) {\n      var e = gE(n);\n      return t(e.internalDialog, e.initialData, e.dataValidator);\n    },\n    openUrl: function openUrl(t, n) {\n      return t(co(ao(\"dialog\", fB, n)));\n    },\n    redial: gE\n  },\n      pB = kl({\n    name: \"TabButton\",\n    configFields: [Eo(\"uid\", void 0), mo(\"value\"), ar(\"dom\", \"dom\", Ye(function () {\n      return {\n        attributes: {\n          role: \"tab\",\n          id: Ir(\"aria\"),\n          \"aria-selected\": \"false\"\n        }\n      };\n    }), Zo()), wo(\"action\"), Eo(\"domModification\", {}), Zs(\"tabButtonBehaviours\", [Hg, Fg, Df]), mo(\"view\")],\n    factory: function factory(t, n) {\n      return {\n        uid: t.uid,\n        dom: t.dom,\n        components: t.components,\n        events: Sm(t.action),\n        behaviours: nl(t.tabButtonBehaviours, [Hg.config({}), Fg.config({\n          mode: \"execution\",\n          useSpace: !0,\n          useEnter: !0\n        }), Df.config({\n          store: {\n            mode: \"memory\",\n            initialValue: t.value\n          }\n        })]),\n        domModification: t.domModification\n      };\n    }\n  }),\n      hB = rt([mo(\"tabs\"), mo(\"dom\"), Eo(\"clickToDismiss\", !1), Zs(\"tabbarBehaviours\", [hd, Fg]), qu([\"tabClass\", \"selectedClass\"])]),\n      vB = rt([Zf({\n    factory: pB,\n    name: \"tabs\",\n    unit: \"tab\",\n    overrides: function overrides(o) {\n      return {\n        action: function action(t) {\n          var n = t.getSystem().getByUid(o.uid).getOrDie(),\n              e = hd.isHighlighted(n, t);\n          (e && o.clickToDismiss ? function (t, n) {\n            hd.dehighlight(t, n), br(t, Qi(), {\n              tabbar: t,\n              button: n\n            });\n          } : e ? st : function (t, n) {\n            hd.highlight(t, n), br(t, $i(), {\n              tabbar: t,\n              button: n\n            });\n          })(n, t);\n        },\n        domModification: {\n          classes: [o.markers.tabClass]\n        }\n      };\n    }\n  })]),\n      bB = Cl({\n    name: \"Tabbar\",\n    configFields: hB(),\n    partFields: vB(),\n    factory: function factory(t, n, e, o) {\n      return {\n        uid: t.uid,\n        dom: t.dom,\n        components: n,\n        \"debug.sketcher\": \"Tabbar\",\n        domModification: {\n          attributes: {\n            role: \"tablist\"\n          }\n        },\n        behaviours: nl(t.tabbarBehaviours, [hd.config({\n          highlightClass: t.markers.selectedClass,\n          itemClass: t.markers.tabClass,\n          onHighlight: function onHighlight(t, n) {\n            on(n.element, \"aria-selected\", \"true\");\n          },\n          onDehighlight: function onDehighlight(t, n) {\n            on(n.element, \"aria-selected\", \"false\");\n          }\n        }), Fg.config({\n          mode: \"flow\",\n          getInitial: function getInitial(t) {\n            return hd.getHighlighted(t).map(function (t) {\n              return t.element;\n            });\n          },\n          selector: \".\" + t.markers.tabClass,\n          executeOnMove: !0\n        })])\n      };\n    }\n  }),\n      yB = kl({\n    name: \"Tabview\",\n    configFields: [Zs(\"tabviewBehaviours\", [Rg])],\n    factory: function factory(t, n) {\n      return {\n        uid: t.uid,\n        dom: t.dom,\n        behaviours: nl(t.tabviewBehaviours, [Rg.config({})]),\n        domModification: {\n          attributes: {\n            role: \"tabpanel\"\n          }\n        }\n      };\n    }\n  }),\n      xB = rt([Eo(\"selectFirst\", !0), Ju(\"onChangeTab\"), Ju(\"onDismissTab\"), Eo(\"tabs\", []), Zs(\"tabSectionBehaviours\", [])]),\n      wB = rt([Jf({\n    factory: bB,\n    schema: [mo(\"dom\"), bo(\"markers\", [mo(\"tabClass\"), mo(\"selectedClass\")])],\n    name: \"tabbar\",\n    defaults: function defaults(t) {\n      return {\n        tabs: t.tabs\n      };\n    }\n  }), Jf({\n    factory: yB,\n    name: \"tabview\"\n  })]),\n      SB = Cl({\n    name: \"TabSection\",\n    configFields: xB(),\n    partFields: wB(),\n    factory: function factory(i, t, n, e) {\n      function o(t, n) {\n        ml(t, i, \"tabbar\").each(function (t) {\n          n(t).each(yr);\n        });\n      }\n\n      return {\n        uid: i.uid,\n        dom: i.dom,\n        components: t,\n        behaviours: tl(i.tabSectionBehaviours),\n        events: eu(ft([i.selectFirst ? [ou(function (t, n) {\n          o(t, hd.getFirst);\n        })] : [], [Cr($i(), function (t, n) {\n          var o = n.event.button,\n              r = Df.getValue(o);\n          ml(o, i, \"tabview\").each(function (e) {\n            V(i.tabs, function (t) {\n              return t.value === r;\n            }).each(function (t) {\n              var n = t.view();\n              an(o.element, \"id\").each(function (t) {\n                on(e.element, \"aria-labelledby\", t);\n              }), Rg.set(e, n), i.onChangeTab(e, o, n);\n            });\n          });\n        }), Cr(Qi(), function (t, n) {\n          var e = n.event.button;\n          i.onDismissTab(t, e);\n        })]])),\n        apis: {\n          getViewItems: function getViewItems(t) {\n            return ml(t, i, \"tabview\").map(function (t) {\n              return Rg.contents(t);\n            }).getOr([]);\n          },\n          showTab: function showTab(t, e) {\n            o(t, function (n) {\n              return V(hd.getCandidates(n), function (t) {\n                return Df.getValue(t) === e;\n              }).filter(function (t) {\n                return !hd.isHighlighted(n, t);\n              });\n            });\n          }\n        }\n      };\n    },\n    apis: {\n      getViewItems: function getViewItems(t, n) {\n        return t.getViewItems(n);\n      },\n      showTab: function showTab(t, n, e) {\n        t.showTab(n, e);\n      }\n    }\n  }),\n      kB = \"send-data-to-section\",\n      CB = \"send-data-to-view\",\n      OB = Ir(\"update-dialog\"),\n      _B = Ir(\"update-title\"),\n      TB = Ir(\"update-body\"),\n      EB = Ir(\"update-footer\"),\n      DB = Ir(\"body-send-message\"),\n      BB = nb.deviceType.isTouch(),\n      MB = function MB(u, t) {\n    function n(t, i) {\n      return Cr(t, function (e, o) {\n        var n, r;\n        n = e, r = function r(t, n) {\n          i(u(), t, o.event, e);\n        }, k_.getState(n).get().each(function (t) {\n          r(t, n);\n        });\n      });\n    }\n\n    return H(H([], PE(n, t), !0), [n(Sy, function (t, n, e) {\n      n.onAction(t, {\n        name: e.name\n      });\n    })], !1);\n  },\n      AB = function AB(u, t, c) {\n    function n(t, i) {\n      return Cr(t, function (e, o) {\n        var n, r;\n        n = e, r = function r(t, n) {\n          i(u(), t, o.event, e);\n        }, k_.getState(n).get().each(function (t) {\n          r(t.internalDialog, n);\n        });\n      });\n    }\n\n    return H(H([], PE(n, t), !0), [n(ky, function (t, n) {\n      return n.onSubmit(t);\n    }), n(yy, function (t, n, e) {\n      n.onChange(t, {\n        name: e.name\n      });\n    }), n(Sy, function (t, n, e, o) {\n      function r() {\n        return Fg.focusIn(o);\n      }\n\n      function i(t) {\n        return cn(t, \"disabled\") || an(t, \"aria-disabled\").exists(function (t) {\n          return \"true\" === t;\n        });\n      }\n\n      var u = ge(o.element),\n          a = Oa(u);\n      n.onAction(t, {\n        name: e.name,\n        value: e.value\n      }), Oa(u).fold(r, function (n) {\n        i(n) || a.exists(function (t) {\n          return Wt(n, t) && i(t);\n        }) ? r() : c().toOptional().filter(function (t) {\n          return !Wt(t.element, n);\n        }).each(r);\n      });\n    }), n(_y, function (t, n, e) {\n      n.onTabChange(t, {\n        newTabName: e.name,\n        oldTabName: e.oldName\n      });\n    }), ru(function (t) {\n      var n = u();\n      Df.setValue(t, n.getData());\n    })], !1);\n  },\n      FB = zE,\n      IB = tinymce.util.Tools.resolve(\"tinymce.util.URI\"),\n      RB = [\"insertContent\", \"setContent\", \"execCommand\", \"close\", \"block\", \"unblock\"];\n\n  o.add(\"silver\", function (t) {\n    var n = fE(t),\n        e = n.uiMothership,\n        o = n.backstage,\n        r = n.renderUI,\n        i = n.getUi;\n    return uy(t, o.shared), {\n      renderUI: r,\n      getWindowManagerImpl: rt(GE({\n        editor: t,\n        backstage: o\n      })),\n      getNotificationManagerImpl: function getNotificationManagerImpl() {\n        return u = t, r = e, l = {\n          backstage: o\n        }.backstage.shared, {\n          open: function open(t, n) {\n            function e() {\n              n(), up.hide(c);\n            }\n\n            var o = !t.closeButton && t.timeout && (0 < t.timeout || t.timeout < 0),\n                a = Tu(hp.sketch({\n              text: t.text,\n              level: wt([\"success\", \"error\", \"warning\", \"warn\", \"info\"], t.type) ? t.type : void 0,\n              progress: !0 === t.progressBar,\n              icon: vt.from(t.icon),\n              closeButton: !o,\n              onAction: e,\n              iconProvider: l.providers.icons,\n              translationProvider: l.providers.translate\n            })),\n                c = Tu(up.sketch(_lt({\n              dom: {\n                tag: \"div\",\n                classes: [\"tox-notifications-container\"]\n              },\n              lazySink: l.getSink,\n              fireDismissalEventInstead: {}\n            }, l.header.isPositionedAtTop() ? {} : {\n              fireRepositionEventInstead: {}\n            })));\n\n            function s() {\n              var t = Ae(At.fromDom(u.getContentAreaContainer())),\n                  n = Fe(),\n                  e = ja(n.x, t.x, t.right),\n                  o = ja(n.y, t.y, t.bottom),\n                  r = Math.max(t.right, n.right),\n                  i = Math.max(t.bottom, n.bottom);\n              return vt.some(Me(e, o, r - e, i - o));\n            }\n\n            return r.add(c), 0 < t.timeout && lp.setTimeout(function () {\n              e();\n            }, t.timeout), {\n              close: e,\n              moveTo: function moveTo(t, n) {\n                up.showAt(c, Eu(a), {\n                  anchor: {\n                    type: \"makeshift\",\n                    x: t,\n                    y: n\n                  }\n                });\n              },\n              moveRel: function moveRel(t, n) {\n                var e,\n                    o,\n                    r,\n                    i = Eu(a),\n                    u = {\n                  maxHeightFunction: Vc()\n                };\n                \"banner\" !== n && k(t) ? (e = function () {\n                  switch (n) {\n                    case \"bc-bc\":\n                      return sp;\n\n                    case \"tc-tc\":\n                      return cp;\n\n                    case \"tc-bc\":\n                      return Ja;\n\n                    default:\n                      return $a;\n                  }\n                }(), o = {\n                  type: \"node\",\n                  root: be(),\n                  node: vt.some(At.fromDom(t)),\n                  overrides: u,\n                  layouts: {\n                    onRtl: function onRtl() {\n                      return [e];\n                    },\n                    onLtr: function onLtr() {\n                      return [e];\n                    }\n                  }\n                }, up.showWithinBounds(c, i, {\n                  anchor: o\n                }, s)) : (r = _lt(_lt({}, l.anchors.banner()), {\n                  overrides: u\n                }), up.showWithinBounds(c, i, {\n                  anchor: r\n                }, s));\n              },\n              text: function text(t) {\n                hp.updateText(a, t);\n              },\n              settings: t,\n              getEl: function getEl() {\n                return a.element.dom;\n              },\n              progressBar: {\n                value: function value(t) {\n                  hp.updateProgress(a, t);\n                }\n              }\n            };\n          },\n          close: function close(t) {\n            t.close();\n          },\n          reposition: function reposition(e) {\n            0 < e.length && St(e, function (t, n) {\n              0 === n ? t.moveRel(null, \"banner\") : t.moveRel(e[n - 1].getEl(), \"bc-tc\");\n            });\n          },\n          getArgs: function getArgs(t) {\n            return t.settings;\n          }\n        };\n        var u, r, l;\n      },\n      ui: i()\n    };\n  });\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/theme.min.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/theme.min.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;